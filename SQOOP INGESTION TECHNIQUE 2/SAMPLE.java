// ORM class for table 'SAMPLE'
// WARNING: This class is AUTO-GENERATED. Modify at your own risk.
//
// Debug information:
// Generated date: Wed Apr 28 13:43:36 GST 2021
// For connector: org.apache.sqoop.manager.SQLServerManager
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.mapred.lib.db.DBWritable;
import org.apache.sqoop.lib.JdbcWritableBridge;
import org.apache.sqoop.lib.DelimiterSet;
import org.apache.sqoop.lib.FieldFormatter;
import org.apache.sqoop.lib.RecordParser;
import org.apache.sqoop.lib.BooleanParser;
import org.apache.sqoop.lib.BlobRef;
import org.apache.sqoop.lib.ClobRef;
import org.apache.sqoop.lib.LargeObjectLoader;
import org.apache.sqoop.lib.SqoopRecord;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class SAMPLE extends SqoopRecord  implements DBWritable, Writable {
  private final int PROTOCOL_VERSION = 3;
  public int getClassFormatVersion() { return PROTOCOL_VERSION; }
  public static interface FieldSetterCommand {    void setField(Object value);  }  protected ResultSet __cur_result_set;
  private Map<String, FieldSetterCommand> setters = new HashMap<String, FieldSetterCommand>();
  private void init0() {
    setters.put("SAMPLE_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLE_NUMBER = (Integer)value;
      }
    });
    setters.put("TEXT_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.TEXT_ID = (String)value;
      }
    });
    setters.put("STATUS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STATUS = (String)value;
      }
    });
    setters.put("OLD_STATUS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.OLD_STATUS = (String)value;
      }
    });
    setters.put("DISP_FLDS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.DISP_FLDS = (String)value;
      }
    });
    setters.put("LABEL_MASK", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LABEL_MASK = (String)value;
      }
    });
    setters.put("IN_SPEC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.IN_SPEC = (String)value;
      }
    });
    setters.put("IN_CAL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.IN_CAL = (String)value;
      }
    });
    setters.put("CHANGED_ON", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CHANGED_ON = (java.sql.Timestamp)value;
      }
    });
    setters.put("RE_SAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RE_SAMPLE = (String)value;
      }
    });
    setters.put("ALIQUOT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ALIQUOT = (String)value;
      }
    });
    setters.put("ORIGINAL_SAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ORIGINAL_SAMPLE = (Integer)value;
      }
    });
    setters.put("PARENT_SAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PARENT_SAMPLE = (Integer)value;
      }
    });
    setters.put("PARENT_ALIQUOT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PARENT_ALIQUOT = (Integer)value;
      }
    });
    setters.put("ALIQUOT_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ALIQUOT_GROUP = (String)value;
      }
    });
    setters.put("SAMPLE_VOLUME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLE_VOLUME = (Float)value;
      }
    });
    setters.put("SAMPLE_UNITS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLE_UNITS = (String)value;
      }
    });
    setters.put("LOGIN_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LOGIN_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("LOGIN_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LOGIN_BY = (String)value;
      }
    });
    setters.put("SAMPLED_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLED_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("RECD_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RECD_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("RECEIVED_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RECEIVED_BY = (String)value;
      }
    });
    setters.put("DATE_STARTED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.DATE_STARTED = (java.sql.Timestamp)value;
      }
    });
    setters.put("STARTED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STARTED = (String)value;
      }
    });
    setters.put("ASSIGNED_OPERATOR", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ASSIGNED_OPERATOR = (String)value;
      }
    });
    setters.put("DUE_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.DUE_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("DATE_COMPLETED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.DATE_COMPLETED = (java.sql.Timestamp)value;
      }
    });
    setters.put("DATE_REVIEWED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.DATE_REVIEWED = (java.sql.Timestamp)value;
      }
    });
    setters.put("PREP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PREP = (String)value;
      }
    });
    setters.put("PREP_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PREP_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("PREP_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PREP_BY = (String)value;
      }
    });
    setters.put("REVIEWER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.REVIEWER = (String)value;
      }
    });
    setters.put("REVIEW_NOTE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.REVIEW_NOTE = (String)value;
      }
    });
    setters.put("PRODUCT_CODE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PRODUCT_CODE = (String)value;
      }
    });
    setters.put("PRODUCT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PRODUCT = (String)value;
      }
    });
    setters.put("PRODUCT_VERSION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PRODUCT_VERSION = (Integer)value;
      }
    });
    setters.put("PRODUCT_GRADE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PRODUCT_GRADE = (String)value;
      }
    });
    setters.put("SAMPLING_POINT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLING_POINT = (String)value;
      }
    });
    setters.put("SAMPLE_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLE_TYPE = (String)value;
      }
    });
    setters.put("PROJECT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PROJECT = (String)value;
      }
    });
    setters.put("BATCH_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.BATCH_NAME = (String)value;
      }
    });
    setters.put("BATCH_TEMPLATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.BATCH_TEMPLATE = (String)value;
      }
    });
    setters.put("STEP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STEP = (String)value;
      }
    });
    setters.put("SAMPLE_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLE_NAME = (String)value;
      }
    });
    setters.put("DESCRIPTION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.DESCRIPTION = (String)value;
      }
    });
    setters.put("PRIORITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PRIORITY = (Integer)value;
      }
    });
    setters.put("LOCATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LOCATION = (String)value;
      }
    });
    setters.put("CUSTOMER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CUSTOMER = (String)value;
      }
    });
    setters.put("TEST_LIST", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.TEST_LIST = (String)value;
      }
    });
    setters.put("TEMPLATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.TEMPLATE = (String)value;
      }
    });
    setters.put("RECIPIENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RECIPIENT = (String)value;
      }
    });
    setters.put("STANDARD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STANDARD = (String)value;
      }
    });
    setters.put("EXT_LINK", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.EXT_LINK = (String)value;
      }
    });
    setters.put("CONDITION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CONDITION = (String)value;
      }
    });
    setters.put("TIMEPOINT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.TIMEPOINT = (String)value;
      }
    });
    setters.put("LOT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LOT = (Integer)value;
      }
    });
    setters.put("BASE_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.BASE_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("AVAILABLE_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.AVAILABLE_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("REQUIRED_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.REQUIRED_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("TARGET_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.TARGET_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("PARTIAL_SPEC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PARTIAL_SPEC = (String)value;
      }
    });
    setters.put("SPEC_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SPEC_TYPE = (String)value;
      }
    });
    setters.put("STAGE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STAGE = (String)value;
      }
    });
    setters.put("PRIMARY_IN_SPEC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PRIMARY_IN_SPEC = (String)value;
      }
    });
    setters.put("BATCH", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.BATCH = (String)value;
      }
    });
    setters.put("CHARGE_CODE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CHARGE_CODE = (String)value;
      }
    });
    setters.put("FORMULATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.FORMULATION = (String)value;
      }
    });
    setters.put("PROTOCOL_LEVEL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PROTOCOL_LEVEL = (String)value;
      }
    });
    setters.put("RELEASED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RELEASED = (String)value;
      }
    });
    setters.put("RELEASED_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RELEASED_BY = (String)value;
      }
    });
    setters.put("RELEASED_ON", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.RELEASED_ON = (java.sql.Timestamp)value;
      }
    });
    setters.put("IN_CONTROL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.IN_CONTROL = (String)value;
      }
    });
    setters.put("INVESTIGATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INVESTIGATION = (String)value;
      }
    });
    setters.put("INVESTIGATED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INVESTIGATED = (String)value;
      }
    });
    setters.put("APPROVED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.APPROVED = (String)value;
      }
    });
    setters.put("APPROVAL_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.APPROVAL_GROUP = (String)value;
      }
    });
    setters.put("READY_FOR_APPROVAL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.READY_FOR_APPROVAL = (String)value;
      }
    });
    setters.put("APPROVAL_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.APPROVAL_ID = (Integer)value;
      }
    });
    setters.put("APPROVAL_ROUTING", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.APPROVAL_ROUTING = (String)value;
      }
    });
    setters.put("MODIFIED_RESULTS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.MODIFIED_RESULTS = (String)value;
      }
    });
    setters.put("REPORT_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.REPORT_NUMBER = (Integer)value;
      }
    });
    setters.put("COMPOSITE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.COMPOSITE = (String)value;
      }
    });
    setters.put("PARENT_COMPOSITE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PARENT_COMPOSITE = (Integer)value;
      }
    });
    setters.put("COMPOSITE_TEMPLATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.COMPOSITE_TEMPLATE = (String)value;
      }
    });
    setters.put("SEASON_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SEASON_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("PEOPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PEOPLE = (Integer)value;
      }
    });
    setters.put("TEST_LOCATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.TEST_LOCATION = (String)value;
      }
    });
    setters.put("OWNER_LOCATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.OWNER_LOCATION = (String)value;
      }
    });
    setters.put("CHK_ALIQUOT_STATUS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CHK_ALIQUOT_STATUS = (String)value;
      }
    });
    setters.put("CHK_ALIQUOT_SPECS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CHK_ALIQUOT_SPECS = (String)value;
      }
    });
    setters.put("ALIQUOT_TEMPLATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ALIQUOT_TEMPLATE = (String)value;
      }
    });
    setters.put("CALC_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CALC_GROUP = (String)value;
      }
    });
    setters.put("SAMPLE_EVENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLE_EVENT = (Integer)value;
      }
    });
    setters.put("LABEL_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LABEL_ID = (String)value;
      }
    });
    setters.put("HAS_FLAGS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.HAS_FLAGS = (String)value;
      }
    });
    setters.put("VARIATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.VARIATION = (String)value;
      }
    });
    setters.put("SAMPLED_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLED_BY = (String)value;
      }
    });
    setters.put("SAMPLED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAMPLED = (String)value;
      }
    });
    setters.put("ORDER_NUM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ORDER_NUM = (String)value;
      }
    });
    setters.put("LAST_ORDER_NUM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LAST_ORDER_NUM = (String)value;
      }
    });
    setters.put("STORAGE_CONDITION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STORAGE_CONDITION = (String)value;
      }
    });
    setters.put("CONTAINER_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CONTAINER_TYPE = (String)value;
      }
    });
    setters.put("NUM_CONTAINERS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.NUM_CONTAINERS = (Integer)value;
      }
    });
    setters.put("IMPORTANT_MESSAGE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.IMPORTANT_MESSAGE = (String)value;
      }
    });
    setters.put("OBSERVATIONS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.OBSERVATIONS = (String)value;
      }
    });
    setters.put("LAB", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LAB = (String)value;
      }
    });
    setters.put("EXPIRATION_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.EXPIRATION_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("REQD_VOLUME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.REQD_VOLUME = (Float)value;
      }
    });
    setters.put("COLLECTION_METHOD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.COLLECTION_METHOD = (String)value;
      }
    });
    setters.put("COLLECTION_OFFSET", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.COLLECTION_OFFSET = (Integer)value;
      }
    });
    setters.put("SIGNED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SIGNED = (String)value;
      }
    });
    setters.put("CASE_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CASE_NAME = (String)value;
      }
    });
    setters.put("CONTRACT_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CONTRACT_NUMBER = (Integer)value;
      }
    });
    setters.put("BILLING_ITEM_DESC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.BILLING_ITEM_DESC = (String)value;
      }
    });
    setters.put("INTERPRETED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INTERPRETED = (String)value;
      }
    });
    setters.put("INTERP_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INTERP_TYPE = (String)value;
      }
    });
    setters.put("INSPECT_PNT_NUM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INSPECT_PNT_NUM = (Integer)value;
      }
    });
    setters.put("INSPECTION_LOT_NUM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INSPECTION_LOT_NUM = (String)value;
      }
    });
    setters.put("IS_INSPECT_PNT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.IS_INSPECT_PNT = (String)value;
      }
    });
    setters.put("PLANT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PLANT = (String)value;
      }
    });
    setters.put("USERC1_VALUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.USERC1_VALUE = (String)value;
      }
    });
    setters.put("USERC2_VALUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.USERC2_VALUE = (String)value;
      }
    });
    setters.put("USERD1_VALUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.USERD1_VALUE = (String)value;
      }
    });
    setters.put("USERN1_VALUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.USERN1_VALUE = (String)value;
      }
    });
    setters.put("USERN2_VALUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.USERN2_VALUE = (String)value;
      }
    });
    setters.put("USERT1_VALUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.USERT1_VALUE = (String)value;
      }
    });
    setters.put("SAP_SELECTED_SET", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAP_SELECTED_SET = (String)value;
      }
    });
    setters.put("SAP_CODE_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAP_CODE_GROUP = (String)value;
      }
    });
    setters.put("SAP_SAMPLE_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAP_SAMPLE_NUMBER = (String)value;
      }
    });
    setters.put("SAP_SS_PLANT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAP_SS_PLANT = (String)value;
      }
    });
    setters.put("SAP_SAMPLE_COUNT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SAP_SAMPLE_COUNT = (String)value;
      }
    });
    setters.put("OPERATION_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.OPERATION_NUMBER = (String)value;
      }
    });
    setters.put("STORAGE_LOC_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STORAGE_LOC_NO = (Integer)value;
      }
    });
    setters.put("EXTERNAL_LOCATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.EXTERNAL_LOCATION = (String)value;
      }
    });
    setters.put("FORMULATION_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.FORMULATION_NAME = (String)value;
      }
    });
    setters.put("STANDARD_REAGENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STANDARD_REAGENT = (String)value;
      }
    });
    setters.put("CONVERSION_GROUPS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.CONVERSION_GROUPS = (String)value;
      }
    });
    setters.put("REPORTED_RSLT_OOS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.REPORTED_RSLT_OOS = (String)value;
      }
    });
    setters.put("GROUP_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.GROUP_NAME = (String)value;
      }
    });
    setters.put("PROCESS_UNIT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PROCESS_UNIT = (String)value;
      }
    });
    setters.put("HAZARD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.HAZARD = (String)value;
      }
    });
    setters.put("INSTRUMENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.INSTRUMENT = (String)value;
      }
    });
    setters.put("T_SITE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SITE = (String)value;
      }
    });
    setters.put("T_PLANT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PLANT = (String)value;
      }
    });
    setters.put("T_CERTIFICATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_CERTIFICATE = (String)value;
      }
    });
    setters.put("T_CONTAINER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_CONTAINER = (String)value;
      }
    });
    setters.put("T_OVERDUE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_OVERDUE = (String)value;
      }
    });
    setters.put("T_PO_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PO_NUMBER = (String)value;
      }
    });
    setters.put("T_PRODUCTION_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PRODUCTION_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_REPORT_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_REPORT_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_REQUESTED_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_REQUESTED_BY = (String)value;
      }
    });
    setters.put("T_LONG_NOTE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_LONG_NOTE = (Integer)value;
      }
    });
    setters.put("T_SHIFT_CODE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SHIFT_CODE = (String)value;
      }
    });
    setters.put("T_SUPP_BATCH_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SUPP_BATCH_NO = (String)value;
      }
    });
    setters.put("T_SUPPLIER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SUPPLIER = (String)value;
      }
    });
    setters.put("T_TRUCK_VESSEL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_TRUCK_VESSEL = (String)value;
      }
    });
    setters.put("T_PLANT_RECV_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PLANT_RECV_BY = (String)value;
      }
    });
    setters.put("T_PLANT_RECV_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PLANT_RECV_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_PRIORITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRIORITY = (String)value;
      }
    });
    setters.put("STORAGE_TEMPLATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.STORAGE_TEMPLATE = (String)value;
      }
    });
    setters.put("ALLOW_CHLD_ALQTS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.ALLOW_CHLD_ALQTS = (String)value;
      }
    });
    setters.put("PHASE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.PHASE = (String)value;
      }
    });
    setters.put("SCHEDULE_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.SCHEDULE_NUMBER = (Integer)value;
      }
    });
    setters.put("T_ACTION_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_ACTION_NUMBER = (Integer)value;
      }
    });
    setters.put("T_BATCH_NAME1", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_BATCH_NAME1 = (String)value;
      }
    });
    setters.put("T_BATCH_NAME2", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_BATCH_NAME2 = (String)value;
      }
    });
    setters.put("T_BATCH_NAME3", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_BATCH_NAME3 = (String)value;
      }
    });
    setters.put("T_BATCH_NAME4", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_BATCH_NAME4 = (String)value;
      }
    });
    setters.put("T_BATCH_NAME5", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_BATCH_NAME5 = (String)value;
      }
    });
    setters.put("T_BATCH_NAME6", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_BATCH_NAME6 = (String)value;
      }
    });
    setters.put("T_COLLECT_SCHEME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_COLLECT_SCHEME = (String)value;
      }
    });
    setters.put("T_COMPOSITE_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_COMPOSITE_GROUP = (String)value;
      }
    });
    setters.put("T_DISTRIBUTION_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_DISTRIBUTION_BY = (String)value;
      }
    });
    setters.put("T_DISTRIBUTION_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_DISTRIBUTION_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_EM_PLAN", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_EM_PLAN = (Integer)value;
      }
    });
    setters.put("T_INCUB1_BATCH", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_INCUB1_BATCH = (String)value;
      }
    });
    setters.put("T_INCUB1_END", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_INCUB1_END = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_INCUB1_START", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_INCUB1_START = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_INCUB2_BATCH", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_INCUB2_BATCH = (String)value;
      }
    });
    setters.put("T_INCUB2_END", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_INCUB2_END = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_INCUB2_START", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_INCUB2_START = (java.sql.Timestamp)value;
      }
    });
    setters.put("T_MEDIA_REFERENCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_MEDIA_REFERENCE = (String)value;
      }
    });
    setters.put("T_ORIGINAL_SAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_ORIGINAL_SAMPLE = (Integer)value;
      }
    });
    setters.put("T_PERSONNEL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PERSONNEL = (String)value;
      }
    });
    setters.put("T_PERSONNEL_SET", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_PERSONNEL_SET = (String)value;
      }
    });
    setters.put("T_SAMPLE_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SAMPLE_TYPE = (String)value;
      }
    });
    setters.put("T_SCHEDULE_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SCHEDULE_GROUP = (String)value;
      }
    });
    setters.put("T_SUITE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_SUITE = (String)value;
      }
    });
    setters.put("T_TRANSIT_LOCATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_TRANSIT_LOCATION = (String)value;
      }
    });
    setters.put("T_VALIDATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.T_VALIDATION = (String)value;
      }
    });
    setters.put("C_REFERENCE_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REFERENCE_ID = (String)value;
      }
    });
    setters.put("C_SAMPLING_REASON", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLING_REASON = (String)value;
      }
    });
    setters.put("C_CUSTOMER_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CUSTOMER_TYPE = (String)value;
      }
    });
    setters.put("C_REQUEST_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQUEST_TYPE = (String)value;
      }
    });
    setters.put("C_OTHER_SAMPLE_SOURCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_OTHER_SAMPLE_SOURCE = (String)value;
      }
    });
    setters.put("C_CUST_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CUST_ID = (String)value;
      }
    });
    setters.put("C_CLIENT_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CLIENT_TYPE = (String)value;
      }
    });
    setters.put("C_REQ_SAMP_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_SAMP_TYPE = (String)value;
      }
    });
    setters.put("C_SAMPLE_SOURCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLE_SOURCE = (String)value;
      }
    });
    setters.put("C_DM_BARCODE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DM_BARCODE = (String)value;
      }
    });
    setters.put("C_REQ_EXT_REFERENCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_EXT_REFERENCE = (String)value;
      }
    });
    setters.put("C_EXPRESS_SERVICE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_EXPRESS_SERVICE = (String)value;
      }
    });
    setters.put("C_HARDCOPY_REQUIRED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_HARDCOPY_REQUIRED = (String)value;
      }
    });
    setters.put("C_REQ_REMARKS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_REMARKS = (String)value;
      }
    });
    setters.put("C_REQ_COPIES", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_COPIES = (Integer)value;
      }
    });
    setters.put("C_REQ_EDIT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_EDIT = (String)value;
      }
    });
    setters.put("C_TOTAL_SERVICE_FEE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TOTAL_SERVICE_FEE = (java.math.BigDecimal)value;
      }
    });
    setters.put("C_PRODUCT_GROUP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODUCT_GROUP = (String)value;
      }
    });
    setters.put("C_PRODUCT_CATEGORY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODUCT_CATEGORY = (String)value;
      }
    });
    setters.put("C_PRODUCTION_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODUCTION_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_NO_OF_UNIT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_NO_OF_UNIT = (Integer)value;
      }
    });
    setters.put("C_SAMPLE_CONDITION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLE_CONDITION = (String)value;
      }
    });
    setters.put("C_TEMP_REC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TEMP_REC = (Float)value;
      }
    });
    setters.put("C_POINT_OF_SAMPLING", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_POINT_OF_SAMPLING = (String)value;
      }
    });
    setters.put("C_REQ_SAMP_COLLECTION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_SAMP_COLLECTION = (String)value;
      }
    });
    setters.put("C_REQ_SAMP_BAL_RETURN", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_SAMP_BAL_RETURN = (String)value;
      }
    });
    setters.put("C_HAZARD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_HAZARD = (String)value;
      }
    });
    setters.put("C_BATCH_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BATCH_NO = (String)value;
      }
    });
    setters.put("C_REQUEST_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQUEST_NO = (String)value;
      }
    });
    setters.put("C_BILLING_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BILLING_TYPE = (String)value;
      }
    });
    setters.put("C_TOTAL_TEST_CHARGE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TOTAL_TEST_CHARGE = (java.math.BigDecimal)value;
      }
    });
    setters.put("C_VOUCHER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_VOUCHER = (String)value;
      }
    });
    setters.put("C_ERAD_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ERAD_NO = (String)value;
      }
    });
    setters.put("C_RECEIPT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_RECEIPT = (String)value;
      }
    });
    setters.put("C_PAYMENT_DT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PAYMENT_DT = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_PAYMENT_SRC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PAYMENT_SRC = (String)value;
      }
    });
    setters.put("C_PAYMENT_STATUS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PAYMENT_STATUS = (String)value;
      }
    });
    setters.put("C_CUST_DELIVERY_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CUST_DELIVERY_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_SAMPLE_OPINION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLE_OPINION = (String)value;
      }
    });
    setters.put("C_SUBCAT_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SUBCAT_ID = (Integer)value;
      }
    });
    setters.put("C_PRODCAT_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODCAT_ID = (Integer)value;
      }
    });
    setters.put("C_PROD_GROUP_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PROD_GROUP_ID = (Integer)value;
      }
    });
    setters.put("C_MSG_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MSG_ID = (String)value;
      }
    });
    setters.put("C_MSG_DIGEST", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MSG_DIGEST = (String)value;
      }
    });
    setters.put("C_REQ_SOURCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_SOURCE = (String)value;
      }
    });
    setters.put("C_ITEM_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ITEM_ID = (Integer)value;
      }
    });
    setters.put("C_SRC_REQ_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SRC_REQ_ID = (String)value;
      }
    });
    setters.put("C_EXPECTED_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_EXPECTED_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_PRODUCT_DESC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODUCT_DESC = (String)value;
      }
    });
    setters.put("C_DATE_ONHOLD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DATE_ONHOLD = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_DATE_OFFHOLD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DATE_OFFHOLD = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_ONHOLD_REASON", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ONHOLD_REASON = (String)value;
      }
    });
    setters.put("LATITUDE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LATITUDE = (String)value;
      }
    });
    setters.put("LONGITUDE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.LONGITUDE = (String)value;
      }
    });
    setters.put("C_ON_SITE_PRESERVATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ON_SITE_PRESERVATION = (String)value;
      }
    });
    setters.put("C_PRESERVATION_METHOD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRESERVATION_METHOD = (String)value;
      }
    });
    setters.put("C_SAMPLING_PROCEDURE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLING_PROCEDURE = (String)value;
      }
    });
    setters.put("C_SAMPLING_APPARATUS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLING_APPARATUS = (String)value;
      }
    });
    setters.put("C_APPEARANCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_APPEARANCE = (String)value;
      }
    });
    setters.put("C_COLOUR", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COLOUR = (String)value;
      }
    });
    setters.put("C_ODOUR", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ODOUR = (String)value;
      }
    });
    setters.put("C_SAMPLING_COLLECTION_LOC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLING_COLLECTION_LOC = (String)value;
      }
    });
    setters.put("C_REPORT_ID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REPORT_ID = (String)value;
      }
    });
    setters.put("C_DELIVERED_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DELIVERED_BY = (String)value;
      }
    });
    setters.put("C_MAKANI_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MAKANI_NO = (String)value;
      }
    });
    setters.put("C_COUNTRY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COUNTRY = (String)value;
      }
    });
    setters.put("C_BUILDING_FLOOR", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BUILDING_FLOOR = (String)value;
      }
    });
    setters.put("C_LOCATION_DESC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_LOCATION_DESC = (String)value;
      }
    });
    setters.put("C_ITEM_BARCODE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ITEM_BARCODE = (String)value;
      }
    });
    setters.put("C_ITEM_BRAND", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ITEM_BRAND = (String)value;
      }
    });
    setters.put("C_MANUFACTURER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MANUFACTURER = (String)value;
      }
    });
    setters.put("C_COUNTRY_ORIGIN", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COUNTRY_ORIGIN = (String)value;
      }
    });
    setters.put("C_ITEM_TRADE_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ITEM_TRADE_NAME = (String)value;
      }
    });
    setters.put("C_PROCESS_ONE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PROCESS_ONE = (String)value;
      }
    });
    setters.put("C_PROCESS_TWO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PROCESS_TWO = (String)value;
      }
    });
    setters.put("C_SHELF_LIFE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SHELF_LIFE = (String)value;
      }
    });
    setters.put("C_SHELF_LIFE_UNIT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SHELF_LIFE_UNIT = (String)value;
      }
    });
    setters.put("C_STORAGE_CONDITION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_STORAGE_CONDITION = (String)value;
      }
    });
    setters.put("C_WEIGHT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_WEIGHT = (String)value;
      }
    });
    setters.put("C_WEIGHT_UNIT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_WEIGHT_UNIT = (String)value;
      }
    });
    setters.put("C_PACKAGING_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PACKAGING_TYPE = (String)value;
      }
    });
    setters.put("C_TEST_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TEST_TYPE = (String)value;
      }
    });
    setters.put("C_EXTERNAL_REFERENCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_EXTERNAL_REFERENCE = (String)value;
      }
    });
    setters.put("C_NOMINAL_SIZE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_NOMINAL_SIZE = (String)value;
      }
    });
    setters.put("C_LAYER_MIX_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_LAYER_MIX_TYPE = (String)value;
      }
    });
    setters.put("C_SAMPLE_UNIT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLE_UNIT = (String)value;
      }
    });
    setters.put("C_SAMP_QNTY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMP_QNTY = (Integer)value;
      }
    });
    setters.put("C_SAMPLED_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLED_BY = (String)value;
      }
    });
    setters.put("C_BITUMEN_LOCALSUPPLIER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BITUMEN_LOCALSUPPLIER = (String)value;
      }
    });
    setters.put("C_BLOCK_TOTALBUNDLES", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BLOCK_TOTALBUNDLES = (String)value;
      }
    });
    setters.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = (String)value;
      }
    });
    setters.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = (String)value;
      }
    });
    setters.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = (String)value;
      }
    });
    setters.put("C_BLOCK_BLOCKSPERBUNDLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BLOCK_BLOCKSPERBUNDLE = (String)value;
      }
    });
    setters.put("C_BLOCK_RELATEDCERTIFICATIONREQUESTID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = (String)value;
      }
    });
    setters.put("C_MORTAR_WATERORCEMENTRATIO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MORTAR_WATERORCEMENTRATIO = (String)value;
      }
    });
    setters.put("C_MORTAR_TYPEOFMORTAR", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MORTAR_TYPEOFMORTAR = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_NOMTHICKNESS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_NOMTHICKNESS = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_NOMDENSITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_NOMDENSITY = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_NOMDIAMETER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_NOMDIAMETER = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_FACINGTYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_FACINGTYPE = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_FACINGDESCRIPTION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_FACINGDESCRIPTION = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_TESTTEMPORHUMIDITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = (String)value;
      }
    });
    setters.put("C_THERMALINSULATION_AGEOFSAMPLEDAYS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = (String)value;
      }
    });
    setters.put("C_LUBEOIL_VISCOSITYGRADE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_LUBEOIL_VISCOSITYGRADE = (String)value;
      }
    });
    setters.put("C_ASPHALT_REFGMB", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFGMB = (String)value;
      }
    });
    setters.put("C_ASPHALT_REFGSB", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFGSB = (String)value;
      }
    });
    setters.put("C_ASPHALT_REFGSE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFGSE = (String)value;
      }
    });
    setters.put("C_ASPHALT_REFGB", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFGB = (String)value;
      }
    });
    setters.put("C_ASPHALT_LAYINGDATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_LAYINGDATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_ASPHALT_REFMARSHALLREQNO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFMARSHALLREQNO = (String)value;
      }
    });
    setters.put("C_ASPHALT_REFBITUMENREQNO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFBITUMENREQNO = (String)value;
      }
    });
    setters.put("C_ASPHALT_REFMIX", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_REFMIX = (String)value;
      }
    });
    setters.put("C_ASPHALT_CALIBRATIONFACTOR", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_CALIBRATIONFACTOR = (String)value;
      }
    });
    setters.put("C_ASPHALT_GRADINGORBITUMENSPECS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_GRADINGORBITUMENSPECS = (String)value;
      }
    });
    setters.put("C_ASPHALT_OTHERSPECS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASPHALT_OTHERSPECS = (String)value;
      }
    });
    setters.put("C_CEMENT_CLASSOFCEMENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CEMENT_CLASSOFCEMENT = (String)value;
      }
    });
    setters.put("C_CONCRETE_GRADEOFCONCRETE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_GRADEOFCONCRETE = (String)value;
      }
    });
    setters.put("C_CONCRETE_CEMENTCONTENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_CEMENTCONTENT = (String)value;
      }
    });
    setters.put("C_CONCRETE_TESTINGAGEOFSAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_TESTINGAGEOFSAMPLE = (String)value;
      }
    });
    setters.put("C_CONCRETE_ESTIMATEDTESTDATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_ESTIMATEDTESTDATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_CONCRETE_TRUCKNUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_TRUCKNUMBER = (String)value;
      }
    });
    setters.put("C_CONCRETE_PLACEOFMAKINGCUBES", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_PLACEOFMAKINGCUBES = (String)value;
      }
    });
    setters.put("C_CONCRETE_EQUIPMENTTYPEUSED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_EQUIPMENTTYPEUSED = (String)value;
      }
    });
    setters.put("C_CONCRETE_CURINGORSTORAGECONDITIONS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_CURINGORSTORAGECONDITIONS = (String)value;
      }
    });
    setters.put("C_CONCRETE_METHODOFCOMPACTION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_METHODOFCOMPACTION = (String)value;
      }
    });
    setters.put("C_CONCRETE_CONDITIONOFSAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONCRETE_CONDITIONOFSAMPLE = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_CEMENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_CEMENT = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_CEMENTTYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_CEMENTTYPE = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_ADMIXTURE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_ADMIXTURE = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_ADMIXTURETYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_ADMIXTURETYPE = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_AGGREGATE_20MM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_AGGREGATE_20MM = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_AGGREGATE_10MM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_AGGREGATE_10MM = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_AGGREGATE_1MM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_AGGREGATE_1MM = (String)value;
      }
    });
    setters.put("C_FRESHCONCRETE_CONCRETE_CLASS_GRADE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = (String)value;
      }
    });
    setters.put("C_SOIL_MDD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SOIL_MDD = (String)value;
      }
    });
    setters.put("C_SOIL_OMC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SOIL_OMC = (String)value;
      }
    });
    setters.put("C_SOIL_MDD_OMC_REF", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SOIL_MDD_OMC_REF = (String)value;
      }
    });
    setters.put("C_SOIL_BFRL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SOIL_BFRL = (String)value;
      }
    });
    setters.put("C_SOIL_LAYER_THICKNESSMM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SOIL_LAYER_THICKNESSMM = (String)value;
      }
    });
    setters.put("C_SOIL_SOURCE_MINERAL_AGG", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SOIL_SOURCE_MINERAL_AGG = (String)value;
      }
    });
    setters.put("C_STEEL_MANUFACTURER_CERT_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_STEEL_MANUFACTURER_CERT_NO = (String)value;
      }
    });
    setters.put("C_STEEL_GRADE_STEEL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_STEEL_GRADE_STEEL = (String)value;
      }
    });
    setters.put("C_STEEL_LOCAL_SUPPLIER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_STEEL_LOCAL_SUPPLIER = (String)value;
      }
    });
    setters.put("C_STEEL_HEAT_NUMBER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_STEEL_HEAT_NUMBER = (String)value;
      }
    });
    setters.put("C_PRODUCT_TEST_SERV", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODUCT_TEST_SERV = (String)value;
      }
    });
    setters.put("C_SAMPLING_METHOD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLING_METHOD = (String)value;
      }
    });
    setters.put("C_SAMPLE_DESC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLE_DESC = (String)value;
      }
    });
    setters.put("C_BATCH_SIZE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_BATCH_SIZE = (String)value;
      }
    });
    setters.put("C_UNITNO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_UNITNO = (String)value;
      }
    });
    setters.put("C_UNITSIZE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_UNITSIZE = (String)value;
      }
    });
    setters.put("C_NO_INCREMENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_NO_INCREMENT = (String)value;
      }
    });
    setters.put("C_MORE_SAMPLE_NOTE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MORE_SAMPLE_NOTE = (Integer)value;
      }
    });
    setters.put("C_STAGES", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_STAGES = (String)value;
      }
    });
    setters.put("C_RETURN_NOTE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_RETURN_NOTE = (String)value;
      }
    });
    setters.put("C_DISCARD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DISCARD = (String)value;
      }
    });
    setters.put("C_DISCARD_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DISCARD_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_DISCARD_BY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DISCARD_BY = (String)value;
      }
    });
    setters.put("C_TRAVEL_CALCULATED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TRAVEL_CALCULATED = (String)value;
      }
    });
    setters.put("C_PHYSICAL_OBSERVATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PHYSICAL_OBSERVATION = (String)value;
      }
    });
    setters.put("C_SENDER_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SENDER_NO = (String)value;
      }
    });
    setters.put("C_REF_SENDER_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REF_SENDER_NO = (String)value;
      }
    });
    setters.put("C_TESTLAB", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TESTLAB = (String)value;
      }
    });
    setters.put("C_PRIMARY_RESULT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRIMARY_RESULT = (String)value;
      }
    });
    setters.put("C_PRIMARY_REPORT_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRIMARY_REPORT_NO = (String)value;
      }
    });
    setters.put("C_REF_RESULT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REF_RESULT = (String)value;
      }
    });
    setters.put("C_REF_REPORT_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REF_REPORT_NO = (String)value;
      }
    });
    setters.put("C_DETERMINATION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DETERMINATION = (String)value;
      }
    });
    setters.put("C_EQUIPMENT_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_EQUIPMENT_TYPE = (String)value;
      }
    });
    setters.put("C_EQUIPMENT_CLASS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_EQUIPMENT_CLASS = (String)value;
      }
    });
    setters.put("C_CAPACITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CAPACITY = (String)value;
      }
    });
    setters.put("C_NO_OF_MEASUREMENTS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_NO_OF_MEASUREMENTS = (String)value;
      }
    });
    setters.put("C_REQ_DATE_CALIB", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_REQ_DATE_CALIB = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_CALIB_SITE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CALIB_SITE = (String)value;
      }
    });
    setters.put("C_CALIB_METHOD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CALIB_METHOD = (String)value;
      }
    });
    setters.put("C_ASSET_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ASSET_NAME = (String)value;
      }
    });
    setters.put("C_MODEL_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MODEL_NO = (String)value;
      }
    });
    setters.put("C_PURCHASE_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PURCHASE_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_PURCHASE_PRICE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PURCHASE_PRICE = (java.math.BigDecimal)value;
      }
    });
    setters.put("C_DELIVERY_RECD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DELIVERY_RECD = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_DATE_OF_INSTALL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DATE_OF_INSTALL = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_TAG_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TAG_NO = (Integer)value;
      }
    });
    setters.put("C_SERIAL_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SERIAL_NO = (Integer)value;
      }
    });
    setters.put("C_NO_OF_ACCESSORIES", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_NO_OF_ACCESSORIES = (Integer)value;
      }
    });
    setters.put("C_ACCESSORY_DETAIL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ACCESSORY_DETAIL = (String)value;
      }
    });
    setters.put("C_ADDR_ROOM_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ADDR_ROOM_NO = (String)value;
      }
    });
    setters.put("C_WARRANTY_EXP_DATE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_WARRANTY_EXP_DATE = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_UNDER_CONTRACT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_UNDER_CONTRACT = (String)value;
      }
    });
    setters.put("C_CONTRACT_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONTRACT_NO = (String)value;
      }
    });
    setters.put("C_CONTRACT_COMP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONTRACT_COMP = (String)value;
      }
    });
    setters.put("C_CONTRACT_START", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONTRACT_START = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_CONTRACT_END", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONTRACT_END = (java.sql.Timestamp)value;
      }
    });
    setters.put("C_CALIB_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CALIB_TYPE = (String)value;
      }
    });
    setters.put("C_AGE_GROUP_LABEL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_AGE_GROUP_LABEL = (String)value;
      }
    });
    setters.put("C_AGE_GROUP_TEST", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_AGE_GROUP_TEST = (String)value;
      }
    });
    setters.put("C_TOYS_DIMENSION", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TOYS_DIMENSION = (String)value;
      }
    });
    setters.put("C_TOYS_FEATURES", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TOYS_FEATURES = (String)value;
      }
    });
    setters.put("C_TOYS_LABEL_DETAILS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TOYS_LABEL_DETAILS = (String)value;
      }
    });
    setters.put("C_TEXTILE_CLASS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TEXTILE_CLASS = (String)value;
      }
    });
    setters.put("C_TEXTILE_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TEXTILE_TYPE = (String)value;
      }
    });
    setters.put("C_MONTAJI_REGISTERED", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MONTAJI_REGISTERED = (String)value;
      }
    });
    setters.put("C_MONTAJI_REF", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MONTAJI_REF = (String)value;
      }
    });
    setters.put("C_SEALING_PACK", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SEALING_PACK = (String)value;
      }
    });
    setters.put("C_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_TYPE = (String)value;
      }
    });
    setters.put("C_FORM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FORM = (String)value;
      }
    });
    setters.put("C_FORM_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FORM_TYPE = (String)value;
      }
    });
    setters.put("C_FINENESS", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FINENESS = (String)value;
      }
    });
    setters.put("C_SHAPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SHAPE = (String)value;
      }
    });
    setters.put("C_LABORATORY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_LABORATORY = (String)value;
      }
    });
    setters.put("C_CEMARK", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CEMARK = (String)value;
      }
    });
    setters.put("C_AGE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_AGE = (Integer)value;
      }
    });
    setters.put("C_GENDER", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_GENDER = (String)value;
      }
    });
    setters.put("C_OWNER_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_OWNER_NAME = (String)value;
      }
    });
    setters.put("C_CONSIGNMENT_NO", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CONSIGNMENT_NO = (String)value;
      }
    });
    setters.put("C_SAMPLE_ORIGIN", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SAMPLE_ORIGIN = (String)value;
      }
    });
    setters.put("C_MEAT_REQ_TYP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_MEAT_REQ_TYP = (String)value;
      }
    });
    setters.put("C_PURPOSE_TEST", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PURPOSE_TEST = (String)value;
      }
    });
    setters.put("C_COLL_CLARITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COLL_CLARITY = (String)value;
      }
    });
    setters.put("C_COLL_DESC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COLL_DESC = (String)value;
      }
    });
    setters.put("C_COLL_ISCOLLSAMPLE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COLL_ISCOLLSAMPLE = (String)value;
      }
    });
    setters.put("C_COLL_NAME", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COLL_NAME = (String)value;
      }
    });
    setters.put("C_COLL_EMIRATEID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_COLL_EMIRATEID = (String)value;
      }
    });
    setters.put("C_DCL_USERID", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_DCL_USERID = (String)value;
      }
    });
    setters.put("C_FAILURE_DESC", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FAILURE_DESC = (String)value;
      }
    });
    setters.put("C_FAILURE_COMP", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_FAILURE_COMP = (String)value;
      }
    });
    setters.put("C_WORK_FAIL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_WORK_FAIL = (String)value;
      }
    });
    setters.put("C_PURCHASE_REF", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PURCHASE_REF = (String)value;
      }
    });
    setters.put("C_PURCHASE_TYPE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PURCHASE_TYPE = (String)value;
      }
    });
    setters.put("C_PEARL_FIELD", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PEARL_FIELD = (String)value;
      }
    });
    setters.put("C_POBOX", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_POBOX = (String)value;
      }
    });
    setters.put("C_PRODUCT_DILUENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PRODUCT_DILUENT = (String)value;
      }
    });
    setters.put("C_ACTIVE_SUBSTANCE", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_ACTIVE_SUBSTANCE = (String)value;
      }
    });
    setters.put("C_EDIT_ASSET", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_EDIT_ASSET = (String)value;
      }
    });
    setters.put("C_PH", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_PH = (java.math.BigDecimal)value;
      }
    });
    setters.put("C_NATUREOFACTIVITY", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_NATUREOFACTIVITY = (String)value;
      }
    });
    setters.put("C_CHLORINELEVEL", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_CHLORINELEVEL = (java.math.BigDecimal)value;
      }
    });
    setters.put("C_RISK_ASSESSMENT", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_RISK_ASSESSMENT = (String)value;
      }
    });
    setters.put("C_SPECIMEN", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        SAMPLE.this.C_SPECIMEN = (Integer)value;
      }
    });
  }
  public SAMPLE() {
    init0();
  }
  private Integer SAMPLE_NUMBER;
  public Integer get_SAMPLE_NUMBER() {
    return SAMPLE_NUMBER;
  }
  public void set_SAMPLE_NUMBER(Integer SAMPLE_NUMBER) {
    this.SAMPLE_NUMBER = SAMPLE_NUMBER;
  }
  public SAMPLE with_SAMPLE_NUMBER(Integer SAMPLE_NUMBER) {
    this.SAMPLE_NUMBER = SAMPLE_NUMBER;
    return this;
  }
  private String TEXT_ID;
  public String get_TEXT_ID() {
    return TEXT_ID;
  }
  public void set_TEXT_ID(String TEXT_ID) {
    this.TEXT_ID = TEXT_ID;
  }
  public SAMPLE with_TEXT_ID(String TEXT_ID) {
    this.TEXT_ID = TEXT_ID;
    return this;
  }
  private String STATUS;
  public String get_STATUS() {
    return STATUS;
  }
  public void set_STATUS(String STATUS) {
    this.STATUS = STATUS;
  }
  public SAMPLE with_STATUS(String STATUS) {
    this.STATUS = STATUS;
    return this;
  }
  private String OLD_STATUS;
  public String get_OLD_STATUS() {
    return OLD_STATUS;
  }
  public void set_OLD_STATUS(String OLD_STATUS) {
    this.OLD_STATUS = OLD_STATUS;
  }
  public SAMPLE with_OLD_STATUS(String OLD_STATUS) {
    this.OLD_STATUS = OLD_STATUS;
    return this;
  }
  private String DISP_FLDS;
  public String get_DISP_FLDS() {
    return DISP_FLDS;
  }
  public void set_DISP_FLDS(String DISP_FLDS) {
    this.DISP_FLDS = DISP_FLDS;
  }
  public SAMPLE with_DISP_FLDS(String DISP_FLDS) {
    this.DISP_FLDS = DISP_FLDS;
    return this;
  }
  private String LABEL_MASK;
  public String get_LABEL_MASK() {
    return LABEL_MASK;
  }
  public void set_LABEL_MASK(String LABEL_MASK) {
    this.LABEL_MASK = LABEL_MASK;
  }
  public SAMPLE with_LABEL_MASK(String LABEL_MASK) {
    this.LABEL_MASK = LABEL_MASK;
    return this;
  }
  private String IN_SPEC;
  public String get_IN_SPEC() {
    return IN_SPEC;
  }
  public void set_IN_SPEC(String IN_SPEC) {
    this.IN_SPEC = IN_SPEC;
  }
  public SAMPLE with_IN_SPEC(String IN_SPEC) {
    this.IN_SPEC = IN_SPEC;
    return this;
  }
  private String IN_CAL;
  public String get_IN_CAL() {
    return IN_CAL;
  }
  public void set_IN_CAL(String IN_CAL) {
    this.IN_CAL = IN_CAL;
  }
  public SAMPLE with_IN_CAL(String IN_CAL) {
    this.IN_CAL = IN_CAL;
    return this;
  }
  private java.sql.Timestamp CHANGED_ON;
  public java.sql.Timestamp get_CHANGED_ON() {
    return CHANGED_ON;
  }
  public void set_CHANGED_ON(java.sql.Timestamp CHANGED_ON) {
    this.CHANGED_ON = CHANGED_ON;
  }
  public SAMPLE with_CHANGED_ON(java.sql.Timestamp CHANGED_ON) {
    this.CHANGED_ON = CHANGED_ON;
    return this;
  }
  private String RE_SAMPLE;
  public String get_RE_SAMPLE() {
    return RE_SAMPLE;
  }
  public void set_RE_SAMPLE(String RE_SAMPLE) {
    this.RE_SAMPLE = RE_SAMPLE;
  }
  public SAMPLE with_RE_SAMPLE(String RE_SAMPLE) {
    this.RE_SAMPLE = RE_SAMPLE;
    return this;
  }
  private String ALIQUOT;
  public String get_ALIQUOT() {
    return ALIQUOT;
  }
  public void set_ALIQUOT(String ALIQUOT) {
    this.ALIQUOT = ALIQUOT;
  }
  public SAMPLE with_ALIQUOT(String ALIQUOT) {
    this.ALIQUOT = ALIQUOT;
    return this;
  }
  private Integer ORIGINAL_SAMPLE;
  public Integer get_ORIGINAL_SAMPLE() {
    return ORIGINAL_SAMPLE;
  }
  public void set_ORIGINAL_SAMPLE(Integer ORIGINAL_SAMPLE) {
    this.ORIGINAL_SAMPLE = ORIGINAL_SAMPLE;
  }
  public SAMPLE with_ORIGINAL_SAMPLE(Integer ORIGINAL_SAMPLE) {
    this.ORIGINAL_SAMPLE = ORIGINAL_SAMPLE;
    return this;
  }
  private Integer PARENT_SAMPLE;
  public Integer get_PARENT_SAMPLE() {
    return PARENT_SAMPLE;
  }
  public void set_PARENT_SAMPLE(Integer PARENT_SAMPLE) {
    this.PARENT_SAMPLE = PARENT_SAMPLE;
  }
  public SAMPLE with_PARENT_SAMPLE(Integer PARENT_SAMPLE) {
    this.PARENT_SAMPLE = PARENT_SAMPLE;
    return this;
  }
  private Integer PARENT_ALIQUOT;
  public Integer get_PARENT_ALIQUOT() {
    return PARENT_ALIQUOT;
  }
  public void set_PARENT_ALIQUOT(Integer PARENT_ALIQUOT) {
    this.PARENT_ALIQUOT = PARENT_ALIQUOT;
  }
  public SAMPLE with_PARENT_ALIQUOT(Integer PARENT_ALIQUOT) {
    this.PARENT_ALIQUOT = PARENT_ALIQUOT;
    return this;
  }
  private String ALIQUOT_GROUP;
  public String get_ALIQUOT_GROUP() {
    return ALIQUOT_GROUP;
  }
  public void set_ALIQUOT_GROUP(String ALIQUOT_GROUP) {
    this.ALIQUOT_GROUP = ALIQUOT_GROUP;
  }
  public SAMPLE with_ALIQUOT_GROUP(String ALIQUOT_GROUP) {
    this.ALIQUOT_GROUP = ALIQUOT_GROUP;
    return this;
  }
  private Float SAMPLE_VOLUME;
  public Float get_SAMPLE_VOLUME() {
    return SAMPLE_VOLUME;
  }
  public void set_SAMPLE_VOLUME(Float SAMPLE_VOLUME) {
    this.SAMPLE_VOLUME = SAMPLE_VOLUME;
  }
  public SAMPLE with_SAMPLE_VOLUME(Float SAMPLE_VOLUME) {
    this.SAMPLE_VOLUME = SAMPLE_VOLUME;
    return this;
  }
  private String SAMPLE_UNITS;
  public String get_SAMPLE_UNITS() {
    return SAMPLE_UNITS;
  }
  public void set_SAMPLE_UNITS(String SAMPLE_UNITS) {
    this.SAMPLE_UNITS = SAMPLE_UNITS;
  }
  public SAMPLE with_SAMPLE_UNITS(String SAMPLE_UNITS) {
    this.SAMPLE_UNITS = SAMPLE_UNITS;
    return this;
  }
  private java.sql.Timestamp LOGIN_DATE;
  public java.sql.Timestamp get_LOGIN_DATE() {
    return LOGIN_DATE;
  }
  public void set_LOGIN_DATE(java.sql.Timestamp LOGIN_DATE) {
    this.LOGIN_DATE = LOGIN_DATE;
  }
  public SAMPLE with_LOGIN_DATE(java.sql.Timestamp LOGIN_DATE) {
    this.LOGIN_DATE = LOGIN_DATE;
    return this;
  }
  private String LOGIN_BY;
  public String get_LOGIN_BY() {
    return LOGIN_BY;
  }
  public void set_LOGIN_BY(String LOGIN_BY) {
    this.LOGIN_BY = LOGIN_BY;
  }
  public SAMPLE with_LOGIN_BY(String LOGIN_BY) {
    this.LOGIN_BY = LOGIN_BY;
    return this;
  }
  private java.sql.Timestamp SAMPLED_DATE;
  public java.sql.Timestamp get_SAMPLED_DATE() {
    return SAMPLED_DATE;
  }
  public void set_SAMPLED_DATE(java.sql.Timestamp SAMPLED_DATE) {
    this.SAMPLED_DATE = SAMPLED_DATE;
  }
  public SAMPLE with_SAMPLED_DATE(java.sql.Timestamp SAMPLED_DATE) {
    this.SAMPLED_DATE = SAMPLED_DATE;
    return this;
  }
  private java.sql.Timestamp RECD_DATE;
  public java.sql.Timestamp get_RECD_DATE() {
    return RECD_DATE;
  }
  public void set_RECD_DATE(java.sql.Timestamp RECD_DATE) {
    this.RECD_DATE = RECD_DATE;
  }
  public SAMPLE with_RECD_DATE(java.sql.Timestamp RECD_DATE) {
    this.RECD_DATE = RECD_DATE;
    return this;
  }
  private String RECEIVED_BY;
  public String get_RECEIVED_BY() {
    return RECEIVED_BY;
  }
  public void set_RECEIVED_BY(String RECEIVED_BY) {
    this.RECEIVED_BY = RECEIVED_BY;
  }
  public SAMPLE with_RECEIVED_BY(String RECEIVED_BY) {
    this.RECEIVED_BY = RECEIVED_BY;
    return this;
  }
  private java.sql.Timestamp DATE_STARTED;
  public java.sql.Timestamp get_DATE_STARTED() {
    return DATE_STARTED;
  }
  public void set_DATE_STARTED(java.sql.Timestamp DATE_STARTED) {
    this.DATE_STARTED = DATE_STARTED;
  }
  public SAMPLE with_DATE_STARTED(java.sql.Timestamp DATE_STARTED) {
    this.DATE_STARTED = DATE_STARTED;
    return this;
  }
  private String STARTED;
  public String get_STARTED() {
    return STARTED;
  }
  public void set_STARTED(String STARTED) {
    this.STARTED = STARTED;
  }
  public SAMPLE with_STARTED(String STARTED) {
    this.STARTED = STARTED;
    return this;
  }
  private String ASSIGNED_OPERATOR;
  public String get_ASSIGNED_OPERATOR() {
    return ASSIGNED_OPERATOR;
  }
  public void set_ASSIGNED_OPERATOR(String ASSIGNED_OPERATOR) {
    this.ASSIGNED_OPERATOR = ASSIGNED_OPERATOR;
  }
  public SAMPLE with_ASSIGNED_OPERATOR(String ASSIGNED_OPERATOR) {
    this.ASSIGNED_OPERATOR = ASSIGNED_OPERATOR;
    return this;
  }
  private java.sql.Timestamp DUE_DATE;
  public java.sql.Timestamp get_DUE_DATE() {
    return DUE_DATE;
  }
  public void set_DUE_DATE(java.sql.Timestamp DUE_DATE) {
    this.DUE_DATE = DUE_DATE;
  }
  public SAMPLE with_DUE_DATE(java.sql.Timestamp DUE_DATE) {
    this.DUE_DATE = DUE_DATE;
    return this;
  }
  private java.sql.Timestamp DATE_COMPLETED;
  public java.sql.Timestamp get_DATE_COMPLETED() {
    return DATE_COMPLETED;
  }
  public void set_DATE_COMPLETED(java.sql.Timestamp DATE_COMPLETED) {
    this.DATE_COMPLETED = DATE_COMPLETED;
  }
  public SAMPLE with_DATE_COMPLETED(java.sql.Timestamp DATE_COMPLETED) {
    this.DATE_COMPLETED = DATE_COMPLETED;
    return this;
  }
  private java.sql.Timestamp DATE_REVIEWED;
  public java.sql.Timestamp get_DATE_REVIEWED() {
    return DATE_REVIEWED;
  }
  public void set_DATE_REVIEWED(java.sql.Timestamp DATE_REVIEWED) {
    this.DATE_REVIEWED = DATE_REVIEWED;
  }
  public SAMPLE with_DATE_REVIEWED(java.sql.Timestamp DATE_REVIEWED) {
    this.DATE_REVIEWED = DATE_REVIEWED;
    return this;
  }
  private String PREP;
  public String get_PREP() {
    return PREP;
  }
  public void set_PREP(String PREP) {
    this.PREP = PREP;
  }
  public SAMPLE with_PREP(String PREP) {
    this.PREP = PREP;
    return this;
  }
  private java.sql.Timestamp PREP_DATE;
  public java.sql.Timestamp get_PREP_DATE() {
    return PREP_DATE;
  }
  public void set_PREP_DATE(java.sql.Timestamp PREP_DATE) {
    this.PREP_DATE = PREP_DATE;
  }
  public SAMPLE with_PREP_DATE(java.sql.Timestamp PREP_DATE) {
    this.PREP_DATE = PREP_DATE;
    return this;
  }
  private String PREP_BY;
  public String get_PREP_BY() {
    return PREP_BY;
  }
  public void set_PREP_BY(String PREP_BY) {
    this.PREP_BY = PREP_BY;
  }
  public SAMPLE with_PREP_BY(String PREP_BY) {
    this.PREP_BY = PREP_BY;
    return this;
  }
  private String REVIEWER;
  public String get_REVIEWER() {
    return REVIEWER;
  }
  public void set_REVIEWER(String REVIEWER) {
    this.REVIEWER = REVIEWER;
  }
  public SAMPLE with_REVIEWER(String REVIEWER) {
    this.REVIEWER = REVIEWER;
    return this;
  }
  private String REVIEW_NOTE;
  public String get_REVIEW_NOTE() {
    return REVIEW_NOTE;
  }
  public void set_REVIEW_NOTE(String REVIEW_NOTE) {
    this.REVIEW_NOTE = REVIEW_NOTE;
  }
  public SAMPLE with_REVIEW_NOTE(String REVIEW_NOTE) {
    this.REVIEW_NOTE = REVIEW_NOTE;
    return this;
  }
  private String PRODUCT_CODE;
  public String get_PRODUCT_CODE() {
    return PRODUCT_CODE;
  }
  public void set_PRODUCT_CODE(String PRODUCT_CODE) {
    this.PRODUCT_CODE = PRODUCT_CODE;
  }
  public SAMPLE with_PRODUCT_CODE(String PRODUCT_CODE) {
    this.PRODUCT_CODE = PRODUCT_CODE;
    return this;
  }
  private String PRODUCT;
  public String get_PRODUCT() {
    return PRODUCT;
  }
  public void set_PRODUCT(String PRODUCT) {
    this.PRODUCT = PRODUCT;
  }
  public SAMPLE with_PRODUCT(String PRODUCT) {
    this.PRODUCT = PRODUCT;
    return this;
  }
  private Integer PRODUCT_VERSION;
  public Integer get_PRODUCT_VERSION() {
    return PRODUCT_VERSION;
  }
  public void set_PRODUCT_VERSION(Integer PRODUCT_VERSION) {
    this.PRODUCT_VERSION = PRODUCT_VERSION;
  }
  public SAMPLE with_PRODUCT_VERSION(Integer PRODUCT_VERSION) {
    this.PRODUCT_VERSION = PRODUCT_VERSION;
    return this;
  }
  private String PRODUCT_GRADE;
  public String get_PRODUCT_GRADE() {
    return PRODUCT_GRADE;
  }
  public void set_PRODUCT_GRADE(String PRODUCT_GRADE) {
    this.PRODUCT_GRADE = PRODUCT_GRADE;
  }
  public SAMPLE with_PRODUCT_GRADE(String PRODUCT_GRADE) {
    this.PRODUCT_GRADE = PRODUCT_GRADE;
    return this;
  }
  private String SAMPLING_POINT;
  public String get_SAMPLING_POINT() {
    return SAMPLING_POINT;
  }
  public void set_SAMPLING_POINT(String SAMPLING_POINT) {
    this.SAMPLING_POINT = SAMPLING_POINT;
  }
  public SAMPLE with_SAMPLING_POINT(String SAMPLING_POINT) {
    this.SAMPLING_POINT = SAMPLING_POINT;
    return this;
  }
  private String SAMPLE_TYPE;
  public String get_SAMPLE_TYPE() {
    return SAMPLE_TYPE;
  }
  public void set_SAMPLE_TYPE(String SAMPLE_TYPE) {
    this.SAMPLE_TYPE = SAMPLE_TYPE;
  }
  public SAMPLE with_SAMPLE_TYPE(String SAMPLE_TYPE) {
    this.SAMPLE_TYPE = SAMPLE_TYPE;
    return this;
  }
  private String PROJECT;
  public String get_PROJECT() {
    return PROJECT;
  }
  public void set_PROJECT(String PROJECT) {
    this.PROJECT = PROJECT;
  }
  public SAMPLE with_PROJECT(String PROJECT) {
    this.PROJECT = PROJECT;
    return this;
  }
  private String BATCH_NAME;
  public String get_BATCH_NAME() {
    return BATCH_NAME;
  }
  public void set_BATCH_NAME(String BATCH_NAME) {
    this.BATCH_NAME = BATCH_NAME;
  }
  public SAMPLE with_BATCH_NAME(String BATCH_NAME) {
    this.BATCH_NAME = BATCH_NAME;
    return this;
  }
  private String BATCH_TEMPLATE;
  public String get_BATCH_TEMPLATE() {
    return BATCH_TEMPLATE;
  }
  public void set_BATCH_TEMPLATE(String BATCH_TEMPLATE) {
    this.BATCH_TEMPLATE = BATCH_TEMPLATE;
  }
  public SAMPLE with_BATCH_TEMPLATE(String BATCH_TEMPLATE) {
    this.BATCH_TEMPLATE = BATCH_TEMPLATE;
    return this;
  }
  private String STEP;
  public String get_STEP() {
    return STEP;
  }
  public void set_STEP(String STEP) {
    this.STEP = STEP;
  }
  public SAMPLE with_STEP(String STEP) {
    this.STEP = STEP;
    return this;
  }
  private String SAMPLE_NAME;
  public String get_SAMPLE_NAME() {
    return SAMPLE_NAME;
  }
  public void set_SAMPLE_NAME(String SAMPLE_NAME) {
    this.SAMPLE_NAME = SAMPLE_NAME;
  }
  public SAMPLE with_SAMPLE_NAME(String SAMPLE_NAME) {
    this.SAMPLE_NAME = SAMPLE_NAME;
    return this;
  }
  private String DESCRIPTION;
  public String get_DESCRIPTION() {
    return DESCRIPTION;
  }
  public void set_DESCRIPTION(String DESCRIPTION) {
    this.DESCRIPTION = DESCRIPTION;
  }
  public SAMPLE with_DESCRIPTION(String DESCRIPTION) {
    this.DESCRIPTION = DESCRIPTION;
    return this;
  }
  private Integer PRIORITY;
  public Integer get_PRIORITY() {
    return PRIORITY;
  }
  public void set_PRIORITY(Integer PRIORITY) {
    this.PRIORITY = PRIORITY;
  }
  public SAMPLE with_PRIORITY(Integer PRIORITY) {
    this.PRIORITY = PRIORITY;
    return this;
  }
  private String LOCATION;
  public String get_LOCATION() {
    return LOCATION;
  }
  public void set_LOCATION(String LOCATION) {
    this.LOCATION = LOCATION;
  }
  public SAMPLE with_LOCATION(String LOCATION) {
    this.LOCATION = LOCATION;
    return this;
  }
  private String CUSTOMER;
  public String get_CUSTOMER() {
    return CUSTOMER;
  }
  public void set_CUSTOMER(String CUSTOMER) {
    this.CUSTOMER = CUSTOMER;
  }
  public SAMPLE with_CUSTOMER(String CUSTOMER) {
    this.CUSTOMER = CUSTOMER;
    return this;
  }
  private String TEST_LIST;
  public String get_TEST_LIST() {
    return TEST_LIST;
  }
  public void set_TEST_LIST(String TEST_LIST) {
    this.TEST_LIST = TEST_LIST;
  }
  public SAMPLE with_TEST_LIST(String TEST_LIST) {
    this.TEST_LIST = TEST_LIST;
    return this;
  }
  private String TEMPLATE;
  public String get_TEMPLATE() {
    return TEMPLATE;
  }
  public void set_TEMPLATE(String TEMPLATE) {
    this.TEMPLATE = TEMPLATE;
  }
  public SAMPLE with_TEMPLATE(String TEMPLATE) {
    this.TEMPLATE = TEMPLATE;
    return this;
  }
  private String RECIPIENT;
  public String get_RECIPIENT() {
    return RECIPIENT;
  }
  public void set_RECIPIENT(String RECIPIENT) {
    this.RECIPIENT = RECIPIENT;
  }
  public SAMPLE with_RECIPIENT(String RECIPIENT) {
    this.RECIPIENT = RECIPIENT;
    return this;
  }
  private String STANDARD;
  public String get_STANDARD() {
    return STANDARD;
  }
  public void set_STANDARD(String STANDARD) {
    this.STANDARD = STANDARD;
  }
  public SAMPLE with_STANDARD(String STANDARD) {
    this.STANDARD = STANDARD;
    return this;
  }
  private String EXT_LINK;
  public String get_EXT_LINK() {
    return EXT_LINK;
  }
  public void set_EXT_LINK(String EXT_LINK) {
    this.EXT_LINK = EXT_LINK;
  }
  public SAMPLE with_EXT_LINK(String EXT_LINK) {
    this.EXT_LINK = EXT_LINK;
    return this;
  }
  private String CONDITION;
  public String get_CONDITION() {
    return CONDITION;
  }
  public void set_CONDITION(String CONDITION) {
    this.CONDITION = CONDITION;
  }
  public SAMPLE with_CONDITION(String CONDITION) {
    this.CONDITION = CONDITION;
    return this;
  }
  private String TIMEPOINT;
  public String get_TIMEPOINT() {
    return TIMEPOINT;
  }
  public void set_TIMEPOINT(String TIMEPOINT) {
    this.TIMEPOINT = TIMEPOINT;
  }
  public SAMPLE with_TIMEPOINT(String TIMEPOINT) {
    this.TIMEPOINT = TIMEPOINT;
    return this;
  }
  private Integer LOT;
  public Integer get_LOT() {
    return LOT;
  }
  public void set_LOT(Integer LOT) {
    this.LOT = LOT;
  }
  public SAMPLE with_LOT(Integer LOT) {
    this.LOT = LOT;
    return this;
  }
  private java.sql.Timestamp BASE_DATE;
  public java.sql.Timestamp get_BASE_DATE() {
    return BASE_DATE;
  }
  public void set_BASE_DATE(java.sql.Timestamp BASE_DATE) {
    this.BASE_DATE = BASE_DATE;
  }
  public SAMPLE with_BASE_DATE(java.sql.Timestamp BASE_DATE) {
    this.BASE_DATE = BASE_DATE;
    return this;
  }
  private java.sql.Timestamp AVAILABLE_DATE;
  public java.sql.Timestamp get_AVAILABLE_DATE() {
    return AVAILABLE_DATE;
  }
  public void set_AVAILABLE_DATE(java.sql.Timestamp AVAILABLE_DATE) {
    this.AVAILABLE_DATE = AVAILABLE_DATE;
  }
  public SAMPLE with_AVAILABLE_DATE(java.sql.Timestamp AVAILABLE_DATE) {
    this.AVAILABLE_DATE = AVAILABLE_DATE;
    return this;
  }
  private java.sql.Timestamp REQUIRED_DATE;
  public java.sql.Timestamp get_REQUIRED_DATE() {
    return REQUIRED_DATE;
  }
  public void set_REQUIRED_DATE(java.sql.Timestamp REQUIRED_DATE) {
    this.REQUIRED_DATE = REQUIRED_DATE;
  }
  public SAMPLE with_REQUIRED_DATE(java.sql.Timestamp REQUIRED_DATE) {
    this.REQUIRED_DATE = REQUIRED_DATE;
    return this;
  }
  private java.sql.Timestamp TARGET_DATE;
  public java.sql.Timestamp get_TARGET_DATE() {
    return TARGET_DATE;
  }
  public void set_TARGET_DATE(java.sql.Timestamp TARGET_DATE) {
    this.TARGET_DATE = TARGET_DATE;
  }
  public SAMPLE with_TARGET_DATE(java.sql.Timestamp TARGET_DATE) {
    this.TARGET_DATE = TARGET_DATE;
    return this;
  }
  private String PARTIAL_SPEC;
  public String get_PARTIAL_SPEC() {
    return PARTIAL_SPEC;
  }
  public void set_PARTIAL_SPEC(String PARTIAL_SPEC) {
    this.PARTIAL_SPEC = PARTIAL_SPEC;
  }
  public SAMPLE with_PARTIAL_SPEC(String PARTIAL_SPEC) {
    this.PARTIAL_SPEC = PARTIAL_SPEC;
    return this;
  }
  private String SPEC_TYPE;
  public String get_SPEC_TYPE() {
    return SPEC_TYPE;
  }
  public void set_SPEC_TYPE(String SPEC_TYPE) {
    this.SPEC_TYPE = SPEC_TYPE;
  }
  public SAMPLE with_SPEC_TYPE(String SPEC_TYPE) {
    this.SPEC_TYPE = SPEC_TYPE;
    return this;
  }
  private String STAGE;
  public String get_STAGE() {
    return STAGE;
  }
  public void set_STAGE(String STAGE) {
    this.STAGE = STAGE;
  }
  public SAMPLE with_STAGE(String STAGE) {
    this.STAGE = STAGE;
    return this;
  }
  private String PRIMARY_IN_SPEC;
  public String get_PRIMARY_IN_SPEC() {
    return PRIMARY_IN_SPEC;
  }
  public void set_PRIMARY_IN_SPEC(String PRIMARY_IN_SPEC) {
    this.PRIMARY_IN_SPEC = PRIMARY_IN_SPEC;
  }
  public SAMPLE with_PRIMARY_IN_SPEC(String PRIMARY_IN_SPEC) {
    this.PRIMARY_IN_SPEC = PRIMARY_IN_SPEC;
    return this;
  }
  private String BATCH;
  public String get_BATCH() {
    return BATCH;
  }
  public void set_BATCH(String BATCH) {
    this.BATCH = BATCH;
  }
  public SAMPLE with_BATCH(String BATCH) {
    this.BATCH = BATCH;
    return this;
  }
  private String CHARGE_CODE;
  public String get_CHARGE_CODE() {
    return CHARGE_CODE;
  }
  public void set_CHARGE_CODE(String CHARGE_CODE) {
    this.CHARGE_CODE = CHARGE_CODE;
  }
  public SAMPLE with_CHARGE_CODE(String CHARGE_CODE) {
    this.CHARGE_CODE = CHARGE_CODE;
    return this;
  }
  private String FORMULATION;
  public String get_FORMULATION() {
    return FORMULATION;
  }
  public void set_FORMULATION(String FORMULATION) {
    this.FORMULATION = FORMULATION;
  }
  public SAMPLE with_FORMULATION(String FORMULATION) {
    this.FORMULATION = FORMULATION;
    return this;
  }
  private String PROTOCOL_LEVEL;
  public String get_PROTOCOL_LEVEL() {
    return PROTOCOL_LEVEL;
  }
  public void set_PROTOCOL_LEVEL(String PROTOCOL_LEVEL) {
    this.PROTOCOL_LEVEL = PROTOCOL_LEVEL;
  }
  public SAMPLE with_PROTOCOL_LEVEL(String PROTOCOL_LEVEL) {
    this.PROTOCOL_LEVEL = PROTOCOL_LEVEL;
    return this;
  }
  private String RELEASED;
  public String get_RELEASED() {
    return RELEASED;
  }
  public void set_RELEASED(String RELEASED) {
    this.RELEASED = RELEASED;
  }
  public SAMPLE with_RELEASED(String RELEASED) {
    this.RELEASED = RELEASED;
    return this;
  }
  private String RELEASED_BY;
  public String get_RELEASED_BY() {
    return RELEASED_BY;
  }
  public void set_RELEASED_BY(String RELEASED_BY) {
    this.RELEASED_BY = RELEASED_BY;
  }
  public SAMPLE with_RELEASED_BY(String RELEASED_BY) {
    this.RELEASED_BY = RELEASED_BY;
    return this;
  }
  private java.sql.Timestamp RELEASED_ON;
  public java.sql.Timestamp get_RELEASED_ON() {
    return RELEASED_ON;
  }
  public void set_RELEASED_ON(java.sql.Timestamp RELEASED_ON) {
    this.RELEASED_ON = RELEASED_ON;
  }
  public SAMPLE with_RELEASED_ON(java.sql.Timestamp RELEASED_ON) {
    this.RELEASED_ON = RELEASED_ON;
    return this;
  }
  private String IN_CONTROL;
  public String get_IN_CONTROL() {
    return IN_CONTROL;
  }
  public void set_IN_CONTROL(String IN_CONTROL) {
    this.IN_CONTROL = IN_CONTROL;
  }
  public SAMPLE with_IN_CONTROL(String IN_CONTROL) {
    this.IN_CONTROL = IN_CONTROL;
    return this;
  }
  private String INVESTIGATION;
  public String get_INVESTIGATION() {
    return INVESTIGATION;
  }
  public void set_INVESTIGATION(String INVESTIGATION) {
    this.INVESTIGATION = INVESTIGATION;
  }
  public SAMPLE with_INVESTIGATION(String INVESTIGATION) {
    this.INVESTIGATION = INVESTIGATION;
    return this;
  }
  private String INVESTIGATED;
  public String get_INVESTIGATED() {
    return INVESTIGATED;
  }
  public void set_INVESTIGATED(String INVESTIGATED) {
    this.INVESTIGATED = INVESTIGATED;
  }
  public SAMPLE with_INVESTIGATED(String INVESTIGATED) {
    this.INVESTIGATED = INVESTIGATED;
    return this;
  }
  private String APPROVED;
  public String get_APPROVED() {
    return APPROVED;
  }
  public void set_APPROVED(String APPROVED) {
    this.APPROVED = APPROVED;
  }
  public SAMPLE with_APPROVED(String APPROVED) {
    this.APPROVED = APPROVED;
    return this;
  }
  private String APPROVAL_GROUP;
  public String get_APPROVAL_GROUP() {
    return APPROVAL_GROUP;
  }
  public void set_APPROVAL_GROUP(String APPROVAL_GROUP) {
    this.APPROVAL_GROUP = APPROVAL_GROUP;
  }
  public SAMPLE with_APPROVAL_GROUP(String APPROVAL_GROUP) {
    this.APPROVAL_GROUP = APPROVAL_GROUP;
    return this;
  }
  private String READY_FOR_APPROVAL;
  public String get_READY_FOR_APPROVAL() {
    return READY_FOR_APPROVAL;
  }
  public void set_READY_FOR_APPROVAL(String READY_FOR_APPROVAL) {
    this.READY_FOR_APPROVAL = READY_FOR_APPROVAL;
  }
  public SAMPLE with_READY_FOR_APPROVAL(String READY_FOR_APPROVAL) {
    this.READY_FOR_APPROVAL = READY_FOR_APPROVAL;
    return this;
  }
  private Integer APPROVAL_ID;
  public Integer get_APPROVAL_ID() {
    return APPROVAL_ID;
  }
  public void set_APPROVAL_ID(Integer APPROVAL_ID) {
    this.APPROVAL_ID = APPROVAL_ID;
  }
  public SAMPLE with_APPROVAL_ID(Integer APPROVAL_ID) {
    this.APPROVAL_ID = APPROVAL_ID;
    return this;
  }
  private String APPROVAL_ROUTING;
  public String get_APPROVAL_ROUTING() {
    return APPROVAL_ROUTING;
  }
  public void set_APPROVAL_ROUTING(String APPROVAL_ROUTING) {
    this.APPROVAL_ROUTING = APPROVAL_ROUTING;
  }
  public SAMPLE with_APPROVAL_ROUTING(String APPROVAL_ROUTING) {
    this.APPROVAL_ROUTING = APPROVAL_ROUTING;
    return this;
  }
  private String MODIFIED_RESULTS;
  public String get_MODIFIED_RESULTS() {
    return MODIFIED_RESULTS;
  }
  public void set_MODIFIED_RESULTS(String MODIFIED_RESULTS) {
    this.MODIFIED_RESULTS = MODIFIED_RESULTS;
  }
  public SAMPLE with_MODIFIED_RESULTS(String MODIFIED_RESULTS) {
    this.MODIFIED_RESULTS = MODIFIED_RESULTS;
    return this;
  }
  private Integer REPORT_NUMBER;
  public Integer get_REPORT_NUMBER() {
    return REPORT_NUMBER;
  }
  public void set_REPORT_NUMBER(Integer REPORT_NUMBER) {
    this.REPORT_NUMBER = REPORT_NUMBER;
  }
  public SAMPLE with_REPORT_NUMBER(Integer REPORT_NUMBER) {
    this.REPORT_NUMBER = REPORT_NUMBER;
    return this;
  }
  private String COMPOSITE;
  public String get_COMPOSITE() {
    return COMPOSITE;
  }
  public void set_COMPOSITE(String COMPOSITE) {
    this.COMPOSITE = COMPOSITE;
  }
  public SAMPLE with_COMPOSITE(String COMPOSITE) {
    this.COMPOSITE = COMPOSITE;
    return this;
  }
  private Integer PARENT_COMPOSITE;
  public Integer get_PARENT_COMPOSITE() {
    return PARENT_COMPOSITE;
  }
  public void set_PARENT_COMPOSITE(Integer PARENT_COMPOSITE) {
    this.PARENT_COMPOSITE = PARENT_COMPOSITE;
  }
  public SAMPLE with_PARENT_COMPOSITE(Integer PARENT_COMPOSITE) {
    this.PARENT_COMPOSITE = PARENT_COMPOSITE;
    return this;
  }
  private String COMPOSITE_TEMPLATE;
  public String get_COMPOSITE_TEMPLATE() {
    return COMPOSITE_TEMPLATE;
  }
  public void set_COMPOSITE_TEMPLATE(String COMPOSITE_TEMPLATE) {
    this.COMPOSITE_TEMPLATE = COMPOSITE_TEMPLATE;
  }
  public SAMPLE with_COMPOSITE_TEMPLATE(String COMPOSITE_TEMPLATE) {
    this.COMPOSITE_TEMPLATE = COMPOSITE_TEMPLATE;
    return this;
  }
  private java.sql.Timestamp SEASON_DATE;
  public java.sql.Timestamp get_SEASON_DATE() {
    return SEASON_DATE;
  }
  public void set_SEASON_DATE(java.sql.Timestamp SEASON_DATE) {
    this.SEASON_DATE = SEASON_DATE;
  }
  public SAMPLE with_SEASON_DATE(java.sql.Timestamp SEASON_DATE) {
    this.SEASON_DATE = SEASON_DATE;
    return this;
  }
  private Integer PEOPLE;
  public Integer get_PEOPLE() {
    return PEOPLE;
  }
  public void set_PEOPLE(Integer PEOPLE) {
    this.PEOPLE = PEOPLE;
  }
  public SAMPLE with_PEOPLE(Integer PEOPLE) {
    this.PEOPLE = PEOPLE;
    return this;
  }
  private String TEST_LOCATION;
  public String get_TEST_LOCATION() {
    return TEST_LOCATION;
  }
  public void set_TEST_LOCATION(String TEST_LOCATION) {
    this.TEST_LOCATION = TEST_LOCATION;
  }
  public SAMPLE with_TEST_LOCATION(String TEST_LOCATION) {
    this.TEST_LOCATION = TEST_LOCATION;
    return this;
  }
  private String OWNER_LOCATION;
  public String get_OWNER_LOCATION() {
    return OWNER_LOCATION;
  }
  public void set_OWNER_LOCATION(String OWNER_LOCATION) {
    this.OWNER_LOCATION = OWNER_LOCATION;
  }
  public SAMPLE with_OWNER_LOCATION(String OWNER_LOCATION) {
    this.OWNER_LOCATION = OWNER_LOCATION;
    return this;
  }
  private String CHK_ALIQUOT_STATUS;
  public String get_CHK_ALIQUOT_STATUS() {
    return CHK_ALIQUOT_STATUS;
  }
  public void set_CHK_ALIQUOT_STATUS(String CHK_ALIQUOT_STATUS) {
    this.CHK_ALIQUOT_STATUS = CHK_ALIQUOT_STATUS;
  }
  public SAMPLE with_CHK_ALIQUOT_STATUS(String CHK_ALIQUOT_STATUS) {
    this.CHK_ALIQUOT_STATUS = CHK_ALIQUOT_STATUS;
    return this;
  }
  private String CHK_ALIQUOT_SPECS;
  public String get_CHK_ALIQUOT_SPECS() {
    return CHK_ALIQUOT_SPECS;
  }
  public void set_CHK_ALIQUOT_SPECS(String CHK_ALIQUOT_SPECS) {
    this.CHK_ALIQUOT_SPECS = CHK_ALIQUOT_SPECS;
  }
  public SAMPLE with_CHK_ALIQUOT_SPECS(String CHK_ALIQUOT_SPECS) {
    this.CHK_ALIQUOT_SPECS = CHK_ALIQUOT_SPECS;
    return this;
  }
  private String ALIQUOT_TEMPLATE;
  public String get_ALIQUOT_TEMPLATE() {
    return ALIQUOT_TEMPLATE;
  }
  public void set_ALIQUOT_TEMPLATE(String ALIQUOT_TEMPLATE) {
    this.ALIQUOT_TEMPLATE = ALIQUOT_TEMPLATE;
  }
  public SAMPLE with_ALIQUOT_TEMPLATE(String ALIQUOT_TEMPLATE) {
    this.ALIQUOT_TEMPLATE = ALIQUOT_TEMPLATE;
    return this;
  }
  private String CALC_GROUP;
  public String get_CALC_GROUP() {
    return CALC_GROUP;
  }
  public void set_CALC_GROUP(String CALC_GROUP) {
    this.CALC_GROUP = CALC_GROUP;
  }
  public SAMPLE with_CALC_GROUP(String CALC_GROUP) {
    this.CALC_GROUP = CALC_GROUP;
    return this;
  }
  private Integer SAMPLE_EVENT;
  public Integer get_SAMPLE_EVENT() {
    return SAMPLE_EVENT;
  }
  public void set_SAMPLE_EVENT(Integer SAMPLE_EVENT) {
    this.SAMPLE_EVENT = SAMPLE_EVENT;
  }
  public SAMPLE with_SAMPLE_EVENT(Integer SAMPLE_EVENT) {
    this.SAMPLE_EVENT = SAMPLE_EVENT;
    return this;
  }
  private String LABEL_ID;
  public String get_LABEL_ID() {
    return LABEL_ID;
  }
  public void set_LABEL_ID(String LABEL_ID) {
    this.LABEL_ID = LABEL_ID;
  }
  public SAMPLE with_LABEL_ID(String LABEL_ID) {
    this.LABEL_ID = LABEL_ID;
    return this;
  }
  private String HAS_FLAGS;
  public String get_HAS_FLAGS() {
    return HAS_FLAGS;
  }
  public void set_HAS_FLAGS(String HAS_FLAGS) {
    this.HAS_FLAGS = HAS_FLAGS;
  }
  public SAMPLE with_HAS_FLAGS(String HAS_FLAGS) {
    this.HAS_FLAGS = HAS_FLAGS;
    return this;
  }
  private String VARIATION;
  public String get_VARIATION() {
    return VARIATION;
  }
  public void set_VARIATION(String VARIATION) {
    this.VARIATION = VARIATION;
  }
  public SAMPLE with_VARIATION(String VARIATION) {
    this.VARIATION = VARIATION;
    return this;
  }
  private String SAMPLED_BY;
  public String get_SAMPLED_BY() {
    return SAMPLED_BY;
  }
  public void set_SAMPLED_BY(String SAMPLED_BY) {
    this.SAMPLED_BY = SAMPLED_BY;
  }
  public SAMPLE with_SAMPLED_BY(String SAMPLED_BY) {
    this.SAMPLED_BY = SAMPLED_BY;
    return this;
  }
  private String SAMPLED;
  public String get_SAMPLED() {
    return SAMPLED;
  }
  public void set_SAMPLED(String SAMPLED) {
    this.SAMPLED = SAMPLED;
  }
  public SAMPLE with_SAMPLED(String SAMPLED) {
    this.SAMPLED = SAMPLED;
    return this;
  }
  private String ORDER_NUM;
  public String get_ORDER_NUM() {
    return ORDER_NUM;
  }
  public void set_ORDER_NUM(String ORDER_NUM) {
    this.ORDER_NUM = ORDER_NUM;
  }
  public SAMPLE with_ORDER_NUM(String ORDER_NUM) {
    this.ORDER_NUM = ORDER_NUM;
    return this;
  }
  private String LAST_ORDER_NUM;
  public String get_LAST_ORDER_NUM() {
    return LAST_ORDER_NUM;
  }
  public void set_LAST_ORDER_NUM(String LAST_ORDER_NUM) {
    this.LAST_ORDER_NUM = LAST_ORDER_NUM;
  }
  public SAMPLE with_LAST_ORDER_NUM(String LAST_ORDER_NUM) {
    this.LAST_ORDER_NUM = LAST_ORDER_NUM;
    return this;
  }
  private String STORAGE_CONDITION;
  public String get_STORAGE_CONDITION() {
    return STORAGE_CONDITION;
  }
  public void set_STORAGE_CONDITION(String STORAGE_CONDITION) {
    this.STORAGE_CONDITION = STORAGE_CONDITION;
  }
  public SAMPLE with_STORAGE_CONDITION(String STORAGE_CONDITION) {
    this.STORAGE_CONDITION = STORAGE_CONDITION;
    return this;
  }
  private String CONTAINER_TYPE;
  public String get_CONTAINER_TYPE() {
    return CONTAINER_TYPE;
  }
  public void set_CONTAINER_TYPE(String CONTAINER_TYPE) {
    this.CONTAINER_TYPE = CONTAINER_TYPE;
  }
  public SAMPLE with_CONTAINER_TYPE(String CONTAINER_TYPE) {
    this.CONTAINER_TYPE = CONTAINER_TYPE;
    return this;
  }
  private Integer NUM_CONTAINERS;
  public Integer get_NUM_CONTAINERS() {
    return NUM_CONTAINERS;
  }
  public void set_NUM_CONTAINERS(Integer NUM_CONTAINERS) {
    this.NUM_CONTAINERS = NUM_CONTAINERS;
  }
  public SAMPLE with_NUM_CONTAINERS(Integer NUM_CONTAINERS) {
    this.NUM_CONTAINERS = NUM_CONTAINERS;
    return this;
  }
  private String IMPORTANT_MESSAGE;
  public String get_IMPORTANT_MESSAGE() {
    return IMPORTANT_MESSAGE;
  }
  public void set_IMPORTANT_MESSAGE(String IMPORTANT_MESSAGE) {
    this.IMPORTANT_MESSAGE = IMPORTANT_MESSAGE;
  }
  public SAMPLE with_IMPORTANT_MESSAGE(String IMPORTANT_MESSAGE) {
    this.IMPORTANT_MESSAGE = IMPORTANT_MESSAGE;
    return this;
  }
  private String OBSERVATIONS;
  public String get_OBSERVATIONS() {
    return OBSERVATIONS;
  }
  public void set_OBSERVATIONS(String OBSERVATIONS) {
    this.OBSERVATIONS = OBSERVATIONS;
  }
  public SAMPLE with_OBSERVATIONS(String OBSERVATIONS) {
    this.OBSERVATIONS = OBSERVATIONS;
    return this;
  }
  private String LAB;
  public String get_LAB() {
    return LAB;
  }
  public void set_LAB(String LAB) {
    this.LAB = LAB;
  }
  public SAMPLE with_LAB(String LAB) {
    this.LAB = LAB;
    return this;
  }
  private java.sql.Timestamp EXPIRATION_DATE;
  public java.sql.Timestamp get_EXPIRATION_DATE() {
    return EXPIRATION_DATE;
  }
  public void set_EXPIRATION_DATE(java.sql.Timestamp EXPIRATION_DATE) {
    this.EXPIRATION_DATE = EXPIRATION_DATE;
  }
  public SAMPLE with_EXPIRATION_DATE(java.sql.Timestamp EXPIRATION_DATE) {
    this.EXPIRATION_DATE = EXPIRATION_DATE;
    return this;
  }
  private Float REQD_VOLUME;
  public Float get_REQD_VOLUME() {
    return REQD_VOLUME;
  }
  public void set_REQD_VOLUME(Float REQD_VOLUME) {
    this.REQD_VOLUME = REQD_VOLUME;
  }
  public SAMPLE with_REQD_VOLUME(Float REQD_VOLUME) {
    this.REQD_VOLUME = REQD_VOLUME;
    return this;
  }
  private String COLLECTION_METHOD;
  public String get_COLLECTION_METHOD() {
    return COLLECTION_METHOD;
  }
  public void set_COLLECTION_METHOD(String COLLECTION_METHOD) {
    this.COLLECTION_METHOD = COLLECTION_METHOD;
  }
  public SAMPLE with_COLLECTION_METHOD(String COLLECTION_METHOD) {
    this.COLLECTION_METHOD = COLLECTION_METHOD;
    return this;
  }
  private Integer COLLECTION_OFFSET;
  public Integer get_COLLECTION_OFFSET() {
    return COLLECTION_OFFSET;
  }
  public void set_COLLECTION_OFFSET(Integer COLLECTION_OFFSET) {
    this.COLLECTION_OFFSET = COLLECTION_OFFSET;
  }
  public SAMPLE with_COLLECTION_OFFSET(Integer COLLECTION_OFFSET) {
    this.COLLECTION_OFFSET = COLLECTION_OFFSET;
    return this;
  }
  private String SIGNED;
  public String get_SIGNED() {
    return SIGNED;
  }
  public void set_SIGNED(String SIGNED) {
    this.SIGNED = SIGNED;
  }
  public SAMPLE with_SIGNED(String SIGNED) {
    this.SIGNED = SIGNED;
    return this;
  }
  private String CASE_NAME;
  public String get_CASE_NAME() {
    return CASE_NAME;
  }
  public void set_CASE_NAME(String CASE_NAME) {
    this.CASE_NAME = CASE_NAME;
  }
  public SAMPLE with_CASE_NAME(String CASE_NAME) {
    this.CASE_NAME = CASE_NAME;
    return this;
  }
  private Integer CONTRACT_NUMBER;
  public Integer get_CONTRACT_NUMBER() {
    return CONTRACT_NUMBER;
  }
  public void set_CONTRACT_NUMBER(Integer CONTRACT_NUMBER) {
    this.CONTRACT_NUMBER = CONTRACT_NUMBER;
  }
  public SAMPLE with_CONTRACT_NUMBER(Integer CONTRACT_NUMBER) {
    this.CONTRACT_NUMBER = CONTRACT_NUMBER;
    return this;
  }
  private String BILLING_ITEM_DESC;
  public String get_BILLING_ITEM_DESC() {
    return BILLING_ITEM_DESC;
  }
  public void set_BILLING_ITEM_DESC(String BILLING_ITEM_DESC) {
    this.BILLING_ITEM_DESC = BILLING_ITEM_DESC;
  }
  public SAMPLE with_BILLING_ITEM_DESC(String BILLING_ITEM_DESC) {
    this.BILLING_ITEM_DESC = BILLING_ITEM_DESC;
    return this;
  }
  private String INTERPRETED;
  public String get_INTERPRETED() {
    return INTERPRETED;
  }
  public void set_INTERPRETED(String INTERPRETED) {
    this.INTERPRETED = INTERPRETED;
  }
  public SAMPLE with_INTERPRETED(String INTERPRETED) {
    this.INTERPRETED = INTERPRETED;
    return this;
  }
  private String INTERP_TYPE;
  public String get_INTERP_TYPE() {
    return INTERP_TYPE;
  }
  public void set_INTERP_TYPE(String INTERP_TYPE) {
    this.INTERP_TYPE = INTERP_TYPE;
  }
  public SAMPLE with_INTERP_TYPE(String INTERP_TYPE) {
    this.INTERP_TYPE = INTERP_TYPE;
    return this;
  }
  private Integer INSPECT_PNT_NUM;
  public Integer get_INSPECT_PNT_NUM() {
    return INSPECT_PNT_NUM;
  }
  public void set_INSPECT_PNT_NUM(Integer INSPECT_PNT_NUM) {
    this.INSPECT_PNT_NUM = INSPECT_PNT_NUM;
  }
  public SAMPLE with_INSPECT_PNT_NUM(Integer INSPECT_PNT_NUM) {
    this.INSPECT_PNT_NUM = INSPECT_PNT_NUM;
    return this;
  }
  private String INSPECTION_LOT_NUM;
  public String get_INSPECTION_LOT_NUM() {
    return INSPECTION_LOT_NUM;
  }
  public void set_INSPECTION_LOT_NUM(String INSPECTION_LOT_NUM) {
    this.INSPECTION_LOT_NUM = INSPECTION_LOT_NUM;
  }
  public SAMPLE with_INSPECTION_LOT_NUM(String INSPECTION_LOT_NUM) {
    this.INSPECTION_LOT_NUM = INSPECTION_LOT_NUM;
    return this;
  }
  private String IS_INSPECT_PNT;
  public String get_IS_INSPECT_PNT() {
    return IS_INSPECT_PNT;
  }
  public void set_IS_INSPECT_PNT(String IS_INSPECT_PNT) {
    this.IS_INSPECT_PNT = IS_INSPECT_PNT;
  }
  public SAMPLE with_IS_INSPECT_PNT(String IS_INSPECT_PNT) {
    this.IS_INSPECT_PNT = IS_INSPECT_PNT;
    return this;
  }
  private String PLANT;
  public String get_PLANT() {
    return PLANT;
  }
  public void set_PLANT(String PLANT) {
    this.PLANT = PLANT;
  }
  public SAMPLE with_PLANT(String PLANT) {
    this.PLANT = PLANT;
    return this;
  }
  private String USERC1_VALUE;
  public String get_USERC1_VALUE() {
    return USERC1_VALUE;
  }
  public void set_USERC1_VALUE(String USERC1_VALUE) {
    this.USERC1_VALUE = USERC1_VALUE;
  }
  public SAMPLE with_USERC1_VALUE(String USERC1_VALUE) {
    this.USERC1_VALUE = USERC1_VALUE;
    return this;
  }
  private String USERC2_VALUE;
  public String get_USERC2_VALUE() {
    return USERC2_VALUE;
  }
  public void set_USERC2_VALUE(String USERC2_VALUE) {
    this.USERC2_VALUE = USERC2_VALUE;
  }
  public SAMPLE with_USERC2_VALUE(String USERC2_VALUE) {
    this.USERC2_VALUE = USERC2_VALUE;
    return this;
  }
  private String USERD1_VALUE;
  public String get_USERD1_VALUE() {
    return USERD1_VALUE;
  }
  public void set_USERD1_VALUE(String USERD1_VALUE) {
    this.USERD1_VALUE = USERD1_VALUE;
  }
  public SAMPLE with_USERD1_VALUE(String USERD1_VALUE) {
    this.USERD1_VALUE = USERD1_VALUE;
    return this;
  }
  private String USERN1_VALUE;
  public String get_USERN1_VALUE() {
    return USERN1_VALUE;
  }
  public void set_USERN1_VALUE(String USERN1_VALUE) {
    this.USERN1_VALUE = USERN1_VALUE;
  }
  public SAMPLE with_USERN1_VALUE(String USERN1_VALUE) {
    this.USERN1_VALUE = USERN1_VALUE;
    return this;
  }
  private String USERN2_VALUE;
  public String get_USERN2_VALUE() {
    return USERN2_VALUE;
  }
  public void set_USERN2_VALUE(String USERN2_VALUE) {
    this.USERN2_VALUE = USERN2_VALUE;
  }
  public SAMPLE with_USERN2_VALUE(String USERN2_VALUE) {
    this.USERN2_VALUE = USERN2_VALUE;
    return this;
  }
  private String USERT1_VALUE;
  public String get_USERT1_VALUE() {
    return USERT1_VALUE;
  }
  public void set_USERT1_VALUE(String USERT1_VALUE) {
    this.USERT1_VALUE = USERT1_VALUE;
  }
  public SAMPLE with_USERT1_VALUE(String USERT1_VALUE) {
    this.USERT1_VALUE = USERT1_VALUE;
    return this;
  }
  private String SAP_SELECTED_SET;
  public String get_SAP_SELECTED_SET() {
    return SAP_SELECTED_SET;
  }
  public void set_SAP_SELECTED_SET(String SAP_SELECTED_SET) {
    this.SAP_SELECTED_SET = SAP_SELECTED_SET;
  }
  public SAMPLE with_SAP_SELECTED_SET(String SAP_SELECTED_SET) {
    this.SAP_SELECTED_SET = SAP_SELECTED_SET;
    return this;
  }
  private String SAP_CODE_GROUP;
  public String get_SAP_CODE_GROUP() {
    return SAP_CODE_GROUP;
  }
  public void set_SAP_CODE_GROUP(String SAP_CODE_GROUP) {
    this.SAP_CODE_GROUP = SAP_CODE_GROUP;
  }
  public SAMPLE with_SAP_CODE_GROUP(String SAP_CODE_GROUP) {
    this.SAP_CODE_GROUP = SAP_CODE_GROUP;
    return this;
  }
  private String SAP_SAMPLE_NUMBER;
  public String get_SAP_SAMPLE_NUMBER() {
    return SAP_SAMPLE_NUMBER;
  }
  public void set_SAP_SAMPLE_NUMBER(String SAP_SAMPLE_NUMBER) {
    this.SAP_SAMPLE_NUMBER = SAP_SAMPLE_NUMBER;
  }
  public SAMPLE with_SAP_SAMPLE_NUMBER(String SAP_SAMPLE_NUMBER) {
    this.SAP_SAMPLE_NUMBER = SAP_SAMPLE_NUMBER;
    return this;
  }
  private String SAP_SS_PLANT;
  public String get_SAP_SS_PLANT() {
    return SAP_SS_PLANT;
  }
  public void set_SAP_SS_PLANT(String SAP_SS_PLANT) {
    this.SAP_SS_PLANT = SAP_SS_PLANT;
  }
  public SAMPLE with_SAP_SS_PLANT(String SAP_SS_PLANT) {
    this.SAP_SS_PLANT = SAP_SS_PLANT;
    return this;
  }
  private String SAP_SAMPLE_COUNT;
  public String get_SAP_SAMPLE_COUNT() {
    return SAP_SAMPLE_COUNT;
  }
  public void set_SAP_SAMPLE_COUNT(String SAP_SAMPLE_COUNT) {
    this.SAP_SAMPLE_COUNT = SAP_SAMPLE_COUNT;
  }
  public SAMPLE with_SAP_SAMPLE_COUNT(String SAP_SAMPLE_COUNT) {
    this.SAP_SAMPLE_COUNT = SAP_SAMPLE_COUNT;
    return this;
  }
  private String OPERATION_NUMBER;
  public String get_OPERATION_NUMBER() {
    return OPERATION_NUMBER;
  }
  public void set_OPERATION_NUMBER(String OPERATION_NUMBER) {
    this.OPERATION_NUMBER = OPERATION_NUMBER;
  }
  public SAMPLE with_OPERATION_NUMBER(String OPERATION_NUMBER) {
    this.OPERATION_NUMBER = OPERATION_NUMBER;
    return this;
  }
  private Integer STORAGE_LOC_NO;
  public Integer get_STORAGE_LOC_NO() {
    return STORAGE_LOC_NO;
  }
  public void set_STORAGE_LOC_NO(Integer STORAGE_LOC_NO) {
    this.STORAGE_LOC_NO = STORAGE_LOC_NO;
  }
  public SAMPLE with_STORAGE_LOC_NO(Integer STORAGE_LOC_NO) {
    this.STORAGE_LOC_NO = STORAGE_LOC_NO;
    return this;
  }
  private String EXTERNAL_LOCATION;
  public String get_EXTERNAL_LOCATION() {
    return EXTERNAL_LOCATION;
  }
  public void set_EXTERNAL_LOCATION(String EXTERNAL_LOCATION) {
    this.EXTERNAL_LOCATION = EXTERNAL_LOCATION;
  }
  public SAMPLE with_EXTERNAL_LOCATION(String EXTERNAL_LOCATION) {
    this.EXTERNAL_LOCATION = EXTERNAL_LOCATION;
    return this;
  }
  private String FORMULATION_NAME;
  public String get_FORMULATION_NAME() {
    return FORMULATION_NAME;
  }
  public void set_FORMULATION_NAME(String FORMULATION_NAME) {
    this.FORMULATION_NAME = FORMULATION_NAME;
  }
  public SAMPLE with_FORMULATION_NAME(String FORMULATION_NAME) {
    this.FORMULATION_NAME = FORMULATION_NAME;
    return this;
  }
  private String STANDARD_REAGENT;
  public String get_STANDARD_REAGENT() {
    return STANDARD_REAGENT;
  }
  public void set_STANDARD_REAGENT(String STANDARD_REAGENT) {
    this.STANDARD_REAGENT = STANDARD_REAGENT;
  }
  public SAMPLE with_STANDARD_REAGENT(String STANDARD_REAGENT) {
    this.STANDARD_REAGENT = STANDARD_REAGENT;
    return this;
  }
  private String CONVERSION_GROUPS;
  public String get_CONVERSION_GROUPS() {
    return CONVERSION_GROUPS;
  }
  public void set_CONVERSION_GROUPS(String CONVERSION_GROUPS) {
    this.CONVERSION_GROUPS = CONVERSION_GROUPS;
  }
  public SAMPLE with_CONVERSION_GROUPS(String CONVERSION_GROUPS) {
    this.CONVERSION_GROUPS = CONVERSION_GROUPS;
    return this;
  }
  private String REPORTED_RSLT_OOS;
  public String get_REPORTED_RSLT_OOS() {
    return REPORTED_RSLT_OOS;
  }
  public void set_REPORTED_RSLT_OOS(String REPORTED_RSLT_OOS) {
    this.REPORTED_RSLT_OOS = REPORTED_RSLT_OOS;
  }
  public SAMPLE with_REPORTED_RSLT_OOS(String REPORTED_RSLT_OOS) {
    this.REPORTED_RSLT_OOS = REPORTED_RSLT_OOS;
    return this;
  }
  private String GROUP_NAME;
  public String get_GROUP_NAME() {
    return GROUP_NAME;
  }
  public void set_GROUP_NAME(String GROUP_NAME) {
    this.GROUP_NAME = GROUP_NAME;
  }
  public SAMPLE with_GROUP_NAME(String GROUP_NAME) {
    this.GROUP_NAME = GROUP_NAME;
    return this;
  }
  private String PROCESS_UNIT;
  public String get_PROCESS_UNIT() {
    return PROCESS_UNIT;
  }
  public void set_PROCESS_UNIT(String PROCESS_UNIT) {
    this.PROCESS_UNIT = PROCESS_UNIT;
  }
  public SAMPLE with_PROCESS_UNIT(String PROCESS_UNIT) {
    this.PROCESS_UNIT = PROCESS_UNIT;
    return this;
  }
  private String HAZARD;
  public String get_HAZARD() {
    return HAZARD;
  }
  public void set_HAZARD(String HAZARD) {
    this.HAZARD = HAZARD;
  }
  public SAMPLE with_HAZARD(String HAZARD) {
    this.HAZARD = HAZARD;
    return this;
  }
  private String INSTRUMENT;
  public String get_INSTRUMENT() {
    return INSTRUMENT;
  }
  public void set_INSTRUMENT(String INSTRUMENT) {
    this.INSTRUMENT = INSTRUMENT;
  }
  public SAMPLE with_INSTRUMENT(String INSTRUMENT) {
    this.INSTRUMENT = INSTRUMENT;
    return this;
  }
  private String T_SITE;
  public String get_T_SITE() {
    return T_SITE;
  }
  public void set_T_SITE(String T_SITE) {
    this.T_SITE = T_SITE;
  }
  public SAMPLE with_T_SITE(String T_SITE) {
    this.T_SITE = T_SITE;
    return this;
  }
  private String T_PLANT;
  public String get_T_PLANT() {
    return T_PLANT;
  }
  public void set_T_PLANT(String T_PLANT) {
    this.T_PLANT = T_PLANT;
  }
  public SAMPLE with_T_PLANT(String T_PLANT) {
    this.T_PLANT = T_PLANT;
    return this;
  }
  private String T_CERTIFICATE;
  public String get_T_CERTIFICATE() {
    return T_CERTIFICATE;
  }
  public void set_T_CERTIFICATE(String T_CERTIFICATE) {
    this.T_CERTIFICATE = T_CERTIFICATE;
  }
  public SAMPLE with_T_CERTIFICATE(String T_CERTIFICATE) {
    this.T_CERTIFICATE = T_CERTIFICATE;
    return this;
  }
  private String T_CONTAINER;
  public String get_T_CONTAINER() {
    return T_CONTAINER;
  }
  public void set_T_CONTAINER(String T_CONTAINER) {
    this.T_CONTAINER = T_CONTAINER;
  }
  public SAMPLE with_T_CONTAINER(String T_CONTAINER) {
    this.T_CONTAINER = T_CONTAINER;
    return this;
  }
  private String T_OVERDUE;
  public String get_T_OVERDUE() {
    return T_OVERDUE;
  }
  public void set_T_OVERDUE(String T_OVERDUE) {
    this.T_OVERDUE = T_OVERDUE;
  }
  public SAMPLE with_T_OVERDUE(String T_OVERDUE) {
    this.T_OVERDUE = T_OVERDUE;
    return this;
  }
  private String T_PO_NUMBER;
  public String get_T_PO_NUMBER() {
    return T_PO_NUMBER;
  }
  public void set_T_PO_NUMBER(String T_PO_NUMBER) {
    this.T_PO_NUMBER = T_PO_NUMBER;
  }
  public SAMPLE with_T_PO_NUMBER(String T_PO_NUMBER) {
    this.T_PO_NUMBER = T_PO_NUMBER;
    return this;
  }
  private java.sql.Timestamp T_PRODUCTION_DATE;
  public java.sql.Timestamp get_T_PRODUCTION_DATE() {
    return T_PRODUCTION_DATE;
  }
  public void set_T_PRODUCTION_DATE(java.sql.Timestamp T_PRODUCTION_DATE) {
    this.T_PRODUCTION_DATE = T_PRODUCTION_DATE;
  }
  public SAMPLE with_T_PRODUCTION_DATE(java.sql.Timestamp T_PRODUCTION_DATE) {
    this.T_PRODUCTION_DATE = T_PRODUCTION_DATE;
    return this;
  }
  private java.sql.Timestamp T_REPORT_DATE;
  public java.sql.Timestamp get_T_REPORT_DATE() {
    return T_REPORT_DATE;
  }
  public void set_T_REPORT_DATE(java.sql.Timestamp T_REPORT_DATE) {
    this.T_REPORT_DATE = T_REPORT_DATE;
  }
  public SAMPLE with_T_REPORT_DATE(java.sql.Timestamp T_REPORT_DATE) {
    this.T_REPORT_DATE = T_REPORT_DATE;
    return this;
  }
  private String T_REQUESTED_BY;
  public String get_T_REQUESTED_BY() {
    return T_REQUESTED_BY;
  }
  public void set_T_REQUESTED_BY(String T_REQUESTED_BY) {
    this.T_REQUESTED_BY = T_REQUESTED_BY;
  }
  public SAMPLE with_T_REQUESTED_BY(String T_REQUESTED_BY) {
    this.T_REQUESTED_BY = T_REQUESTED_BY;
    return this;
  }
  private Integer T_LONG_NOTE;
  public Integer get_T_LONG_NOTE() {
    return T_LONG_NOTE;
  }
  public void set_T_LONG_NOTE(Integer T_LONG_NOTE) {
    this.T_LONG_NOTE = T_LONG_NOTE;
  }
  public SAMPLE with_T_LONG_NOTE(Integer T_LONG_NOTE) {
    this.T_LONG_NOTE = T_LONG_NOTE;
    return this;
  }
  private String T_SHIFT_CODE;
  public String get_T_SHIFT_CODE() {
    return T_SHIFT_CODE;
  }
  public void set_T_SHIFT_CODE(String T_SHIFT_CODE) {
    this.T_SHIFT_CODE = T_SHIFT_CODE;
  }
  public SAMPLE with_T_SHIFT_CODE(String T_SHIFT_CODE) {
    this.T_SHIFT_CODE = T_SHIFT_CODE;
    return this;
  }
  private String T_SUPP_BATCH_NO;
  public String get_T_SUPP_BATCH_NO() {
    return T_SUPP_BATCH_NO;
  }
  public void set_T_SUPP_BATCH_NO(String T_SUPP_BATCH_NO) {
    this.T_SUPP_BATCH_NO = T_SUPP_BATCH_NO;
  }
  public SAMPLE with_T_SUPP_BATCH_NO(String T_SUPP_BATCH_NO) {
    this.T_SUPP_BATCH_NO = T_SUPP_BATCH_NO;
    return this;
  }
  private String T_SUPPLIER;
  public String get_T_SUPPLIER() {
    return T_SUPPLIER;
  }
  public void set_T_SUPPLIER(String T_SUPPLIER) {
    this.T_SUPPLIER = T_SUPPLIER;
  }
  public SAMPLE with_T_SUPPLIER(String T_SUPPLIER) {
    this.T_SUPPLIER = T_SUPPLIER;
    return this;
  }
  private String T_TRUCK_VESSEL;
  public String get_T_TRUCK_VESSEL() {
    return T_TRUCK_VESSEL;
  }
  public void set_T_TRUCK_VESSEL(String T_TRUCK_VESSEL) {
    this.T_TRUCK_VESSEL = T_TRUCK_VESSEL;
  }
  public SAMPLE with_T_TRUCK_VESSEL(String T_TRUCK_VESSEL) {
    this.T_TRUCK_VESSEL = T_TRUCK_VESSEL;
    return this;
  }
  private String T_PLANT_RECV_BY;
  public String get_T_PLANT_RECV_BY() {
    return T_PLANT_RECV_BY;
  }
  public void set_T_PLANT_RECV_BY(String T_PLANT_RECV_BY) {
    this.T_PLANT_RECV_BY = T_PLANT_RECV_BY;
  }
  public SAMPLE with_T_PLANT_RECV_BY(String T_PLANT_RECV_BY) {
    this.T_PLANT_RECV_BY = T_PLANT_RECV_BY;
    return this;
  }
  private java.sql.Timestamp T_PLANT_RECV_DATE;
  public java.sql.Timestamp get_T_PLANT_RECV_DATE() {
    return T_PLANT_RECV_DATE;
  }
  public void set_T_PLANT_RECV_DATE(java.sql.Timestamp T_PLANT_RECV_DATE) {
    this.T_PLANT_RECV_DATE = T_PLANT_RECV_DATE;
  }
  public SAMPLE with_T_PLANT_RECV_DATE(java.sql.Timestamp T_PLANT_RECV_DATE) {
    this.T_PLANT_RECV_DATE = T_PLANT_RECV_DATE;
    return this;
  }
  private String C_PRIORITY;
  public String get_C_PRIORITY() {
    return C_PRIORITY;
  }
  public void set_C_PRIORITY(String C_PRIORITY) {
    this.C_PRIORITY = C_PRIORITY;
  }
  public SAMPLE with_C_PRIORITY(String C_PRIORITY) {
    this.C_PRIORITY = C_PRIORITY;
    return this;
  }
  private String STORAGE_TEMPLATE;
  public String get_STORAGE_TEMPLATE() {
    return STORAGE_TEMPLATE;
  }
  public void set_STORAGE_TEMPLATE(String STORAGE_TEMPLATE) {
    this.STORAGE_TEMPLATE = STORAGE_TEMPLATE;
  }
  public SAMPLE with_STORAGE_TEMPLATE(String STORAGE_TEMPLATE) {
    this.STORAGE_TEMPLATE = STORAGE_TEMPLATE;
    return this;
  }
  private String ALLOW_CHLD_ALQTS;
  public String get_ALLOW_CHLD_ALQTS() {
    return ALLOW_CHLD_ALQTS;
  }
  public void set_ALLOW_CHLD_ALQTS(String ALLOW_CHLD_ALQTS) {
    this.ALLOW_CHLD_ALQTS = ALLOW_CHLD_ALQTS;
  }
  public SAMPLE with_ALLOW_CHLD_ALQTS(String ALLOW_CHLD_ALQTS) {
    this.ALLOW_CHLD_ALQTS = ALLOW_CHLD_ALQTS;
    return this;
  }
  private String PHASE;
  public String get_PHASE() {
    return PHASE;
  }
  public void set_PHASE(String PHASE) {
    this.PHASE = PHASE;
  }
  public SAMPLE with_PHASE(String PHASE) {
    this.PHASE = PHASE;
    return this;
  }
  private Integer SCHEDULE_NUMBER;
  public Integer get_SCHEDULE_NUMBER() {
    return SCHEDULE_NUMBER;
  }
  public void set_SCHEDULE_NUMBER(Integer SCHEDULE_NUMBER) {
    this.SCHEDULE_NUMBER = SCHEDULE_NUMBER;
  }
  public SAMPLE with_SCHEDULE_NUMBER(Integer SCHEDULE_NUMBER) {
    this.SCHEDULE_NUMBER = SCHEDULE_NUMBER;
    return this;
  }
  private Integer T_ACTION_NUMBER;
  public Integer get_T_ACTION_NUMBER() {
    return T_ACTION_NUMBER;
  }
  public void set_T_ACTION_NUMBER(Integer T_ACTION_NUMBER) {
    this.T_ACTION_NUMBER = T_ACTION_NUMBER;
  }
  public SAMPLE with_T_ACTION_NUMBER(Integer T_ACTION_NUMBER) {
    this.T_ACTION_NUMBER = T_ACTION_NUMBER;
    return this;
  }
  private String T_BATCH_NAME1;
  public String get_T_BATCH_NAME1() {
    return T_BATCH_NAME1;
  }
  public void set_T_BATCH_NAME1(String T_BATCH_NAME1) {
    this.T_BATCH_NAME1 = T_BATCH_NAME1;
  }
  public SAMPLE with_T_BATCH_NAME1(String T_BATCH_NAME1) {
    this.T_BATCH_NAME1 = T_BATCH_NAME1;
    return this;
  }
  private String T_BATCH_NAME2;
  public String get_T_BATCH_NAME2() {
    return T_BATCH_NAME2;
  }
  public void set_T_BATCH_NAME2(String T_BATCH_NAME2) {
    this.T_BATCH_NAME2 = T_BATCH_NAME2;
  }
  public SAMPLE with_T_BATCH_NAME2(String T_BATCH_NAME2) {
    this.T_BATCH_NAME2 = T_BATCH_NAME2;
    return this;
  }
  private String T_BATCH_NAME3;
  public String get_T_BATCH_NAME3() {
    return T_BATCH_NAME3;
  }
  public void set_T_BATCH_NAME3(String T_BATCH_NAME3) {
    this.T_BATCH_NAME3 = T_BATCH_NAME3;
  }
  public SAMPLE with_T_BATCH_NAME3(String T_BATCH_NAME3) {
    this.T_BATCH_NAME3 = T_BATCH_NAME3;
    return this;
  }
  private String T_BATCH_NAME4;
  public String get_T_BATCH_NAME4() {
    return T_BATCH_NAME4;
  }
  public void set_T_BATCH_NAME4(String T_BATCH_NAME4) {
    this.T_BATCH_NAME4 = T_BATCH_NAME4;
  }
  public SAMPLE with_T_BATCH_NAME4(String T_BATCH_NAME4) {
    this.T_BATCH_NAME4 = T_BATCH_NAME4;
    return this;
  }
  private String T_BATCH_NAME5;
  public String get_T_BATCH_NAME5() {
    return T_BATCH_NAME5;
  }
  public void set_T_BATCH_NAME5(String T_BATCH_NAME5) {
    this.T_BATCH_NAME5 = T_BATCH_NAME5;
  }
  public SAMPLE with_T_BATCH_NAME5(String T_BATCH_NAME5) {
    this.T_BATCH_NAME5 = T_BATCH_NAME5;
    return this;
  }
  private String T_BATCH_NAME6;
  public String get_T_BATCH_NAME6() {
    return T_BATCH_NAME6;
  }
  public void set_T_BATCH_NAME6(String T_BATCH_NAME6) {
    this.T_BATCH_NAME6 = T_BATCH_NAME6;
  }
  public SAMPLE with_T_BATCH_NAME6(String T_BATCH_NAME6) {
    this.T_BATCH_NAME6 = T_BATCH_NAME6;
    return this;
  }
  private String T_COLLECT_SCHEME;
  public String get_T_COLLECT_SCHEME() {
    return T_COLLECT_SCHEME;
  }
  public void set_T_COLLECT_SCHEME(String T_COLLECT_SCHEME) {
    this.T_COLLECT_SCHEME = T_COLLECT_SCHEME;
  }
  public SAMPLE with_T_COLLECT_SCHEME(String T_COLLECT_SCHEME) {
    this.T_COLLECT_SCHEME = T_COLLECT_SCHEME;
    return this;
  }
  private String T_COMPOSITE_GROUP;
  public String get_T_COMPOSITE_GROUP() {
    return T_COMPOSITE_GROUP;
  }
  public void set_T_COMPOSITE_GROUP(String T_COMPOSITE_GROUP) {
    this.T_COMPOSITE_GROUP = T_COMPOSITE_GROUP;
  }
  public SAMPLE with_T_COMPOSITE_GROUP(String T_COMPOSITE_GROUP) {
    this.T_COMPOSITE_GROUP = T_COMPOSITE_GROUP;
    return this;
  }
  private String T_DISTRIBUTION_BY;
  public String get_T_DISTRIBUTION_BY() {
    return T_DISTRIBUTION_BY;
  }
  public void set_T_DISTRIBUTION_BY(String T_DISTRIBUTION_BY) {
    this.T_DISTRIBUTION_BY = T_DISTRIBUTION_BY;
  }
  public SAMPLE with_T_DISTRIBUTION_BY(String T_DISTRIBUTION_BY) {
    this.T_DISTRIBUTION_BY = T_DISTRIBUTION_BY;
    return this;
  }
  private java.sql.Timestamp T_DISTRIBUTION_DATE;
  public java.sql.Timestamp get_T_DISTRIBUTION_DATE() {
    return T_DISTRIBUTION_DATE;
  }
  public void set_T_DISTRIBUTION_DATE(java.sql.Timestamp T_DISTRIBUTION_DATE) {
    this.T_DISTRIBUTION_DATE = T_DISTRIBUTION_DATE;
  }
  public SAMPLE with_T_DISTRIBUTION_DATE(java.sql.Timestamp T_DISTRIBUTION_DATE) {
    this.T_DISTRIBUTION_DATE = T_DISTRIBUTION_DATE;
    return this;
  }
  private Integer T_EM_PLAN;
  public Integer get_T_EM_PLAN() {
    return T_EM_PLAN;
  }
  public void set_T_EM_PLAN(Integer T_EM_PLAN) {
    this.T_EM_PLAN = T_EM_PLAN;
  }
  public SAMPLE with_T_EM_PLAN(Integer T_EM_PLAN) {
    this.T_EM_PLAN = T_EM_PLAN;
    return this;
  }
  private String T_INCUB1_BATCH;
  public String get_T_INCUB1_BATCH() {
    return T_INCUB1_BATCH;
  }
  public void set_T_INCUB1_BATCH(String T_INCUB1_BATCH) {
    this.T_INCUB1_BATCH = T_INCUB1_BATCH;
  }
  public SAMPLE with_T_INCUB1_BATCH(String T_INCUB1_BATCH) {
    this.T_INCUB1_BATCH = T_INCUB1_BATCH;
    return this;
  }
  private java.sql.Timestamp T_INCUB1_END;
  public java.sql.Timestamp get_T_INCUB1_END() {
    return T_INCUB1_END;
  }
  public void set_T_INCUB1_END(java.sql.Timestamp T_INCUB1_END) {
    this.T_INCUB1_END = T_INCUB1_END;
  }
  public SAMPLE with_T_INCUB1_END(java.sql.Timestamp T_INCUB1_END) {
    this.T_INCUB1_END = T_INCUB1_END;
    return this;
  }
  private java.sql.Timestamp T_INCUB1_START;
  public java.sql.Timestamp get_T_INCUB1_START() {
    return T_INCUB1_START;
  }
  public void set_T_INCUB1_START(java.sql.Timestamp T_INCUB1_START) {
    this.T_INCUB1_START = T_INCUB1_START;
  }
  public SAMPLE with_T_INCUB1_START(java.sql.Timestamp T_INCUB1_START) {
    this.T_INCUB1_START = T_INCUB1_START;
    return this;
  }
  private String T_INCUB2_BATCH;
  public String get_T_INCUB2_BATCH() {
    return T_INCUB2_BATCH;
  }
  public void set_T_INCUB2_BATCH(String T_INCUB2_BATCH) {
    this.T_INCUB2_BATCH = T_INCUB2_BATCH;
  }
  public SAMPLE with_T_INCUB2_BATCH(String T_INCUB2_BATCH) {
    this.T_INCUB2_BATCH = T_INCUB2_BATCH;
    return this;
  }
  private java.sql.Timestamp T_INCUB2_END;
  public java.sql.Timestamp get_T_INCUB2_END() {
    return T_INCUB2_END;
  }
  public void set_T_INCUB2_END(java.sql.Timestamp T_INCUB2_END) {
    this.T_INCUB2_END = T_INCUB2_END;
  }
  public SAMPLE with_T_INCUB2_END(java.sql.Timestamp T_INCUB2_END) {
    this.T_INCUB2_END = T_INCUB2_END;
    return this;
  }
  private java.sql.Timestamp T_INCUB2_START;
  public java.sql.Timestamp get_T_INCUB2_START() {
    return T_INCUB2_START;
  }
  public void set_T_INCUB2_START(java.sql.Timestamp T_INCUB2_START) {
    this.T_INCUB2_START = T_INCUB2_START;
  }
  public SAMPLE with_T_INCUB2_START(java.sql.Timestamp T_INCUB2_START) {
    this.T_INCUB2_START = T_INCUB2_START;
    return this;
  }
  private String T_MEDIA_REFERENCE;
  public String get_T_MEDIA_REFERENCE() {
    return T_MEDIA_REFERENCE;
  }
  public void set_T_MEDIA_REFERENCE(String T_MEDIA_REFERENCE) {
    this.T_MEDIA_REFERENCE = T_MEDIA_REFERENCE;
  }
  public SAMPLE with_T_MEDIA_REFERENCE(String T_MEDIA_REFERENCE) {
    this.T_MEDIA_REFERENCE = T_MEDIA_REFERENCE;
    return this;
  }
  private Integer T_ORIGINAL_SAMPLE;
  public Integer get_T_ORIGINAL_SAMPLE() {
    return T_ORIGINAL_SAMPLE;
  }
  public void set_T_ORIGINAL_SAMPLE(Integer T_ORIGINAL_SAMPLE) {
    this.T_ORIGINAL_SAMPLE = T_ORIGINAL_SAMPLE;
  }
  public SAMPLE with_T_ORIGINAL_SAMPLE(Integer T_ORIGINAL_SAMPLE) {
    this.T_ORIGINAL_SAMPLE = T_ORIGINAL_SAMPLE;
    return this;
  }
  private String T_PERSONNEL;
  public String get_T_PERSONNEL() {
    return T_PERSONNEL;
  }
  public void set_T_PERSONNEL(String T_PERSONNEL) {
    this.T_PERSONNEL = T_PERSONNEL;
  }
  public SAMPLE with_T_PERSONNEL(String T_PERSONNEL) {
    this.T_PERSONNEL = T_PERSONNEL;
    return this;
  }
  private String T_PERSONNEL_SET;
  public String get_T_PERSONNEL_SET() {
    return T_PERSONNEL_SET;
  }
  public void set_T_PERSONNEL_SET(String T_PERSONNEL_SET) {
    this.T_PERSONNEL_SET = T_PERSONNEL_SET;
  }
  public SAMPLE with_T_PERSONNEL_SET(String T_PERSONNEL_SET) {
    this.T_PERSONNEL_SET = T_PERSONNEL_SET;
    return this;
  }
  private String T_SAMPLE_TYPE;
  public String get_T_SAMPLE_TYPE() {
    return T_SAMPLE_TYPE;
  }
  public void set_T_SAMPLE_TYPE(String T_SAMPLE_TYPE) {
    this.T_SAMPLE_TYPE = T_SAMPLE_TYPE;
  }
  public SAMPLE with_T_SAMPLE_TYPE(String T_SAMPLE_TYPE) {
    this.T_SAMPLE_TYPE = T_SAMPLE_TYPE;
    return this;
  }
  private String T_SCHEDULE_GROUP;
  public String get_T_SCHEDULE_GROUP() {
    return T_SCHEDULE_GROUP;
  }
  public void set_T_SCHEDULE_GROUP(String T_SCHEDULE_GROUP) {
    this.T_SCHEDULE_GROUP = T_SCHEDULE_GROUP;
  }
  public SAMPLE with_T_SCHEDULE_GROUP(String T_SCHEDULE_GROUP) {
    this.T_SCHEDULE_GROUP = T_SCHEDULE_GROUP;
    return this;
  }
  private String T_SUITE;
  public String get_T_SUITE() {
    return T_SUITE;
  }
  public void set_T_SUITE(String T_SUITE) {
    this.T_SUITE = T_SUITE;
  }
  public SAMPLE with_T_SUITE(String T_SUITE) {
    this.T_SUITE = T_SUITE;
    return this;
  }
  private String T_TRANSIT_LOCATION;
  public String get_T_TRANSIT_LOCATION() {
    return T_TRANSIT_LOCATION;
  }
  public void set_T_TRANSIT_LOCATION(String T_TRANSIT_LOCATION) {
    this.T_TRANSIT_LOCATION = T_TRANSIT_LOCATION;
  }
  public SAMPLE with_T_TRANSIT_LOCATION(String T_TRANSIT_LOCATION) {
    this.T_TRANSIT_LOCATION = T_TRANSIT_LOCATION;
    return this;
  }
  private String T_VALIDATION;
  public String get_T_VALIDATION() {
    return T_VALIDATION;
  }
  public void set_T_VALIDATION(String T_VALIDATION) {
    this.T_VALIDATION = T_VALIDATION;
  }
  public SAMPLE with_T_VALIDATION(String T_VALIDATION) {
    this.T_VALIDATION = T_VALIDATION;
    return this;
  }
  private String C_REFERENCE_ID;
  public String get_C_REFERENCE_ID() {
    return C_REFERENCE_ID;
  }
  public void set_C_REFERENCE_ID(String C_REFERENCE_ID) {
    this.C_REFERENCE_ID = C_REFERENCE_ID;
  }
  public SAMPLE with_C_REFERENCE_ID(String C_REFERENCE_ID) {
    this.C_REFERENCE_ID = C_REFERENCE_ID;
    return this;
  }
  private String C_SAMPLING_REASON;
  public String get_C_SAMPLING_REASON() {
    return C_SAMPLING_REASON;
  }
  public void set_C_SAMPLING_REASON(String C_SAMPLING_REASON) {
    this.C_SAMPLING_REASON = C_SAMPLING_REASON;
  }
  public SAMPLE with_C_SAMPLING_REASON(String C_SAMPLING_REASON) {
    this.C_SAMPLING_REASON = C_SAMPLING_REASON;
    return this;
  }
  private String C_CUSTOMER_TYPE;
  public String get_C_CUSTOMER_TYPE() {
    return C_CUSTOMER_TYPE;
  }
  public void set_C_CUSTOMER_TYPE(String C_CUSTOMER_TYPE) {
    this.C_CUSTOMER_TYPE = C_CUSTOMER_TYPE;
  }
  public SAMPLE with_C_CUSTOMER_TYPE(String C_CUSTOMER_TYPE) {
    this.C_CUSTOMER_TYPE = C_CUSTOMER_TYPE;
    return this;
  }
  private String C_REQUEST_TYPE;
  public String get_C_REQUEST_TYPE() {
    return C_REQUEST_TYPE;
  }
  public void set_C_REQUEST_TYPE(String C_REQUEST_TYPE) {
    this.C_REQUEST_TYPE = C_REQUEST_TYPE;
  }
  public SAMPLE with_C_REQUEST_TYPE(String C_REQUEST_TYPE) {
    this.C_REQUEST_TYPE = C_REQUEST_TYPE;
    return this;
  }
  private String C_OTHER_SAMPLE_SOURCE;
  public String get_C_OTHER_SAMPLE_SOURCE() {
    return C_OTHER_SAMPLE_SOURCE;
  }
  public void set_C_OTHER_SAMPLE_SOURCE(String C_OTHER_SAMPLE_SOURCE) {
    this.C_OTHER_SAMPLE_SOURCE = C_OTHER_SAMPLE_SOURCE;
  }
  public SAMPLE with_C_OTHER_SAMPLE_SOURCE(String C_OTHER_SAMPLE_SOURCE) {
    this.C_OTHER_SAMPLE_SOURCE = C_OTHER_SAMPLE_SOURCE;
    return this;
  }
  private String C_CUST_ID;
  public String get_C_CUST_ID() {
    return C_CUST_ID;
  }
  public void set_C_CUST_ID(String C_CUST_ID) {
    this.C_CUST_ID = C_CUST_ID;
  }
  public SAMPLE with_C_CUST_ID(String C_CUST_ID) {
    this.C_CUST_ID = C_CUST_ID;
    return this;
  }
  private String C_CLIENT_TYPE;
  public String get_C_CLIENT_TYPE() {
    return C_CLIENT_TYPE;
  }
  public void set_C_CLIENT_TYPE(String C_CLIENT_TYPE) {
    this.C_CLIENT_TYPE = C_CLIENT_TYPE;
  }
  public SAMPLE with_C_CLIENT_TYPE(String C_CLIENT_TYPE) {
    this.C_CLIENT_TYPE = C_CLIENT_TYPE;
    return this;
  }
  private String C_REQ_SAMP_TYPE;
  public String get_C_REQ_SAMP_TYPE() {
    return C_REQ_SAMP_TYPE;
  }
  public void set_C_REQ_SAMP_TYPE(String C_REQ_SAMP_TYPE) {
    this.C_REQ_SAMP_TYPE = C_REQ_SAMP_TYPE;
  }
  public SAMPLE with_C_REQ_SAMP_TYPE(String C_REQ_SAMP_TYPE) {
    this.C_REQ_SAMP_TYPE = C_REQ_SAMP_TYPE;
    return this;
  }
  private String C_SAMPLE_SOURCE;
  public String get_C_SAMPLE_SOURCE() {
    return C_SAMPLE_SOURCE;
  }
  public void set_C_SAMPLE_SOURCE(String C_SAMPLE_SOURCE) {
    this.C_SAMPLE_SOURCE = C_SAMPLE_SOURCE;
  }
  public SAMPLE with_C_SAMPLE_SOURCE(String C_SAMPLE_SOURCE) {
    this.C_SAMPLE_SOURCE = C_SAMPLE_SOURCE;
    return this;
  }
  private String C_DM_BARCODE;
  public String get_C_DM_BARCODE() {
    return C_DM_BARCODE;
  }
  public void set_C_DM_BARCODE(String C_DM_BARCODE) {
    this.C_DM_BARCODE = C_DM_BARCODE;
  }
  public SAMPLE with_C_DM_BARCODE(String C_DM_BARCODE) {
    this.C_DM_BARCODE = C_DM_BARCODE;
    return this;
  }
  private String C_REQ_EXT_REFERENCE;
  public String get_C_REQ_EXT_REFERENCE() {
    return C_REQ_EXT_REFERENCE;
  }
  public void set_C_REQ_EXT_REFERENCE(String C_REQ_EXT_REFERENCE) {
    this.C_REQ_EXT_REFERENCE = C_REQ_EXT_REFERENCE;
  }
  public SAMPLE with_C_REQ_EXT_REFERENCE(String C_REQ_EXT_REFERENCE) {
    this.C_REQ_EXT_REFERENCE = C_REQ_EXT_REFERENCE;
    return this;
  }
  private String C_EXPRESS_SERVICE;
  public String get_C_EXPRESS_SERVICE() {
    return C_EXPRESS_SERVICE;
  }
  public void set_C_EXPRESS_SERVICE(String C_EXPRESS_SERVICE) {
    this.C_EXPRESS_SERVICE = C_EXPRESS_SERVICE;
  }
  public SAMPLE with_C_EXPRESS_SERVICE(String C_EXPRESS_SERVICE) {
    this.C_EXPRESS_SERVICE = C_EXPRESS_SERVICE;
    return this;
  }
  private String C_HARDCOPY_REQUIRED;
  public String get_C_HARDCOPY_REQUIRED() {
    return C_HARDCOPY_REQUIRED;
  }
  public void set_C_HARDCOPY_REQUIRED(String C_HARDCOPY_REQUIRED) {
    this.C_HARDCOPY_REQUIRED = C_HARDCOPY_REQUIRED;
  }
  public SAMPLE with_C_HARDCOPY_REQUIRED(String C_HARDCOPY_REQUIRED) {
    this.C_HARDCOPY_REQUIRED = C_HARDCOPY_REQUIRED;
    return this;
  }
  private String C_REQ_REMARKS;
  public String get_C_REQ_REMARKS() {
    return C_REQ_REMARKS;
  }
  public void set_C_REQ_REMARKS(String C_REQ_REMARKS) {
    this.C_REQ_REMARKS = C_REQ_REMARKS;
  }
  public SAMPLE with_C_REQ_REMARKS(String C_REQ_REMARKS) {
    this.C_REQ_REMARKS = C_REQ_REMARKS;
    return this;
  }
  private Integer C_REQ_COPIES;
  public Integer get_C_REQ_COPIES() {
    return C_REQ_COPIES;
  }
  public void set_C_REQ_COPIES(Integer C_REQ_COPIES) {
    this.C_REQ_COPIES = C_REQ_COPIES;
  }
  public SAMPLE with_C_REQ_COPIES(Integer C_REQ_COPIES) {
    this.C_REQ_COPIES = C_REQ_COPIES;
    return this;
  }
  private String C_REQ_EDIT;
  public String get_C_REQ_EDIT() {
    return C_REQ_EDIT;
  }
  public void set_C_REQ_EDIT(String C_REQ_EDIT) {
    this.C_REQ_EDIT = C_REQ_EDIT;
  }
  public SAMPLE with_C_REQ_EDIT(String C_REQ_EDIT) {
    this.C_REQ_EDIT = C_REQ_EDIT;
    return this;
  }
  private java.math.BigDecimal C_TOTAL_SERVICE_FEE;
  public java.math.BigDecimal get_C_TOTAL_SERVICE_FEE() {
    return C_TOTAL_SERVICE_FEE;
  }
  public void set_C_TOTAL_SERVICE_FEE(java.math.BigDecimal C_TOTAL_SERVICE_FEE) {
    this.C_TOTAL_SERVICE_FEE = C_TOTAL_SERVICE_FEE;
  }
  public SAMPLE with_C_TOTAL_SERVICE_FEE(java.math.BigDecimal C_TOTAL_SERVICE_FEE) {
    this.C_TOTAL_SERVICE_FEE = C_TOTAL_SERVICE_FEE;
    return this;
  }
  private String C_PRODUCT_GROUP;
  public String get_C_PRODUCT_GROUP() {
    return C_PRODUCT_GROUP;
  }
  public void set_C_PRODUCT_GROUP(String C_PRODUCT_GROUP) {
    this.C_PRODUCT_GROUP = C_PRODUCT_GROUP;
  }
  public SAMPLE with_C_PRODUCT_GROUP(String C_PRODUCT_GROUP) {
    this.C_PRODUCT_GROUP = C_PRODUCT_GROUP;
    return this;
  }
  private String C_PRODUCT_CATEGORY;
  public String get_C_PRODUCT_CATEGORY() {
    return C_PRODUCT_CATEGORY;
  }
  public void set_C_PRODUCT_CATEGORY(String C_PRODUCT_CATEGORY) {
    this.C_PRODUCT_CATEGORY = C_PRODUCT_CATEGORY;
  }
  public SAMPLE with_C_PRODUCT_CATEGORY(String C_PRODUCT_CATEGORY) {
    this.C_PRODUCT_CATEGORY = C_PRODUCT_CATEGORY;
    return this;
  }
  private java.sql.Timestamp C_PRODUCTION_DATE;
  public java.sql.Timestamp get_C_PRODUCTION_DATE() {
    return C_PRODUCTION_DATE;
  }
  public void set_C_PRODUCTION_DATE(java.sql.Timestamp C_PRODUCTION_DATE) {
    this.C_PRODUCTION_DATE = C_PRODUCTION_DATE;
  }
  public SAMPLE with_C_PRODUCTION_DATE(java.sql.Timestamp C_PRODUCTION_DATE) {
    this.C_PRODUCTION_DATE = C_PRODUCTION_DATE;
    return this;
  }
  private Integer C_NO_OF_UNIT;
  public Integer get_C_NO_OF_UNIT() {
    return C_NO_OF_UNIT;
  }
  public void set_C_NO_OF_UNIT(Integer C_NO_OF_UNIT) {
    this.C_NO_OF_UNIT = C_NO_OF_UNIT;
  }
  public SAMPLE with_C_NO_OF_UNIT(Integer C_NO_OF_UNIT) {
    this.C_NO_OF_UNIT = C_NO_OF_UNIT;
    return this;
  }
  private String C_SAMPLE_CONDITION;
  public String get_C_SAMPLE_CONDITION() {
    return C_SAMPLE_CONDITION;
  }
  public void set_C_SAMPLE_CONDITION(String C_SAMPLE_CONDITION) {
    this.C_SAMPLE_CONDITION = C_SAMPLE_CONDITION;
  }
  public SAMPLE with_C_SAMPLE_CONDITION(String C_SAMPLE_CONDITION) {
    this.C_SAMPLE_CONDITION = C_SAMPLE_CONDITION;
    return this;
  }
  private Float C_TEMP_REC;
  public Float get_C_TEMP_REC() {
    return C_TEMP_REC;
  }
  public void set_C_TEMP_REC(Float C_TEMP_REC) {
    this.C_TEMP_REC = C_TEMP_REC;
  }
  public SAMPLE with_C_TEMP_REC(Float C_TEMP_REC) {
    this.C_TEMP_REC = C_TEMP_REC;
    return this;
  }
  private String C_POINT_OF_SAMPLING;
  public String get_C_POINT_OF_SAMPLING() {
    return C_POINT_OF_SAMPLING;
  }
  public void set_C_POINT_OF_SAMPLING(String C_POINT_OF_SAMPLING) {
    this.C_POINT_OF_SAMPLING = C_POINT_OF_SAMPLING;
  }
  public SAMPLE with_C_POINT_OF_SAMPLING(String C_POINT_OF_SAMPLING) {
    this.C_POINT_OF_SAMPLING = C_POINT_OF_SAMPLING;
    return this;
  }
  private String C_REQ_SAMP_COLLECTION;
  public String get_C_REQ_SAMP_COLLECTION() {
    return C_REQ_SAMP_COLLECTION;
  }
  public void set_C_REQ_SAMP_COLLECTION(String C_REQ_SAMP_COLLECTION) {
    this.C_REQ_SAMP_COLLECTION = C_REQ_SAMP_COLLECTION;
  }
  public SAMPLE with_C_REQ_SAMP_COLLECTION(String C_REQ_SAMP_COLLECTION) {
    this.C_REQ_SAMP_COLLECTION = C_REQ_SAMP_COLLECTION;
    return this;
  }
  private String C_REQ_SAMP_BAL_RETURN;
  public String get_C_REQ_SAMP_BAL_RETURN() {
    return C_REQ_SAMP_BAL_RETURN;
  }
  public void set_C_REQ_SAMP_BAL_RETURN(String C_REQ_SAMP_BAL_RETURN) {
    this.C_REQ_SAMP_BAL_RETURN = C_REQ_SAMP_BAL_RETURN;
  }
  public SAMPLE with_C_REQ_SAMP_BAL_RETURN(String C_REQ_SAMP_BAL_RETURN) {
    this.C_REQ_SAMP_BAL_RETURN = C_REQ_SAMP_BAL_RETURN;
    return this;
  }
  private String C_HAZARD;
  public String get_C_HAZARD() {
    return C_HAZARD;
  }
  public void set_C_HAZARD(String C_HAZARD) {
    this.C_HAZARD = C_HAZARD;
  }
  public SAMPLE with_C_HAZARD(String C_HAZARD) {
    this.C_HAZARD = C_HAZARD;
    return this;
  }
  private String C_BATCH_NO;
  public String get_C_BATCH_NO() {
    return C_BATCH_NO;
  }
  public void set_C_BATCH_NO(String C_BATCH_NO) {
    this.C_BATCH_NO = C_BATCH_NO;
  }
  public SAMPLE with_C_BATCH_NO(String C_BATCH_NO) {
    this.C_BATCH_NO = C_BATCH_NO;
    return this;
  }
  private String C_REQUEST_NO;
  public String get_C_REQUEST_NO() {
    return C_REQUEST_NO;
  }
  public void set_C_REQUEST_NO(String C_REQUEST_NO) {
    this.C_REQUEST_NO = C_REQUEST_NO;
  }
  public SAMPLE with_C_REQUEST_NO(String C_REQUEST_NO) {
    this.C_REQUEST_NO = C_REQUEST_NO;
    return this;
  }
  private String C_BILLING_TYPE;
  public String get_C_BILLING_TYPE() {
    return C_BILLING_TYPE;
  }
  public void set_C_BILLING_TYPE(String C_BILLING_TYPE) {
    this.C_BILLING_TYPE = C_BILLING_TYPE;
  }
  public SAMPLE with_C_BILLING_TYPE(String C_BILLING_TYPE) {
    this.C_BILLING_TYPE = C_BILLING_TYPE;
    return this;
  }
  private java.math.BigDecimal C_TOTAL_TEST_CHARGE;
  public java.math.BigDecimal get_C_TOTAL_TEST_CHARGE() {
    return C_TOTAL_TEST_CHARGE;
  }
  public void set_C_TOTAL_TEST_CHARGE(java.math.BigDecimal C_TOTAL_TEST_CHARGE) {
    this.C_TOTAL_TEST_CHARGE = C_TOTAL_TEST_CHARGE;
  }
  public SAMPLE with_C_TOTAL_TEST_CHARGE(java.math.BigDecimal C_TOTAL_TEST_CHARGE) {
    this.C_TOTAL_TEST_CHARGE = C_TOTAL_TEST_CHARGE;
    return this;
  }
  private String C_VOUCHER;
  public String get_C_VOUCHER() {
    return C_VOUCHER;
  }
  public void set_C_VOUCHER(String C_VOUCHER) {
    this.C_VOUCHER = C_VOUCHER;
  }
  public SAMPLE with_C_VOUCHER(String C_VOUCHER) {
    this.C_VOUCHER = C_VOUCHER;
    return this;
  }
  private String C_ERAD_NO;
  public String get_C_ERAD_NO() {
    return C_ERAD_NO;
  }
  public void set_C_ERAD_NO(String C_ERAD_NO) {
    this.C_ERAD_NO = C_ERAD_NO;
  }
  public SAMPLE with_C_ERAD_NO(String C_ERAD_NO) {
    this.C_ERAD_NO = C_ERAD_NO;
    return this;
  }
  private String C_RECEIPT;
  public String get_C_RECEIPT() {
    return C_RECEIPT;
  }
  public void set_C_RECEIPT(String C_RECEIPT) {
    this.C_RECEIPT = C_RECEIPT;
  }
  public SAMPLE with_C_RECEIPT(String C_RECEIPT) {
    this.C_RECEIPT = C_RECEIPT;
    return this;
  }
  private java.sql.Timestamp C_PAYMENT_DT;
  public java.sql.Timestamp get_C_PAYMENT_DT() {
    return C_PAYMENT_DT;
  }
  public void set_C_PAYMENT_DT(java.sql.Timestamp C_PAYMENT_DT) {
    this.C_PAYMENT_DT = C_PAYMENT_DT;
  }
  public SAMPLE with_C_PAYMENT_DT(java.sql.Timestamp C_PAYMENT_DT) {
    this.C_PAYMENT_DT = C_PAYMENT_DT;
    return this;
  }
  private String C_PAYMENT_SRC;
  public String get_C_PAYMENT_SRC() {
    return C_PAYMENT_SRC;
  }
  public void set_C_PAYMENT_SRC(String C_PAYMENT_SRC) {
    this.C_PAYMENT_SRC = C_PAYMENT_SRC;
  }
  public SAMPLE with_C_PAYMENT_SRC(String C_PAYMENT_SRC) {
    this.C_PAYMENT_SRC = C_PAYMENT_SRC;
    return this;
  }
  private String C_PAYMENT_STATUS;
  public String get_C_PAYMENT_STATUS() {
    return C_PAYMENT_STATUS;
  }
  public void set_C_PAYMENT_STATUS(String C_PAYMENT_STATUS) {
    this.C_PAYMENT_STATUS = C_PAYMENT_STATUS;
  }
  public SAMPLE with_C_PAYMENT_STATUS(String C_PAYMENT_STATUS) {
    this.C_PAYMENT_STATUS = C_PAYMENT_STATUS;
    return this;
  }
  private java.sql.Timestamp C_CUST_DELIVERY_DATE;
  public java.sql.Timestamp get_C_CUST_DELIVERY_DATE() {
    return C_CUST_DELIVERY_DATE;
  }
  public void set_C_CUST_DELIVERY_DATE(java.sql.Timestamp C_CUST_DELIVERY_DATE) {
    this.C_CUST_DELIVERY_DATE = C_CUST_DELIVERY_DATE;
  }
  public SAMPLE with_C_CUST_DELIVERY_DATE(java.sql.Timestamp C_CUST_DELIVERY_DATE) {
    this.C_CUST_DELIVERY_DATE = C_CUST_DELIVERY_DATE;
    return this;
  }
  private String C_SAMPLE_OPINION;
  public String get_C_SAMPLE_OPINION() {
    return C_SAMPLE_OPINION;
  }
  public void set_C_SAMPLE_OPINION(String C_SAMPLE_OPINION) {
    this.C_SAMPLE_OPINION = C_SAMPLE_OPINION;
  }
  public SAMPLE with_C_SAMPLE_OPINION(String C_SAMPLE_OPINION) {
    this.C_SAMPLE_OPINION = C_SAMPLE_OPINION;
    return this;
  }
  private Integer C_SUBCAT_ID;
  public Integer get_C_SUBCAT_ID() {
    return C_SUBCAT_ID;
  }
  public void set_C_SUBCAT_ID(Integer C_SUBCAT_ID) {
    this.C_SUBCAT_ID = C_SUBCAT_ID;
  }
  public SAMPLE with_C_SUBCAT_ID(Integer C_SUBCAT_ID) {
    this.C_SUBCAT_ID = C_SUBCAT_ID;
    return this;
  }
  private Integer C_PRODCAT_ID;
  public Integer get_C_PRODCAT_ID() {
    return C_PRODCAT_ID;
  }
  public void set_C_PRODCAT_ID(Integer C_PRODCAT_ID) {
    this.C_PRODCAT_ID = C_PRODCAT_ID;
  }
  public SAMPLE with_C_PRODCAT_ID(Integer C_PRODCAT_ID) {
    this.C_PRODCAT_ID = C_PRODCAT_ID;
    return this;
  }
  private Integer C_PROD_GROUP_ID;
  public Integer get_C_PROD_GROUP_ID() {
    return C_PROD_GROUP_ID;
  }
  public void set_C_PROD_GROUP_ID(Integer C_PROD_GROUP_ID) {
    this.C_PROD_GROUP_ID = C_PROD_GROUP_ID;
  }
  public SAMPLE with_C_PROD_GROUP_ID(Integer C_PROD_GROUP_ID) {
    this.C_PROD_GROUP_ID = C_PROD_GROUP_ID;
    return this;
  }
  private String C_MSG_ID;
  public String get_C_MSG_ID() {
    return C_MSG_ID;
  }
  public void set_C_MSG_ID(String C_MSG_ID) {
    this.C_MSG_ID = C_MSG_ID;
  }
  public SAMPLE with_C_MSG_ID(String C_MSG_ID) {
    this.C_MSG_ID = C_MSG_ID;
    return this;
  }
  private String C_MSG_DIGEST;
  public String get_C_MSG_DIGEST() {
    return C_MSG_DIGEST;
  }
  public void set_C_MSG_DIGEST(String C_MSG_DIGEST) {
    this.C_MSG_DIGEST = C_MSG_DIGEST;
  }
  public SAMPLE with_C_MSG_DIGEST(String C_MSG_DIGEST) {
    this.C_MSG_DIGEST = C_MSG_DIGEST;
    return this;
  }
  private String C_REQ_SOURCE;
  public String get_C_REQ_SOURCE() {
    return C_REQ_SOURCE;
  }
  public void set_C_REQ_SOURCE(String C_REQ_SOURCE) {
    this.C_REQ_SOURCE = C_REQ_SOURCE;
  }
  public SAMPLE with_C_REQ_SOURCE(String C_REQ_SOURCE) {
    this.C_REQ_SOURCE = C_REQ_SOURCE;
    return this;
  }
  private Integer C_ITEM_ID;
  public Integer get_C_ITEM_ID() {
    return C_ITEM_ID;
  }
  public void set_C_ITEM_ID(Integer C_ITEM_ID) {
    this.C_ITEM_ID = C_ITEM_ID;
  }
  public SAMPLE with_C_ITEM_ID(Integer C_ITEM_ID) {
    this.C_ITEM_ID = C_ITEM_ID;
    return this;
  }
  private String C_SRC_REQ_ID;
  public String get_C_SRC_REQ_ID() {
    return C_SRC_REQ_ID;
  }
  public void set_C_SRC_REQ_ID(String C_SRC_REQ_ID) {
    this.C_SRC_REQ_ID = C_SRC_REQ_ID;
  }
  public SAMPLE with_C_SRC_REQ_ID(String C_SRC_REQ_ID) {
    this.C_SRC_REQ_ID = C_SRC_REQ_ID;
    return this;
  }
  private java.sql.Timestamp C_EXPECTED_DATE;
  public java.sql.Timestamp get_C_EXPECTED_DATE() {
    return C_EXPECTED_DATE;
  }
  public void set_C_EXPECTED_DATE(java.sql.Timestamp C_EXPECTED_DATE) {
    this.C_EXPECTED_DATE = C_EXPECTED_DATE;
  }
  public SAMPLE with_C_EXPECTED_DATE(java.sql.Timestamp C_EXPECTED_DATE) {
    this.C_EXPECTED_DATE = C_EXPECTED_DATE;
    return this;
  }
  private String C_PRODUCT_DESC;
  public String get_C_PRODUCT_DESC() {
    return C_PRODUCT_DESC;
  }
  public void set_C_PRODUCT_DESC(String C_PRODUCT_DESC) {
    this.C_PRODUCT_DESC = C_PRODUCT_DESC;
  }
  public SAMPLE with_C_PRODUCT_DESC(String C_PRODUCT_DESC) {
    this.C_PRODUCT_DESC = C_PRODUCT_DESC;
    return this;
  }
  private java.sql.Timestamp C_DATE_ONHOLD;
  public java.sql.Timestamp get_C_DATE_ONHOLD() {
    return C_DATE_ONHOLD;
  }
  public void set_C_DATE_ONHOLD(java.sql.Timestamp C_DATE_ONHOLD) {
    this.C_DATE_ONHOLD = C_DATE_ONHOLD;
  }
  public SAMPLE with_C_DATE_ONHOLD(java.sql.Timestamp C_DATE_ONHOLD) {
    this.C_DATE_ONHOLD = C_DATE_ONHOLD;
    return this;
  }
  private java.sql.Timestamp C_DATE_OFFHOLD;
  public java.sql.Timestamp get_C_DATE_OFFHOLD() {
    return C_DATE_OFFHOLD;
  }
  public void set_C_DATE_OFFHOLD(java.sql.Timestamp C_DATE_OFFHOLD) {
    this.C_DATE_OFFHOLD = C_DATE_OFFHOLD;
  }
  public SAMPLE with_C_DATE_OFFHOLD(java.sql.Timestamp C_DATE_OFFHOLD) {
    this.C_DATE_OFFHOLD = C_DATE_OFFHOLD;
    return this;
  }
  private String C_ONHOLD_REASON;
  public String get_C_ONHOLD_REASON() {
    return C_ONHOLD_REASON;
  }
  public void set_C_ONHOLD_REASON(String C_ONHOLD_REASON) {
    this.C_ONHOLD_REASON = C_ONHOLD_REASON;
  }
  public SAMPLE with_C_ONHOLD_REASON(String C_ONHOLD_REASON) {
    this.C_ONHOLD_REASON = C_ONHOLD_REASON;
    return this;
  }
  private String LATITUDE;
  public String get_LATITUDE() {
    return LATITUDE;
  }
  public void set_LATITUDE(String LATITUDE) {
    this.LATITUDE = LATITUDE;
  }
  public SAMPLE with_LATITUDE(String LATITUDE) {
    this.LATITUDE = LATITUDE;
    return this;
  }
  private String LONGITUDE;
  public String get_LONGITUDE() {
    return LONGITUDE;
  }
  public void set_LONGITUDE(String LONGITUDE) {
    this.LONGITUDE = LONGITUDE;
  }
  public SAMPLE with_LONGITUDE(String LONGITUDE) {
    this.LONGITUDE = LONGITUDE;
    return this;
  }
  private String C_ON_SITE_PRESERVATION;
  public String get_C_ON_SITE_PRESERVATION() {
    return C_ON_SITE_PRESERVATION;
  }
  public void set_C_ON_SITE_PRESERVATION(String C_ON_SITE_PRESERVATION) {
    this.C_ON_SITE_PRESERVATION = C_ON_SITE_PRESERVATION;
  }
  public SAMPLE with_C_ON_SITE_PRESERVATION(String C_ON_SITE_PRESERVATION) {
    this.C_ON_SITE_PRESERVATION = C_ON_SITE_PRESERVATION;
    return this;
  }
  private String C_PRESERVATION_METHOD;
  public String get_C_PRESERVATION_METHOD() {
    return C_PRESERVATION_METHOD;
  }
  public void set_C_PRESERVATION_METHOD(String C_PRESERVATION_METHOD) {
    this.C_PRESERVATION_METHOD = C_PRESERVATION_METHOD;
  }
  public SAMPLE with_C_PRESERVATION_METHOD(String C_PRESERVATION_METHOD) {
    this.C_PRESERVATION_METHOD = C_PRESERVATION_METHOD;
    return this;
  }
  private String C_SAMPLING_PROCEDURE;
  public String get_C_SAMPLING_PROCEDURE() {
    return C_SAMPLING_PROCEDURE;
  }
  public void set_C_SAMPLING_PROCEDURE(String C_SAMPLING_PROCEDURE) {
    this.C_SAMPLING_PROCEDURE = C_SAMPLING_PROCEDURE;
  }
  public SAMPLE with_C_SAMPLING_PROCEDURE(String C_SAMPLING_PROCEDURE) {
    this.C_SAMPLING_PROCEDURE = C_SAMPLING_PROCEDURE;
    return this;
  }
  private String C_SAMPLING_APPARATUS;
  public String get_C_SAMPLING_APPARATUS() {
    return C_SAMPLING_APPARATUS;
  }
  public void set_C_SAMPLING_APPARATUS(String C_SAMPLING_APPARATUS) {
    this.C_SAMPLING_APPARATUS = C_SAMPLING_APPARATUS;
  }
  public SAMPLE with_C_SAMPLING_APPARATUS(String C_SAMPLING_APPARATUS) {
    this.C_SAMPLING_APPARATUS = C_SAMPLING_APPARATUS;
    return this;
  }
  private String C_APPEARANCE;
  public String get_C_APPEARANCE() {
    return C_APPEARANCE;
  }
  public void set_C_APPEARANCE(String C_APPEARANCE) {
    this.C_APPEARANCE = C_APPEARANCE;
  }
  public SAMPLE with_C_APPEARANCE(String C_APPEARANCE) {
    this.C_APPEARANCE = C_APPEARANCE;
    return this;
  }
  private String C_COLOUR;
  public String get_C_COLOUR() {
    return C_COLOUR;
  }
  public void set_C_COLOUR(String C_COLOUR) {
    this.C_COLOUR = C_COLOUR;
  }
  public SAMPLE with_C_COLOUR(String C_COLOUR) {
    this.C_COLOUR = C_COLOUR;
    return this;
  }
  private String C_ODOUR;
  public String get_C_ODOUR() {
    return C_ODOUR;
  }
  public void set_C_ODOUR(String C_ODOUR) {
    this.C_ODOUR = C_ODOUR;
  }
  public SAMPLE with_C_ODOUR(String C_ODOUR) {
    this.C_ODOUR = C_ODOUR;
    return this;
  }
  private String C_SAMPLING_COLLECTION_LOC;
  public String get_C_SAMPLING_COLLECTION_LOC() {
    return C_SAMPLING_COLLECTION_LOC;
  }
  public void set_C_SAMPLING_COLLECTION_LOC(String C_SAMPLING_COLLECTION_LOC) {
    this.C_SAMPLING_COLLECTION_LOC = C_SAMPLING_COLLECTION_LOC;
  }
  public SAMPLE with_C_SAMPLING_COLLECTION_LOC(String C_SAMPLING_COLLECTION_LOC) {
    this.C_SAMPLING_COLLECTION_LOC = C_SAMPLING_COLLECTION_LOC;
    return this;
  }
  private String C_REPORT_ID;
  public String get_C_REPORT_ID() {
    return C_REPORT_ID;
  }
  public void set_C_REPORT_ID(String C_REPORT_ID) {
    this.C_REPORT_ID = C_REPORT_ID;
  }
  public SAMPLE with_C_REPORT_ID(String C_REPORT_ID) {
    this.C_REPORT_ID = C_REPORT_ID;
    return this;
  }
  private String C_DELIVERED_BY;
  public String get_C_DELIVERED_BY() {
    return C_DELIVERED_BY;
  }
  public void set_C_DELIVERED_BY(String C_DELIVERED_BY) {
    this.C_DELIVERED_BY = C_DELIVERED_BY;
  }
  public SAMPLE with_C_DELIVERED_BY(String C_DELIVERED_BY) {
    this.C_DELIVERED_BY = C_DELIVERED_BY;
    return this;
  }
  private String C_MAKANI_NO;
  public String get_C_MAKANI_NO() {
    return C_MAKANI_NO;
  }
  public void set_C_MAKANI_NO(String C_MAKANI_NO) {
    this.C_MAKANI_NO = C_MAKANI_NO;
  }
  public SAMPLE with_C_MAKANI_NO(String C_MAKANI_NO) {
    this.C_MAKANI_NO = C_MAKANI_NO;
    return this;
  }
  private String C_COUNTRY;
  public String get_C_COUNTRY() {
    return C_COUNTRY;
  }
  public void set_C_COUNTRY(String C_COUNTRY) {
    this.C_COUNTRY = C_COUNTRY;
  }
  public SAMPLE with_C_COUNTRY(String C_COUNTRY) {
    this.C_COUNTRY = C_COUNTRY;
    return this;
  }
  private String C_BUILDING_FLOOR;
  public String get_C_BUILDING_FLOOR() {
    return C_BUILDING_FLOOR;
  }
  public void set_C_BUILDING_FLOOR(String C_BUILDING_FLOOR) {
    this.C_BUILDING_FLOOR = C_BUILDING_FLOOR;
  }
  public SAMPLE with_C_BUILDING_FLOOR(String C_BUILDING_FLOOR) {
    this.C_BUILDING_FLOOR = C_BUILDING_FLOOR;
    return this;
  }
  private String C_LOCATION_DESC;
  public String get_C_LOCATION_DESC() {
    return C_LOCATION_DESC;
  }
  public void set_C_LOCATION_DESC(String C_LOCATION_DESC) {
    this.C_LOCATION_DESC = C_LOCATION_DESC;
  }
  public SAMPLE with_C_LOCATION_DESC(String C_LOCATION_DESC) {
    this.C_LOCATION_DESC = C_LOCATION_DESC;
    return this;
  }
  private String C_ITEM_BARCODE;
  public String get_C_ITEM_BARCODE() {
    return C_ITEM_BARCODE;
  }
  public void set_C_ITEM_BARCODE(String C_ITEM_BARCODE) {
    this.C_ITEM_BARCODE = C_ITEM_BARCODE;
  }
  public SAMPLE with_C_ITEM_BARCODE(String C_ITEM_BARCODE) {
    this.C_ITEM_BARCODE = C_ITEM_BARCODE;
    return this;
  }
  private String C_ITEM_BRAND;
  public String get_C_ITEM_BRAND() {
    return C_ITEM_BRAND;
  }
  public void set_C_ITEM_BRAND(String C_ITEM_BRAND) {
    this.C_ITEM_BRAND = C_ITEM_BRAND;
  }
  public SAMPLE with_C_ITEM_BRAND(String C_ITEM_BRAND) {
    this.C_ITEM_BRAND = C_ITEM_BRAND;
    return this;
  }
  private String C_MANUFACTURER;
  public String get_C_MANUFACTURER() {
    return C_MANUFACTURER;
  }
  public void set_C_MANUFACTURER(String C_MANUFACTURER) {
    this.C_MANUFACTURER = C_MANUFACTURER;
  }
  public SAMPLE with_C_MANUFACTURER(String C_MANUFACTURER) {
    this.C_MANUFACTURER = C_MANUFACTURER;
    return this;
  }
  private String C_COUNTRY_ORIGIN;
  public String get_C_COUNTRY_ORIGIN() {
    return C_COUNTRY_ORIGIN;
  }
  public void set_C_COUNTRY_ORIGIN(String C_COUNTRY_ORIGIN) {
    this.C_COUNTRY_ORIGIN = C_COUNTRY_ORIGIN;
  }
  public SAMPLE with_C_COUNTRY_ORIGIN(String C_COUNTRY_ORIGIN) {
    this.C_COUNTRY_ORIGIN = C_COUNTRY_ORIGIN;
    return this;
  }
  private String C_ITEM_TRADE_NAME;
  public String get_C_ITEM_TRADE_NAME() {
    return C_ITEM_TRADE_NAME;
  }
  public void set_C_ITEM_TRADE_NAME(String C_ITEM_TRADE_NAME) {
    this.C_ITEM_TRADE_NAME = C_ITEM_TRADE_NAME;
  }
  public SAMPLE with_C_ITEM_TRADE_NAME(String C_ITEM_TRADE_NAME) {
    this.C_ITEM_TRADE_NAME = C_ITEM_TRADE_NAME;
    return this;
  }
  private String C_PROCESS_ONE;
  public String get_C_PROCESS_ONE() {
    return C_PROCESS_ONE;
  }
  public void set_C_PROCESS_ONE(String C_PROCESS_ONE) {
    this.C_PROCESS_ONE = C_PROCESS_ONE;
  }
  public SAMPLE with_C_PROCESS_ONE(String C_PROCESS_ONE) {
    this.C_PROCESS_ONE = C_PROCESS_ONE;
    return this;
  }
  private String C_PROCESS_TWO;
  public String get_C_PROCESS_TWO() {
    return C_PROCESS_TWO;
  }
  public void set_C_PROCESS_TWO(String C_PROCESS_TWO) {
    this.C_PROCESS_TWO = C_PROCESS_TWO;
  }
  public SAMPLE with_C_PROCESS_TWO(String C_PROCESS_TWO) {
    this.C_PROCESS_TWO = C_PROCESS_TWO;
    return this;
  }
  private String C_SHELF_LIFE;
  public String get_C_SHELF_LIFE() {
    return C_SHELF_LIFE;
  }
  public void set_C_SHELF_LIFE(String C_SHELF_LIFE) {
    this.C_SHELF_LIFE = C_SHELF_LIFE;
  }
  public SAMPLE with_C_SHELF_LIFE(String C_SHELF_LIFE) {
    this.C_SHELF_LIFE = C_SHELF_LIFE;
    return this;
  }
  private String C_SHELF_LIFE_UNIT;
  public String get_C_SHELF_LIFE_UNIT() {
    return C_SHELF_LIFE_UNIT;
  }
  public void set_C_SHELF_LIFE_UNIT(String C_SHELF_LIFE_UNIT) {
    this.C_SHELF_LIFE_UNIT = C_SHELF_LIFE_UNIT;
  }
  public SAMPLE with_C_SHELF_LIFE_UNIT(String C_SHELF_LIFE_UNIT) {
    this.C_SHELF_LIFE_UNIT = C_SHELF_LIFE_UNIT;
    return this;
  }
  private String C_STORAGE_CONDITION;
  public String get_C_STORAGE_CONDITION() {
    return C_STORAGE_CONDITION;
  }
  public void set_C_STORAGE_CONDITION(String C_STORAGE_CONDITION) {
    this.C_STORAGE_CONDITION = C_STORAGE_CONDITION;
  }
  public SAMPLE with_C_STORAGE_CONDITION(String C_STORAGE_CONDITION) {
    this.C_STORAGE_CONDITION = C_STORAGE_CONDITION;
    return this;
  }
  private String C_WEIGHT;
  public String get_C_WEIGHT() {
    return C_WEIGHT;
  }
  public void set_C_WEIGHT(String C_WEIGHT) {
    this.C_WEIGHT = C_WEIGHT;
  }
  public SAMPLE with_C_WEIGHT(String C_WEIGHT) {
    this.C_WEIGHT = C_WEIGHT;
    return this;
  }
  private String C_WEIGHT_UNIT;
  public String get_C_WEIGHT_UNIT() {
    return C_WEIGHT_UNIT;
  }
  public void set_C_WEIGHT_UNIT(String C_WEIGHT_UNIT) {
    this.C_WEIGHT_UNIT = C_WEIGHT_UNIT;
  }
  public SAMPLE with_C_WEIGHT_UNIT(String C_WEIGHT_UNIT) {
    this.C_WEIGHT_UNIT = C_WEIGHT_UNIT;
    return this;
  }
  private String C_PACKAGING_TYPE;
  public String get_C_PACKAGING_TYPE() {
    return C_PACKAGING_TYPE;
  }
  public void set_C_PACKAGING_TYPE(String C_PACKAGING_TYPE) {
    this.C_PACKAGING_TYPE = C_PACKAGING_TYPE;
  }
  public SAMPLE with_C_PACKAGING_TYPE(String C_PACKAGING_TYPE) {
    this.C_PACKAGING_TYPE = C_PACKAGING_TYPE;
    return this;
  }
  private String C_TEST_TYPE;
  public String get_C_TEST_TYPE() {
    return C_TEST_TYPE;
  }
  public void set_C_TEST_TYPE(String C_TEST_TYPE) {
    this.C_TEST_TYPE = C_TEST_TYPE;
  }
  public SAMPLE with_C_TEST_TYPE(String C_TEST_TYPE) {
    this.C_TEST_TYPE = C_TEST_TYPE;
    return this;
  }
  private String C_EXTERNAL_REFERENCE;
  public String get_C_EXTERNAL_REFERENCE() {
    return C_EXTERNAL_REFERENCE;
  }
  public void set_C_EXTERNAL_REFERENCE(String C_EXTERNAL_REFERENCE) {
    this.C_EXTERNAL_REFERENCE = C_EXTERNAL_REFERENCE;
  }
  public SAMPLE with_C_EXTERNAL_REFERENCE(String C_EXTERNAL_REFERENCE) {
    this.C_EXTERNAL_REFERENCE = C_EXTERNAL_REFERENCE;
    return this;
  }
  private String C_NOMINAL_SIZE;
  public String get_C_NOMINAL_SIZE() {
    return C_NOMINAL_SIZE;
  }
  public void set_C_NOMINAL_SIZE(String C_NOMINAL_SIZE) {
    this.C_NOMINAL_SIZE = C_NOMINAL_SIZE;
  }
  public SAMPLE with_C_NOMINAL_SIZE(String C_NOMINAL_SIZE) {
    this.C_NOMINAL_SIZE = C_NOMINAL_SIZE;
    return this;
  }
  private String C_LAYER_MIX_TYPE;
  public String get_C_LAYER_MIX_TYPE() {
    return C_LAYER_MIX_TYPE;
  }
  public void set_C_LAYER_MIX_TYPE(String C_LAYER_MIX_TYPE) {
    this.C_LAYER_MIX_TYPE = C_LAYER_MIX_TYPE;
  }
  public SAMPLE with_C_LAYER_MIX_TYPE(String C_LAYER_MIX_TYPE) {
    this.C_LAYER_MIX_TYPE = C_LAYER_MIX_TYPE;
    return this;
  }
  private String C_SAMPLE_UNIT;
  public String get_C_SAMPLE_UNIT() {
    return C_SAMPLE_UNIT;
  }
  public void set_C_SAMPLE_UNIT(String C_SAMPLE_UNIT) {
    this.C_SAMPLE_UNIT = C_SAMPLE_UNIT;
  }
  public SAMPLE with_C_SAMPLE_UNIT(String C_SAMPLE_UNIT) {
    this.C_SAMPLE_UNIT = C_SAMPLE_UNIT;
    return this;
  }
  private Integer C_SAMP_QNTY;
  public Integer get_C_SAMP_QNTY() {
    return C_SAMP_QNTY;
  }
  public void set_C_SAMP_QNTY(Integer C_SAMP_QNTY) {
    this.C_SAMP_QNTY = C_SAMP_QNTY;
  }
  public SAMPLE with_C_SAMP_QNTY(Integer C_SAMP_QNTY) {
    this.C_SAMP_QNTY = C_SAMP_QNTY;
    return this;
  }
  private String C_SAMPLED_BY;
  public String get_C_SAMPLED_BY() {
    return C_SAMPLED_BY;
  }
  public void set_C_SAMPLED_BY(String C_SAMPLED_BY) {
    this.C_SAMPLED_BY = C_SAMPLED_BY;
  }
  public SAMPLE with_C_SAMPLED_BY(String C_SAMPLED_BY) {
    this.C_SAMPLED_BY = C_SAMPLED_BY;
    return this;
  }
  private String C_BITUMEN_LOCALSUPPLIER;
  public String get_C_BITUMEN_LOCALSUPPLIER() {
    return C_BITUMEN_LOCALSUPPLIER;
  }
  public void set_C_BITUMEN_LOCALSUPPLIER(String C_BITUMEN_LOCALSUPPLIER) {
    this.C_BITUMEN_LOCALSUPPLIER = C_BITUMEN_LOCALSUPPLIER;
  }
  public SAMPLE with_C_BITUMEN_LOCALSUPPLIER(String C_BITUMEN_LOCALSUPPLIER) {
    this.C_BITUMEN_LOCALSUPPLIER = C_BITUMEN_LOCALSUPPLIER;
    return this;
  }
  private String C_BLOCK_TOTALBUNDLES;
  public String get_C_BLOCK_TOTALBUNDLES() {
    return C_BLOCK_TOTALBUNDLES;
  }
  public void set_C_BLOCK_TOTALBUNDLES(String C_BLOCK_TOTALBUNDLES) {
    this.C_BLOCK_TOTALBUNDLES = C_BLOCK_TOTALBUNDLES;
  }
  public SAMPLE with_C_BLOCK_TOTALBUNDLES(String C_BLOCK_TOTALBUNDLES) {
    this.C_BLOCK_TOTALBUNDLES = C_BLOCK_TOTALBUNDLES;
    return this;
  }
  private String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX;
  public String get_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX() {
    return C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX;
  }
  public void set_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX(String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX) {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX;
  }
  public SAMPLE with_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX(String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX) {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX;
    return this;
  }
  private String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY;
  public String get_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY() {
    return C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY;
  }
  public void set_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY(String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY) {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY;
  }
  public SAMPLE with_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY(String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY) {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY;
    return this;
  }
  private String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ;
  public String get_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ() {
    return C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ;
  }
  public void set_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ(String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ) {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ;
  }
  public SAMPLE with_C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ(String C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ) {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ;
    return this;
  }
  private String C_BLOCK_BLOCKSPERBUNDLE;
  public String get_C_BLOCK_BLOCKSPERBUNDLE() {
    return C_BLOCK_BLOCKSPERBUNDLE;
  }
  public void set_C_BLOCK_BLOCKSPERBUNDLE(String C_BLOCK_BLOCKSPERBUNDLE) {
    this.C_BLOCK_BLOCKSPERBUNDLE = C_BLOCK_BLOCKSPERBUNDLE;
  }
  public SAMPLE with_C_BLOCK_BLOCKSPERBUNDLE(String C_BLOCK_BLOCKSPERBUNDLE) {
    this.C_BLOCK_BLOCKSPERBUNDLE = C_BLOCK_BLOCKSPERBUNDLE;
    return this;
  }
  private String C_BLOCK_RELATEDCERTIFICATIONREQUESTID;
  public String get_C_BLOCK_RELATEDCERTIFICATIONREQUESTID() {
    return C_BLOCK_RELATEDCERTIFICATIONREQUESTID;
  }
  public void set_C_BLOCK_RELATEDCERTIFICATIONREQUESTID(String C_BLOCK_RELATEDCERTIFICATIONREQUESTID) {
    this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = C_BLOCK_RELATEDCERTIFICATIONREQUESTID;
  }
  public SAMPLE with_C_BLOCK_RELATEDCERTIFICATIONREQUESTID(String C_BLOCK_RELATEDCERTIFICATIONREQUESTID) {
    this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = C_BLOCK_RELATEDCERTIFICATIONREQUESTID;
    return this;
  }
  private String C_MORTAR_WATERORCEMENTRATIO;
  public String get_C_MORTAR_WATERORCEMENTRATIO() {
    return C_MORTAR_WATERORCEMENTRATIO;
  }
  public void set_C_MORTAR_WATERORCEMENTRATIO(String C_MORTAR_WATERORCEMENTRATIO) {
    this.C_MORTAR_WATERORCEMENTRATIO = C_MORTAR_WATERORCEMENTRATIO;
  }
  public SAMPLE with_C_MORTAR_WATERORCEMENTRATIO(String C_MORTAR_WATERORCEMENTRATIO) {
    this.C_MORTAR_WATERORCEMENTRATIO = C_MORTAR_WATERORCEMENTRATIO;
    return this;
  }
  private String C_MORTAR_TYPEOFMORTAR;
  public String get_C_MORTAR_TYPEOFMORTAR() {
    return C_MORTAR_TYPEOFMORTAR;
  }
  public void set_C_MORTAR_TYPEOFMORTAR(String C_MORTAR_TYPEOFMORTAR) {
    this.C_MORTAR_TYPEOFMORTAR = C_MORTAR_TYPEOFMORTAR;
  }
  public SAMPLE with_C_MORTAR_TYPEOFMORTAR(String C_MORTAR_TYPEOFMORTAR) {
    this.C_MORTAR_TYPEOFMORTAR = C_MORTAR_TYPEOFMORTAR;
    return this;
  }
  private String C_THERMALINSULATION_NOMTHICKNESS;
  public String get_C_THERMALINSULATION_NOMTHICKNESS() {
    return C_THERMALINSULATION_NOMTHICKNESS;
  }
  public void set_C_THERMALINSULATION_NOMTHICKNESS(String C_THERMALINSULATION_NOMTHICKNESS) {
    this.C_THERMALINSULATION_NOMTHICKNESS = C_THERMALINSULATION_NOMTHICKNESS;
  }
  public SAMPLE with_C_THERMALINSULATION_NOMTHICKNESS(String C_THERMALINSULATION_NOMTHICKNESS) {
    this.C_THERMALINSULATION_NOMTHICKNESS = C_THERMALINSULATION_NOMTHICKNESS;
    return this;
  }
  private String C_THERMALINSULATION_NOMDENSITY;
  public String get_C_THERMALINSULATION_NOMDENSITY() {
    return C_THERMALINSULATION_NOMDENSITY;
  }
  public void set_C_THERMALINSULATION_NOMDENSITY(String C_THERMALINSULATION_NOMDENSITY) {
    this.C_THERMALINSULATION_NOMDENSITY = C_THERMALINSULATION_NOMDENSITY;
  }
  public SAMPLE with_C_THERMALINSULATION_NOMDENSITY(String C_THERMALINSULATION_NOMDENSITY) {
    this.C_THERMALINSULATION_NOMDENSITY = C_THERMALINSULATION_NOMDENSITY;
    return this;
  }
  private String C_THERMALINSULATION_NOMDIAMETER;
  public String get_C_THERMALINSULATION_NOMDIAMETER() {
    return C_THERMALINSULATION_NOMDIAMETER;
  }
  public void set_C_THERMALINSULATION_NOMDIAMETER(String C_THERMALINSULATION_NOMDIAMETER) {
    this.C_THERMALINSULATION_NOMDIAMETER = C_THERMALINSULATION_NOMDIAMETER;
  }
  public SAMPLE with_C_THERMALINSULATION_NOMDIAMETER(String C_THERMALINSULATION_NOMDIAMETER) {
    this.C_THERMALINSULATION_NOMDIAMETER = C_THERMALINSULATION_NOMDIAMETER;
    return this;
  }
  private String C_THERMALINSULATION_FACINGTYPE;
  public String get_C_THERMALINSULATION_FACINGTYPE() {
    return C_THERMALINSULATION_FACINGTYPE;
  }
  public void set_C_THERMALINSULATION_FACINGTYPE(String C_THERMALINSULATION_FACINGTYPE) {
    this.C_THERMALINSULATION_FACINGTYPE = C_THERMALINSULATION_FACINGTYPE;
  }
  public SAMPLE with_C_THERMALINSULATION_FACINGTYPE(String C_THERMALINSULATION_FACINGTYPE) {
    this.C_THERMALINSULATION_FACINGTYPE = C_THERMALINSULATION_FACINGTYPE;
    return this;
  }
  private String C_THERMALINSULATION_FACINGDESCRIPTION;
  public String get_C_THERMALINSULATION_FACINGDESCRIPTION() {
    return C_THERMALINSULATION_FACINGDESCRIPTION;
  }
  public void set_C_THERMALINSULATION_FACINGDESCRIPTION(String C_THERMALINSULATION_FACINGDESCRIPTION) {
    this.C_THERMALINSULATION_FACINGDESCRIPTION = C_THERMALINSULATION_FACINGDESCRIPTION;
  }
  public SAMPLE with_C_THERMALINSULATION_FACINGDESCRIPTION(String C_THERMALINSULATION_FACINGDESCRIPTION) {
    this.C_THERMALINSULATION_FACINGDESCRIPTION = C_THERMALINSULATION_FACINGDESCRIPTION;
    return this;
  }
  private String C_THERMALINSULATION_TESTTEMPORHUMIDITY;
  public String get_C_THERMALINSULATION_TESTTEMPORHUMIDITY() {
    return C_THERMALINSULATION_TESTTEMPORHUMIDITY;
  }
  public void set_C_THERMALINSULATION_TESTTEMPORHUMIDITY(String C_THERMALINSULATION_TESTTEMPORHUMIDITY) {
    this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = C_THERMALINSULATION_TESTTEMPORHUMIDITY;
  }
  public SAMPLE with_C_THERMALINSULATION_TESTTEMPORHUMIDITY(String C_THERMALINSULATION_TESTTEMPORHUMIDITY) {
    this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = C_THERMALINSULATION_TESTTEMPORHUMIDITY;
    return this;
  }
  private String C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY;
  public String get_C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY() {
    return C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY;
  }
  public void set_C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY(String C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY) {
    this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY;
  }
  public SAMPLE with_C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY(String C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY) {
    this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY;
    return this;
  }
  private String C_THERMALINSULATION_AGEOFSAMPLEDAYS;
  public String get_C_THERMALINSULATION_AGEOFSAMPLEDAYS() {
    return C_THERMALINSULATION_AGEOFSAMPLEDAYS;
  }
  public void set_C_THERMALINSULATION_AGEOFSAMPLEDAYS(String C_THERMALINSULATION_AGEOFSAMPLEDAYS) {
    this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = C_THERMALINSULATION_AGEOFSAMPLEDAYS;
  }
  public SAMPLE with_C_THERMALINSULATION_AGEOFSAMPLEDAYS(String C_THERMALINSULATION_AGEOFSAMPLEDAYS) {
    this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = C_THERMALINSULATION_AGEOFSAMPLEDAYS;
    return this;
  }
  private String C_LUBEOIL_VISCOSITYGRADE;
  public String get_C_LUBEOIL_VISCOSITYGRADE() {
    return C_LUBEOIL_VISCOSITYGRADE;
  }
  public void set_C_LUBEOIL_VISCOSITYGRADE(String C_LUBEOIL_VISCOSITYGRADE) {
    this.C_LUBEOIL_VISCOSITYGRADE = C_LUBEOIL_VISCOSITYGRADE;
  }
  public SAMPLE with_C_LUBEOIL_VISCOSITYGRADE(String C_LUBEOIL_VISCOSITYGRADE) {
    this.C_LUBEOIL_VISCOSITYGRADE = C_LUBEOIL_VISCOSITYGRADE;
    return this;
  }
  private String C_ASPHALT_REFGMB;
  public String get_C_ASPHALT_REFGMB() {
    return C_ASPHALT_REFGMB;
  }
  public void set_C_ASPHALT_REFGMB(String C_ASPHALT_REFGMB) {
    this.C_ASPHALT_REFGMB = C_ASPHALT_REFGMB;
  }
  public SAMPLE with_C_ASPHALT_REFGMB(String C_ASPHALT_REFGMB) {
    this.C_ASPHALT_REFGMB = C_ASPHALT_REFGMB;
    return this;
  }
  private String C_ASPHALT_REFGSB;
  public String get_C_ASPHALT_REFGSB() {
    return C_ASPHALT_REFGSB;
  }
  public void set_C_ASPHALT_REFGSB(String C_ASPHALT_REFGSB) {
    this.C_ASPHALT_REFGSB = C_ASPHALT_REFGSB;
  }
  public SAMPLE with_C_ASPHALT_REFGSB(String C_ASPHALT_REFGSB) {
    this.C_ASPHALT_REFGSB = C_ASPHALT_REFGSB;
    return this;
  }
  private String C_ASPHALT_REFGSE;
  public String get_C_ASPHALT_REFGSE() {
    return C_ASPHALT_REFGSE;
  }
  public void set_C_ASPHALT_REFGSE(String C_ASPHALT_REFGSE) {
    this.C_ASPHALT_REFGSE = C_ASPHALT_REFGSE;
  }
  public SAMPLE with_C_ASPHALT_REFGSE(String C_ASPHALT_REFGSE) {
    this.C_ASPHALT_REFGSE = C_ASPHALT_REFGSE;
    return this;
  }
  private String C_ASPHALT_REFGB;
  public String get_C_ASPHALT_REFGB() {
    return C_ASPHALT_REFGB;
  }
  public void set_C_ASPHALT_REFGB(String C_ASPHALT_REFGB) {
    this.C_ASPHALT_REFGB = C_ASPHALT_REFGB;
  }
  public SAMPLE with_C_ASPHALT_REFGB(String C_ASPHALT_REFGB) {
    this.C_ASPHALT_REFGB = C_ASPHALT_REFGB;
    return this;
  }
  private java.sql.Timestamp C_ASPHALT_LAYINGDATE;
  public java.sql.Timestamp get_C_ASPHALT_LAYINGDATE() {
    return C_ASPHALT_LAYINGDATE;
  }
  public void set_C_ASPHALT_LAYINGDATE(java.sql.Timestamp C_ASPHALT_LAYINGDATE) {
    this.C_ASPHALT_LAYINGDATE = C_ASPHALT_LAYINGDATE;
  }
  public SAMPLE with_C_ASPHALT_LAYINGDATE(java.sql.Timestamp C_ASPHALT_LAYINGDATE) {
    this.C_ASPHALT_LAYINGDATE = C_ASPHALT_LAYINGDATE;
    return this;
  }
  private String C_ASPHALT_REFMARSHALLREQNO;
  public String get_C_ASPHALT_REFMARSHALLREQNO() {
    return C_ASPHALT_REFMARSHALLREQNO;
  }
  public void set_C_ASPHALT_REFMARSHALLREQNO(String C_ASPHALT_REFMARSHALLREQNO) {
    this.C_ASPHALT_REFMARSHALLREQNO = C_ASPHALT_REFMARSHALLREQNO;
  }
  public SAMPLE with_C_ASPHALT_REFMARSHALLREQNO(String C_ASPHALT_REFMARSHALLREQNO) {
    this.C_ASPHALT_REFMARSHALLREQNO = C_ASPHALT_REFMARSHALLREQNO;
    return this;
  }
  private String C_ASPHALT_REFBITUMENREQNO;
  public String get_C_ASPHALT_REFBITUMENREQNO() {
    return C_ASPHALT_REFBITUMENREQNO;
  }
  public void set_C_ASPHALT_REFBITUMENREQNO(String C_ASPHALT_REFBITUMENREQNO) {
    this.C_ASPHALT_REFBITUMENREQNO = C_ASPHALT_REFBITUMENREQNO;
  }
  public SAMPLE with_C_ASPHALT_REFBITUMENREQNO(String C_ASPHALT_REFBITUMENREQNO) {
    this.C_ASPHALT_REFBITUMENREQNO = C_ASPHALT_REFBITUMENREQNO;
    return this;
  }
  private String C_ASPHALT_REFMIX;
  public String get_C_ASPHALT_REFMIX() {
    return C_ASPHALT_REFMIX;
  }
  public void set_C_ASPHALT_REFMIX(String C_ASPHALT_REFMIX) {
    this.C_ASPHALT_REFMIX = C_ASPHALT_REFMIX;
  }
  public SAMPLE with_C_ASPHALT_REFMIX(String C_ASPHALT_REFMIX) {
    this.C_ASPHALT_REFMIX = C_ASPHALT_REFMIX;
    return this;
  }
  private String C_ASPHALT_CALIBRATIONFACTOR;
  public String get_C_ASPHALT_CALIBRATIONFACTOR() {
    return C_ASPHALT_CALIBRATIONFACTOR;
  }
  public void set_C_ASPHALT_CALIBRATIONFACTOR(String C_ASPHALT_CALIBRATIONFACTOR) {
    this.C_ASPHALT_CALIBRATIONFACTOR = C_ASPHALT_CALIBRATIONFACTOR;
  }
  public SAMPLE with_C_ASPHALT_CALIBRATIONFACTOR(String C_ASPHALT_CALIBRATIONFACTOR) {
    this.C_ASPHALT_CALIBRATIONFACTOR = C_ASPHALT_CALIBRATIONFACTOR;
    return this;
  }
  private String C_ASPHALT_GRADINGORBITUMENSPECS;
  public String get_C_ASPHALT_GRADINGORBITUMENSPECS() {
    return C_ASPHALT_GRADINGORBITUMENSPECS;
  }
  public void set_C_ASPHALT_GRADINGORBITUMENSPECS(String C_ASPHALT_GRADINGORBITUMENSPECS) {
    this.C_ASPHALT_GRADINGORBITUMENSPECS = C_ASPHALT_GRADINGORBITUMENSPECS;
  }
  public SAMPLE with_C_ASPHALT_GRADINGORBITUMENSPECS(String C_ASPHALT_GRADINGORBITUMENSPECS) {
    this.C_ASPHALT_GRADINGORBITUMENSPECS = C_ASPHALT_GRADINGORBITUMENSPECS;
    return this;
  }
  private String C_ASPHALT_OTHERSPECS;
  public String get_C_ASPHALT_OTHERSPECS() {
    return C_ASPHALT_OTHERSPECS;
  }
  public void set_C_ASPHALT_OTHERSPECS(String C_ASPHALT_OTHERSPECS) {
    this.C_ASPHALT_OTHERSPECS = C_ASPHALT_OTHERSPECS;
  }
  public SAMPLE with_C_ASPHALT_OTHERSPECS(String C_ASPHALT_OTHERSPECS) {
    this.C_ASPHALT_OTHERSPECS = C_ASPHALT_OTHERSPECS;
    return this;
  }
  private String C_CEMENT_CLASSOFCEMENT;
  public String get_C_CEMENT_CLASSOFCEMENT() {
    return C_CEMENT_CLASSOFCEMENT;
  }
  public void set_C_CEMENT_CLASSOFCEMENT(String C_CEMENT_CLASSOFCEMENT) {
    this.C_CEMENT_CLASSOFCEMENT = C_CEMENT_CLASSOFCEMENT;
  }
  public SAMPLE with_C_CEMENT_CLASSOFCEMENT(String C_CEMENT_CLASSOFCEMENT) {
    this.C_CEMENT_CLASSOFCEMENT = C_CEMENT_CLASSOFCEMENT;
    return this;
  }
  private String C_CONCRETE_GRADEOFCONCRETE;
  public String get_C_CONCRETE_GRADEOFCONCRETE() {
    return C_CONCRETE_GRADEOFCONCRETE;
  }
  public void set_C_CONCRETE_GRADEOFCONCRETE(String C_CONCRETE_GRADEOFCONCRETE) {
    this.C_CONCRETE_GRADEOFCONCRETE = C_CONCRETE_GRADEOFCONCRETE;
  }
  public SAMPLE with_C_CONCRETE_GRADEOFCONCRETE(String C_CONCRETE_GRADEOFCONCRETE) {
    this.C_CONCRETE_GRADEOFCONCRETE = C_CONCRETE_GRADEOFCONCRETE;
    return this;
  }
  private String C_CONCRETE_CEMENTCONTENT;
  public String get_C_CONCRETE_CEMENTCONTENT() {
    return C_CONCRETE_CEMENTCONTENT;
  }
  public void set_C_CONCRETE_CEMENTCONTENT(String C_CONCRETE_CEMENTCONTENT) {
    this.C_CONCRETE_CEMENTCONTENT = C_CONCRETE_CEMENTCONTENT;
  }
  public SAMPLE with_C_CONCRETE_CEMENTCONTENT(String C_CONCRETE_CEMENTCONTENT) {
    this.C_CONCRETE_CEMENTCONTENT = C_CONCRETE_CEMENTCONTENT;
    return this;
  }
  private String C_CONCRETE_TESTINGAGEOFSAMPLE;
  public String get_C_CONCRETE_TESTINGAGEOFSAMPLE() {
    return C_CONCRETE_TESTINGAGEOFSAMPLE;
  }
  public void set_C_CONCRETE_TESTINGAGEOFSAMPLE(String C_CONCRETE_TESTINGAGEOFSAMPLE) {
    this.C_CONCRETE_TESTINGAGEOFSAMPLE = C_CONCRETE_TESTINGAGEOFSAMPLE;
  }
  public SAMPLE with_C_CONCRETE_TESTINGAGEOFSAMPLE(String C_CONCRETE_TESTINGAGEOFSAMPLE) {
    this.C_CONCRETE_TESTINGAGEOFSAMPLE = C_CONCRETE_TESTINGAGEOFSAMPLE;
    return this;
  }
  private java.sql.Timestamp C_CONCRETE_ESTIMATEDTESTDATE;
  public java.sql.Timestamp get_C_CONCRETE_ESTIMATEDTESTDATE() {
    return C_CONCRETE_ESTIMATEDTESTDATE;
  }
  public void set_C_CONCRETE_ESTIMATEDTESTDATE(java.sql.Timestamp C_CONCRETE_ESTIMATEDTESTDATE) {
    this.C_CONCRETE_ESTIMATEDTESTDATE = C_CONCRETE_ESTIMATEDTESTDATE;
  }
  public SAMPLE with_C_CONCRETE_ESTIMATEDTESTDATE(java.sql.Timestamp C_CONCRETE_ESTIMATEDTESTDATE) {
    this.C_CONCRETE_ESTIMATEDTESTDATE = C_CONCRETE_ESTIMATEDTESTDATE;
    return this;
  }
  private String C_CONCRETE_TRUCKNUMBER;
  public String get_C_CONCRETE_TRUCKNUMBER() {
    return C_CONCRETE_TRUCKNUMBER;
  }
  public void set_C_CONCRETE_TRUCKNUMBER(String C_CONCRETE_TRUCKNUMBER) {
    this.C_CONCRETE_TRUCKNUMBER = C_CONCRETE_TRUCKNUMBER;
  }
  public SAMPLE with_C_CONCRETE_TRUCKNUMBER(String C_CONCRETE_TRUCKNUMBER) {
    this.C_CONCRETE_TRUCKNUMBER = C_CONCRETE_TRUCKNUMBER;
    return this;
  }
  private String C_CONCRETE_PLACEOFMAKINGCUBES;
  public String get_C_CONCRETE_PLACEOFMAKINGCUBES() {
    return C_CONCRETE_PLACEOFMAKINGCUBES;
  }
  public void set_C_CONCRETE_PLACEOFMAKINGCUBES(String C_CONCRETE_PLACEOFMAKINGCUBES) {
    this.C_CONCRETE_PLACEOFMAKINGCUBES = C_CONCRETE_PLACEOFMAKINGCUBES;
  }
  public SAMPLE with_C_CONCRETE_PLACEOFMAKINGCUBES(String C_CONCRETE_PLACEOFMAKINGCUBES) {
    this.C_CONCRETE_PLACEOFMAKINGCUBES = C_CONCRETE_PLACEOFMAKINGCUBES;
    return this;
  }
  private String C_CONCRETE_EQUIPMENTTYPEUSED;
  public String get_C_CONCRETE_EQUIPMENTTYPEUSED() {
    return C_CONCRETE_EQUIPMENTTYPEUSED;
  }
  public void set_C_CONCRETE_EQUIPMENTTYPEUSED(String C_CONCRETE_EQUIPMENTTYPEUSED) {
    this.C_CONCRETE_EQUIPMENTTYPEUSED = C_CONCRETE_EQUIPMENTTYPEUSED;
  }
  public SAMPLE with_C_CONCRETE_EQUIPMENTTYPEUSED(String C_CONCRETE_EQUIPMENTTYPEUSED) {
    this.C_CONCRETE_EQUIPMENTTYPEUSED = C_CONCRETE_EQUIPMENTTYPEUSED;
    return this;
  }
  private String C_CONCRETE_CURINGORSTORAGECONDITIONS;
  public String get_C_CONCRETE_CURINGORSTORAGECONDITIONS() {
    return C_CONCRETE_CURINGORSTORAGECONDITIONS;
  }
  public void set_C_CONCRETE_CURINGORSTORAGECONDITIONS(String C_CONCRETE_CURINGORSTORAGECONDITIONS) {
    this.C_CONCRETE_CURINGORSTORAGECONDITIONS = C_CONCRETE_CURINGORSTORAGECONDITIONS;
  }
  public SAMPLE with_C_CONCRETE_CURINGORSTORAGECONDITIONS(String C_CONCRETE_CURINGORSTORAGECONDITIONS) {
    this.C_CONCRETE_CURINGORSTORAGECONDITIONS = C_CONCRETE_CURINGORSTORAGECONDITIONS;
    return this;
  }
  private String C_CONCRETE_METHODOFCOMPACTION;
  public String get_C_CONCRETE_METHODOFCOMPACTION() {
    return C_CONCRETE_METHODOFCOMPACTION;
  }
  public void set_C_CONCRETE_METHODOFCOMPACTION(String C_CONCRETE_METHODOFCOMPACTION) {
    this.C_CONCRETE_METHODOFCOMPACTION = C_CONCRETE_METHODOFCOMPACTION;
  }
  public SAMPLE with_C_CONCRETE_METHODOFCOMPACTION(String C_CONCRETE_METHODOFCOMPACTION) {
    this.C_CONCRETE_METHODOFCOMPACTION = C_CONCRETE_METHODOFCOMPACTION;
    return this;
  }
  private String C_CONCRETE_CONDITIONOFSAMPLE;
  public String get_C_CONCRETE_CONDITIONOFSAMPLE() {
    return C_CONCRETE_CONDITIONOFSAMPLE;
  }
  public void set_C_CONCRETE_CONDITIONOFSAMPLE(String C_CONCRETE_CONDITIONOFSAMPLE) {
    this.C_CONCRETE_CONDITIONOFSAMPLE = C_CONCRETE_CONDITIONOFSAMPLE;
  }
  public SAMPLE with_C_CONCRETE_CONDITIONOFSAMPLE(String C_CONCRETE_CONDITIONOFSAMPLE) {
    this.C_CONCRETE_CONDITIONOFSAMPLE = C_CONCRETE_CONDITIONOFSAMPLE;
    return this;
  }
  private String C_FRESHCONCRETE_CEMENT;
  public String get_C_FRESHCONCRETE_CEMENT() {
    return C_FRESHCONCRETE_CEMENT;
  }
  public void set_C_FRESHCONCRETE_CEMENT(String C_FRESHCONCRETE_CEMENT) {
    this.C_FRESHCONCRETE_CEMENT = C_FRESHCONCRETE_CEMENT;
  }
  public SAMPLE with_C_FRESHCONCRETE_CEMENT(String C_FRESHCONCRETE_CEMENT) {
    this.C_FRESHCONCRETE_CEMENT = C_FRESHCONCRETE_CEMENT;
    return this;
  }
  private String C_FRESHCONCRETE_CEMENTTYPE;
  public String get_C_FRESHCONCRETE_CEMENTTYPE() {
    return C_FRESHCONCRETE_CEMENTTYPE;
  }
  public void set_C_FRESHCONCRETE_CEMENTTYPE(String C_FRESHCONCRETE_CEMENTTYPE) {
    this.C_FRESHCONCRETE_CEMENTTYPE = C_FRESHCONCRETE_CEMENTTYPE;
  }
  public SAMPLE with_C_FRESHCONCRETE_CEMENTTYPE(String C_FRESHCONCRETE_CEMENTTYPE) {
    this.C_FRESHCONCRETE_CEMENTTYPE = C_FRESHCONCRETE_CEMENTTYPE;
    return this;
  }
  private String C_FRESHCONCRETE_ADMIXTURE;
  public String get_C_FRESHCONCRETE_ADMIXTURE() {
    return C_FRESHCONCRETE_ADMIXTURE;
  }
  public void set_C_FRESHCONCRETE_ADMIXTURE(String C_FRESHCONCRETE_ADMIXTURE) {
    this.C_FRESHCONCRETE_ADMIXTURE = C_FRESHCONCRETE_ADMIXTURE;
  }
  public SAMPLE with_C_FRESHCONCRETE_ADMIXTURE(String C_FRESHCONCRETE_ADMIXTURE) {
    this.C_FRESHCONCRETE_ADMIXTURE = C_FRESHCONCRETE_ADMIXTURE;
    return this;
  }
  private String C_FRESHCONCRETE_ADMIXTURETYPE;
  public String get_C_FRESHCONCRETE_ADMIXTURETYPE() {
    return C_FRESHCONCRETE_ADMIXTURETYPE;
  }
  public void set_C_FRESHCONCRETE_ADMIXTURETYPE(String C_FRESHCONCRETE_ADMIXTURETYPE) {
    this.C_FRESHCONCRETE_ADMIXTURETYPE = C_FRESHCONCRETE_ADMIXTURETYPE;
  }
  public SAMPLE with_C_FRESHCONCRETE_ADMIXTURETYPE(String C_FRESHCONCRETE_ADMIXTURETYPE) {
    this.C_FRESHCONCRETE_ADMIXTURETYPE = C_FRESHCONCRETE_ADMIXTURETYPE;
    return this;
  }
  private String C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE;
  public String get_C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE() {
    return C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE;
  }
  public void set_C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE(String C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE) {
    this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE;
  }
  public SAMPLE with_C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE(String C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE) {
    this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE;
    return this;
  }
  private String C_FRESHCONCRETE_AGGREGATE_20MM;
  public String get_C_FRESHCONCRETE_AGGREGATE_20MM() {
    return C_FRESHCONCRETE_AGGREGATE_20MM;
  }
  public void set_C_FRESHCONCRETE_AGGREGATE_20MM(String C_FRESHCONCRETE_AGGREGATE_20MM) {
    this.C_FRESHCONCRETE_AGGREGATE_20MM = C_FRESHCONCRETE_AGGREGATE_20MM;
  }
  public SAMPLE with_C_FRESHCONCRETE_AGGREGATE_20MM(String C_FRESHCONCRETE_AGGREGATE_20MM) {
    this.C_FRESHCONCRETE_AGGREGATE_20MM = C_FRESHCONCRETE_AGGREGATE_20MM;
    return this;
  }
  private String C_FRESHCONCRETE_AGGREGATE_10MM;
  public String get_C_FRESHCONCRETE_AGGREGATE_10MM() {
    return C_FRESHCONCRETE_AGGREGATE_10MM;
  }
  public void set_C_FRESHCONCRETE_AGGREGATE_10MM(String C_FRESHCONCRETE_AGGREGATE_10MM) {
    this.C_FRESHCONCRETE_AGGREGATE_10MM = C_FRESHCONCRETE_AGGREGATE_10MM;
  }
  public SAMPLE with_C_FRESHCONCRETE_AGGREGATE_10MM(String C_FRESHCONCRETE_AGGREGATE_10MM) {
    this.C_FRESHCONCRETE_AGGREGATE_10MM = C_FRESHCONCRETE_AGGREGATE_10MM;
    return this;
  }
  private String C_FRESHCONCRETE_AGGREGATE_1MM;
  public String get_C_FRESHCONCRETE_AGGREGATE_1MM() {
    return C_FRESHCONCRETE_AGGREGATE_1MM;
  }
  public void set_C_FRESHCONCRETE_AGGREGATE_1MM(String C_FRESHCONCRETE_AGGREGATE_1MM) {
    this.C_FRESHCONCRETE_AGGREGATE_1MM = C_FRESHCONCRETE_AGGREGATE_1MM;
  }
  public SAMPLE with_C_FRESHCONCRETE_AGGREGATE_1MM(String C_FRESHCONCRETE_AGGREGATE_1MM) {
    this.C_FRESHCONCRETE_AGGREGATE_1MM = C_FRESHCONCRETE_AGGREGATE_1MM;
    return this;
  }
  private String C_FRESHCONCRETE_CONCRETE_CLASS_GRADE;
  public String get_C_FRESHCONCRETE_CONCRETE_CLASS_GRADE() {
    return C_FRESHCONCRETE_CONCRETE_CLASS_GRADE;
  }
  public void set_C_FRESHCONCRETE_CONCRETE_CLASS_GRADE(String C_FRESHCONCRETE_CONCRETE_CLASS_GRADE) {
    this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = C_FRESHCONCRETE_CONCRETE_CLASS_GRADE;
  }
  public SAMPLE with_C_FRESHCONCRETE_CONCRETE_CLASS_GRADE(String C_FRESHCONCRETE_CONCRETE_CLASS_GRADE) {
    this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = C_FRESHCONCRETE_CONCRETE_CLASS_GRADE;
    return this;
  }
  private String C_SOIL_MDD;
  public String get_C_SOIL_MDD() {
    return C_SOIL_MDD;
  }
  public void set_C_SOIL_MDD(String C_SOIL_MDD) {
    this.C_SOIL_MDD = C_SOIL_MDD;
  }
  public SAMPLE with_C_SOIL_MDD(String C_SOIL_MDD) {
    this.C_SOIL_MDD = C_SOIL_MDD;
    return this;
  }
  private String C_SOIL_OMC;
  public String get_C_SOIL_OMC() {
    return C_SOIL_OMC;
  }
  public void set_C_SOIL_OMC(String C_SOIL_OMC) {
    this.C_SOIL_OMC = C_SOIL_OMC;
  }
  public SAMPLE with_C_SOIL_OMC(String C_SOIL_OMC) {
    this.C_SOIL_OMC = C_SOIL_OMC;
    return this;
  }
  private String C_SOIL_MDD_OMC_REF;
  public String get_C_SOIL_MDD_OMC_REF() {
    return C_SOIL_MDD_OMC_REF;
  }
  public void set_C_SOIL_MDD_OMC_REF(String C_SOIL_MDD_OMC_REF) {
    this.C_SOIL_MDD_OMC_REF = C_SOIL_MDD_OMC_REF;
  }
  public SAMPLE with_C_SOIL_MDD_OMC_REF(String C_SOIL_MDD_OMC_REF) {
    this.C_SOIL_MDD_OMC_REF = C_SOIL_MDD_OMC_REF;
    return this;
  }
  private String C_SOIL_BFRL;
  public String get_C_SOIL_BFRL() {
    return C_SOIL_BFRL;
  }
  public void set_C_SOIL_BFRL(String C_SOIL_BFRL) {
    this.C_SOIL_BFRL = C_SOIL_BFRL;
  }
  public SAMPLE with_C_SOIL_BFRL(String C_SOIL_BFRL) {
    this.C_SOIL_BFRL = C_SOIL_BFRL;
    return this;
  }
  private String C_SOIL_LAYER_THICKNESSMM;
  public String get_C_SOIL_LAYER_THICKNESSMM() {
    return C_SOIL_LAYER_THICKNESSMM;
  }
  public void set_C_SOIL_LAYER_THICKNESSMM(String C_SOIL_LAYER_THICKNESSMM) {
    this.C_SOIL_LAYER_THICKNESSMM = C_SOIL_LAYER_THICKNESSMM;
  }
  public SAMPLE with_C_SOIL_LAYER_THICKNESSMM(String C_SOIL_LAYER_THICKNESSMM) {
    this.C_SOIL_LAYER_THICKNESSMM = C_SOIL_LAYER_THICKNESSMM;
    return this;
  }
  private String C_SOIL_SOURCE_MINERAL_AGG;
  public String get_C_SOIL_SOURCE_MINERAL_AGG() {
    return C_SOIL_SOURCE_MINERAL_AGG;
  }
  public void set_C_SOIL_SOURCE_MINERAL_AGG(String C_SOIL_SOURCE_MINERAL_AGG) {
    this.C_SOIL_SOURCE_MINERAL_AGG = C_SOIL_SOURCE_MINERAL_AGG;
  }
  public SAMPLE with_C_SOIL_SOURCE_MINERAL_AGG(String C_SOIL_SOURCE_MINERAL_AGG) {
    this.C_SOIL_SOURCE_MINERAL_AGG = C_SOIL_SOURCE_MINERAL_AGG;
    return this;
  }
  private String C_STEEL_MANUFACTURER_CERT_NO;
  public String get_C_STEEL_MANUFACTURER_CERT_NO() {
    return C_STEEL_MANUFACTURER_CERT_NO;
  }
  public void set_C_STEEL_MANUFACTURER_CERT_NO(String C_STEEL_MANUFACTURER_CERT_NO) {
    this.C_STEEL_MANUFACTURER_CERT_NO = C_STEEL_MANUFACTURER_CERT_NO;
  }
  public SAMPLE with_C_STEEL_MANUFACTURER_CERT_NO(String C_STEEL_MANUFACTURER_CERT_NO) {
    this.C_STEEL_MANUFACTURER_CERT_NO = C_STEEL_MANUFACTURER_CERT_NO;
    return this;
  }
  private String C_STEEL_GRADE_STEEL;
  public String get_C_STEEL_GRADE_STEEL() {
    return C_STEEL_GRADE_STEEL;
  }
  public void set_C_STEEL_GRADE_STEEL(String C_STEEL_GRADE_STEEL) {
    this.C_STEEL_GRADE_STEEL = C_STEEL_GRADE_STEEL;
  }
  public SAMPLE with_C_STEEL_GRADE_STEEL(String C_STEEL_GRADE_STEEL) {
    this.C_STEEL_GRADE_STEEL = C_STEEL_GRADE_STEEL;
    return this;
  }
  private String C_STEEL_LOCAL_SUPPLIER;
  public String get_C_STEEL_LOCAL_SUPPLIER() {
    return C_STEEL_LOCAL_SUPPLIER;
  }
  public void set_C_STEEL_LOCAL_SUPPLIER(String C_STEEL_LOCAL_SUPPLIER) {
    this.C_STEEL_LOCAL_SUPPLIER = C_STEEL_LOCAL_SUPPLIER;
  }
  public SAMPLE with_C_STEEL_LOCAL_SUPPLIER(String C_STEEL_LOCAL_SUPPLIER) {
    this.C_STEEL_LOCAL_SUPPLIER = C_STEEL_LOCAL_SUPPLIER;
    return this;
  }
  private String C_STEEL_HEAT_NUMBER;
  public String get_C_STEEL_HEAT_NUMBER() {
    return C_STEEL_HEAT_NUMBER;
  }
  public void set_C_STEEL_HEAT_NUMBER(String C_STEEL_HEAT_NUMBER) {
    this.C_STEEL_HEAT_NUMBER = C_STEEL_HEAT_NUMBER;
  }
  public SAMPLE with_C_STEEL_HEAT_NUMBER(String C_STEEL_HEAT_NUMBER) {
    this.C_STEEL_HEAT_NUMBER = C_STEEL_HEAT_NUMBER;
    return this;
  }
  private String C_PRODUCT_TEST_SERV;
  public String get_C_PRODUCT_TEST_SERV() {
    return C_PRODUCT_TEST_SERV;
  }
  public void set_C_PRODUCT_TEST_SERV(String C_PRODUCT_TEST_SERV) {
    this.C_PRODUCT_TEST_SERV = C_PRODUCT_TEST_SERV;
  }
  public SAMPLE with_C_PRODUCT_TEST_SERV(String C_PRODUCT_TEST_SERV) {
    this.C_PRODUCT_TEST_SERV = C_PRODUCT_TEST_SERV;
    return this;
  }
  private String C_SAMPLING_METHOD;
  public String get_C_SAMPLING_METHOD() {
    return C_SAMPLING_METHOD;
  }
  public void set_C_SAMPLING_METHOD(String C_SAMPLING_METHOD) {
    this.C_SAMPLING_METHOD = C_SAMPLING_METHOD;
  }
  public SAMPLE with_C_SAMPLING_METHOD(String C_SAMPLING_METHOD) {
    this.C_SAMPLING_METHOD = C_SAMPLING_METHOD;
    return this;
  }
  private String C_SAMPLE_DESC;
  public String get_C_SAMPLE_DESC() {
    return C_SAMPLE_DESC;
  }
  public void set_C_SAMPLE_DESC(String C_SAMPLE_DESC) {
    this.C_SAMPLE_DESC = C_SAMPLE_DESC;
  }
  public SAMPLE with_C_SAMPLE_DESC(String C_SAMPLE_DESC) {
    this.C_SAMPLE_DESC = C_SAMPLE_DESC;
    return this;
  }
  private String C_BATCH_SIZE;
  public String get_C_BATCH_SIZE() {
    return C_BATCH_SIZE;
  }
  public void set_C_BATCH_SIZE(String C_BATCH_SIZE) {
    this.C_BATCH_SIZE = C_BATCH_SIZE;
  }
  public SAMPLE with_C_BATCH_SIZE(String C_BATCH_SIZE) {
    this.C_BATCH_SIZE = C_BATCH_SIZE;
    return this;
  }
  private String C_UNITNO;
  public String get_C_UNITNO() {
    return C_UNITNO;
  }
  public void set_C_UNITNO(String C_UNITNO) {
    this.C_UNITNO = C_UNITNO;
  }
  public SAMPLE with_C_UNITNO(String C_UNITNO) {
    this.C_UNITNO = C_UNITNO;
    return this;
  }
  private String C_UNITSIZE;
  public String get_C_UNITSIZE() {
    return C_UNITSIZE;
  }
  public void set_C_UNITSIZE(String C_UNITSIZE) {
    this.C_UNITSIZE = C_UNITSIZE;
  }
  public SAMPLE with_C_UNITSIZE(String C_UNITSIZE) {
    this.C_UNITSIZE = C_UNITSIZE;
    return this;
  }
  private String C_NO_INCREMENT;
  public String get_C_NO_INCREMENT() {
    return C_NO_INCREMENT;
  }
  public void set_C_NO_INCREMENT(String C_NO_INCREMENT) {
    this.C_NO_INCREMENT = C_NO_INCREMENT;
  }
  public SAMPLE with_C_NO_INCREMENT(String C_NO_INCREMENT) {
    this.C_NO_INCREMENT = C_NO_INCREMENT;
    return this;
  }
  private Integer C_MORE_SAMPLE_NOTE;
  public Integer get_C_MORE_SAMPLE_NOTE() {
    return C_MORE_SAMPLE_NOTE;
  }
  public void set_C_MORE_SAMPLE_NOTE(Integer C_MORE_SAMPLE_NOTE) {
    this.C_MORE_SAMPLE_NOTE = C_MORE_SAMPLE_NOTE;
  }
  public SAMPLE with_C_MORE_SAMPLE_NOTE(Integer C_MORE_SAMPLE_NOTE) {
    this.C_MORE_SAMPLE_NOTE = C_MORE_SAMPLE_NOTE;
    return this;
  }
  private String C_STAGES;
  public String get_C_STAGES() {
    return C_STAGES;
  }
  public void set_C_STAGES(String C_STAGES) {
    this.C_STAGES = C_STAGES;
  }
  public SAMPLE with_C_STAGES(String C_STAGES) {
    this.C_STAGES = C_STAGES;
    return this;
  }
  private String C_RETURN_NOTE;
  public String get_C_RETURN_NOTE() {
    return C_RETURN_NOTE;
  }
  public void set_C_RETURN_NOTE(String C_RETURN_NOTE) {
    this.C_RETURN_NOTE = C_RETURN_NOTE;
  }
  public SAMPLE with_C_RETURN_NOTE(String C_RETURN_NOTE) {
    this.C_RETURN_NOTE = C_RETURN_NOTE;
    return this;
  }
  private String C_DISCARD;
  public String get_C_DISCARD() {
    return C_DISCARD;
  }
  public void set_C_DISCARD(String C_DISCARD) {
    this.C_DISCARD = C_DISCARD;
  }
  public SAMPLE with_C_DISCARD(String C_DISCARD) {
    this.C_DISCARD = C_DISCARD;
    return this;
  }
  private java.sql.Timestamp C_DISCARD_DATE;
  public java.sql.Timestamp get_C_DISCARD_DATE() {
    return C_DISCARD_DATE;
  }
  public void set_C_DISCARD_DATE(java.sql.Timestamp C_DISCARD_DATE) {
    this.C_DISCARD_DATE = C_DISCARD_DATE;
  }
  public SAMPLE with_C_DISCARD_DATE(java.sql.Timestamp C_DISCARD_DATE) {
    this.C_DISCARD_DATE = C_DISCARD_DATE;
    return this;
  }
  private String C_DISCARD_BY;
  public String get_C_DISCARD_BY() {
    return C_DISCARD_BY;
  }
  public void set_C_DISCARD_BY(String C_DISCARD_BY) {
    this.C_DISCARD_BY = C_DISCARD_BY;
  }
  public SAMPLE with_C_DISCARD_BY(String C_DISCARD_BY) {
    this.C_DISCARD_BY = C_DISCARD_BY;
    return this;
  }
  private String C_TRAVEL_CALCULATED;
  public String get_C_TRAVEL_CALCULATED() {
    return C_TRAVEL_CALCULATED;
  }
  public void set_C_TRAVEL_CALCULATED(String C_TRAVEL_CALCULATED) {
    this.C_TRAVEL_CALCULATED = C_TRAVEL_CALCULATED;
  }
  public SAMPLE with_C_TRAVEL_CALCULATED(String C_TRAVEL_CALCULATED) {
    this.C_TRAVEL_CALCULATED = C_TRAVEL_CALCULATED;
    return this;
  }
  private String C_PHYSICAL_OBSERVATION;
  public String get_C_PHYSICAL_OBSERVATION() {
    return C_PHYSICAL_OBSERVATION;
  }
  public void set_C_PHYSICAL_OBSERVATION(String C_PHYSICAL_OBSERVATION) {
    this.C_PHYSICAL_OBSERVATION = C_PHYSICAL_OBSERVATION;
  }
  public SAMPLE with_C_PHYSICAL_OBSERVATION(String C_PHYSICAL_OBSERVATION) {
    this.C_PHYSICAL_OBSERVATION = C_PHYSICAL_OBSERVATION;
    return this;
  }
  private String C_SENDER_NO;
  public String get_C_SENDER_NO() {
    return C_SENDER_NO;
  }
  public void set_C_SENDER_NO(String C_SENDER_NO) {
    this.C_SENDER_NO = C_SENDER_NO;
  }
  public SAMPLE with_C_SENDER_NO(String C_SENDER_NO) {
    this.C_SENDER_NO = C_SENDER_NO;
    return this;
  }
  private String C_REF_SENDER_NO;
  public String get_C_REF_SENDER_NO() {
    return C_REF_SENDER_NO;
  }
  public void set_C_REF_SENDER_NO(String C_REF_SENDER_NO) {
    this.C_REF_SENDER_NO = C_REF_SENDER_NO;
  }
  public SAMPLE with_C_REF_SENDER_NO(String C_REF_SENDER_NO) {
    this.C_REF_SENDER_NO = C_REF_SENDER_NO;
    return this;
  }
  private String C_TESTLAB;
  public String get_C_TESTLAB() {
    return C_TESTLAB;
  }
  public void set_C_TESTLAB(String C_TESTLAB) {
    this.C_TESTLAB = C_TESTLAB;
  }
  public SAMPLE with_C_TESTLAB(String C_TESTLAB) {
    this.C_TESTLAB = C_TESTLAB;
    return this;
  }
  private String C_PRIMARY_RESULT;
  public String get_C_PRIMARY_RESULT() {
    return C_PRIMARY_RESULT;
  }
  public void set_C_PRIMARY_RESULT(String C_PRIMARY_RESULT) {
    this.C_PRIMARY_RESULT = C_PRIMARY_RESULT;
  }
  public SAMPLE with_C_PRIMARY_RESULT(String C_PRIMARY_RESULT) {
    this.C_PRIMARY_RESULT = C_PRIMARY_RESULT;
    return this;
  }
  private String C_PRIMARY_REPORT_NO;
  public String get_C_PRIMARY_REPORT_NO() {
    return C_PRIMARY_REPORT_NO;
  }
  public void set_C_PRIMARY_REPORT_NO(String C_PRIMARY_REPORT_NO) {
    this.C_PRIMARY_REPORT_NO = C_PRIMARY_REPORT_NO;
  }
  public SAMPLE with_C_PRIMARY_REPORT_NO(String C_PRIMARY_REPORT_NO) {
    this.C_PRIMARY_REPORT_NO = C_PRIMARY_REPORT_NO;
    return this;
  }
  private String C_REF_RESULT;
  public String get_C_REF_RESULT() {
    return C_REF_RESULT;
  }
  public void set_C_REF_RESULT(String C_REF_RESULT) {
    this.C_REF_RESULT = C_REF_RESULT;
  }
  public SAMPLE with_C_REF_RESULT(String C_REF_RESULT) {
    this.C_REF_RESULT = C_REF_RESULT;
    return this;
  }
  private String C_REF_REPORT_NO;
  public String get_C_REF_REPORT_NO() {
    return C_REF_REPORT_NO;
  }
  public void set_C_REF_REPORT_NO(String C_REF_REPORT_NO) {
    this.C_REF_REPORT_NO = C_REF_REPORT_NO;
  }
  public SAMPLE with_C_REF_REPORT_NO(String C_REF_REPORT_NO) {
    this.C_REF_REPORT_NO = C_REF_REPORT_NO;
    return this;
  }
  private String C_DETERMINATION;
  public String get_C_DETERMINATION() {
    return C_DETERMINATION;
  }
  public void set_C_DETERMINATION(String C_DETERMINATION) {
    this.C_DETERMINATION = C_DETERMINATION;
  }
  public SAMPLE with_C_DETERMINATION(String C_DETERMINATION) {
    this.C_DETERMINATION = C_DETERMINATION;
    return this;
  }
  private String C_EQUIPMENT_TYPE;
  public String get_C_EQUIPMENT_TYPE() {
    return C_EQUIPMENT_TYPE;
  }
  public void set_C_EQUIPMENT_TYPE(String C_EQUIPMENT_TYPE) {
    this.C_EQUIPMENT_TYPE = C_EQUIPMENT_TYPE;
  }
  public SAMPLE with_C_EQUIPMENT_TYPE(String C_EQUIPMENT_TYPE) {
    this.C_EQUIPMENT_TYPE = C_EQUIPMENT_TYPE;
    return this;
  }
  private String C_EQUIPMENT_CLASS;
  public String get_C_EQUIPMENT_CLASS() {
    return C_EQUIPMENT_CLASS;
  }
  public void set_C_EQUIPMENT_CLASS(String C_EQUIPMENT_CLASS) {
    this.C_EQUIPMENT_CLASS = C_EQUIPMENT_CLASS;
  }
  public SAMPLE with_C_EQUIPMENT_CLASS(String C_EQUIPMENT_CLASS) {
    this.C_EQUIPMENT_CLASS = C_EQUIPMENT_CLASS;
    return this;
  }
  private String C_CAPACITY;
  public String get_C_CAPACITY() {
    return C_CAPACITY;
  }
  public void set_C_CAPACITY(String C_CAPACITY) {
    this.C_CAPACITY = C_CAPACITY;
  }
  public SAMPLE with_C_CAPACITY(String C_CAPACITY) {
    this.C_CAPACITY = C_CAPACITY;
    return this;
  }
  private String C_NO_OF_MEASUREMENTS;
  public String get_C_NO_OF_MEASUREMENTS() {
    return C_NO_OF_MEASUREMENTS;
  }
  public void set_C_NO_OF_MEASUREMENTS(String C_NO_OF_MEASUREMENTS) {
    this.C_NO_OF_MEASUREMENTS = C_NO_OF_MEASUREMENTS;
  }
  public SAMPLE with_C_NO_OF_MEASUREMENTS(String C_NO_OF_MEASUREMENTS) {
    this.C_NO_OF_MEASUREMENTS = C_NO_OF_MEASUREMENTS;
    return this;
  }
  private java.sql.Timestamp C_REQ_DATE_CALIB;
  public java.sql.Timestamp get_C_REQ_DATE_CALIB() {
    return C_REQ_DATE_CALIB;
  }
  public void set_C_REQ_DATE_CALIB(java.sql.Timestamp C_REQ_DATE_CALIB) {
    this.C_REQ_DATE_CALIB = C_REQ_DATE_CALIB;
  }
  public SAMPLE with_C_REQ_DATE_CALIB(java.sql.Timestamp C_REQ_DATE_CALIB) {
    this.C_REQ_DATE_CALIB = C_REQ_DATE_CALIB;
    return this;
  }
  private String C_CALIB_SITE;
  public String get_C_CALIB_SITE() {
    return C_CALIB_SITE;
  }
  public void set_C_CALIB_SITE(String C_CALIB_SITE) {
    this.C_CALIB_SITE = C_CALIB_SITE;
  }
  public SAMPLE with_C_CALIB_SITE(String C_CALIB_SITE) {
    this.C_CALIB_SITE = C_CALIB_SITE;
    return this;
  }
  private String C_CALIB_METHOD;
  public String get_C_CALIB_METHOD() {
    return C_CALIB_METHOD;
  }
  public void set_C_CALIB_METHOD(String C_CALIB_METHOD) {
    this.C_CALIB_METHOD = C_CALIB_METHOD;
  }
  public SAMPLE with_C_CALIB_METHOD(String C_CALIB_METHOD) {
    this.C_CALIB_METHOD = C_CALIB_METHOD;
    return this;
  }
  private String C_ASSET_NAME;
  public String get_C_ASSET_NAME() {
    return C_ASSET_NAME;
  }
  public void set_C_ASSET_NAME(String C_ASSET_NAME) {
    this.C_ASSET_NAME = C_ASSET_NAME;
  }
  public SAMPLE with_C_ASSET_NAME(String C_ASSET_NAME) {
    this.C_ASSET_NAME = C_ASSET_NAME;
    return this;
  }
  private String C_MODEL_NO;
  public String get_C_MODEL_NO() {
    return C_MODEL_NO;
  }
  public void set_C_MODEL_NO(String C_MODEL_NO) {
    this.C_MODEL_NO = C_MODEL_NO;
  }
  public SAMPLE with_C_MODEL_NO(String C_MODEL_NO) {
    this.C_MODEL_NO = C_MODEL_NO;
    return this;
  }
  private java.sql.Timestamp C_PURCHASE_DATE;
  public java.sql.Timestamp get_C_PURCHASE_DATE() {
    return C_PURCHASE_DATE;
  }
  public void set_C_PURCHASE_DATE(java.sql.Timestamp C_PURCHASE_DATE) {
    this.C_PURCHASE_DATE = C_PURCHASE_DATE;
  }
  public SAMPLE with_C_PURCHASE_DATE(java.sql.Timestamp C_PURCHASE_DATE) {
    this.C_PURCHASE_DATE = C_PURCHASE_DATE;
    return this;
  }
  private java.math.BigDecimal C_PURCHASE_PRICE;
  public java.math.BigDecimal get_C_PURCHASE_PRICE() {
    return C_PURCHASE_PRICE;
  }
  public void set_C_PURCHASE_PRICE(java.math.BigDecimal C_PURCHASE_PRICE) {
    this.C_PURCHASE_PRICE = C_PURCHASE_PRICE;
  }
  public SAMPLE with_C_PURCHASE_PRICE(java.math.BigDecimal C_PURCHASE_PRICE) {
    this.C_PURCHASE_PRICE = C_PURCHASE_PRICE;
    return this;
  }
  private java.sql.Timestamp C_DELIVERY_RECD;
  public java.sql.Timestamp get_C_DELIVERY_RECD() {
    return C_DELIVERY_RECD;
  }
  public void set_C_DELIVERY_RECD(java.sql.Timestamp C_DELIVERY_RECD) {
    this.C_DELIVERY_RECD = C_DELIVERY_RECD;
  }
  public SAMPLE with_C_DELIVERY_RECD(java.sql.Timestamp C_DELIVERY_RECD) {
    this.C_DELIVERY_RECD = C_DELIVERY_RECD;
    return this;
  }
  private java.sql.Timestamp C_DATE_OF_INSTALL;
  public java.sql.Timestamp get_C_DATE_OF_INSTALL() {
    return C_DATE_OF_INSTALL;
  }
  public void set_C_DATE_OF_INSTALL(java.sql.Timestamp C_DATE_OF_INSTALL) {
    this.C_DATE_OF_INSTALL = C_DATE_OF_INSTALL;
  }
  public SAMPLE with_C_DATE_OF_INSTALL(java.sql.Timestamp C_DATE_OF_INSTALL) {
    this.C_DATE_OF_INSTALL = C_DATE_OF_INSTALL;
    return this;
  }
  private Integer C_TAG_NO;
  public Integer get_C_TAG_NO() {
    return C_TAG_NO;
  }
  public void set_C_TAG_NO(Integer C_TAG_NO) {
    this.C_TAG_NO = C_TAG_NO;
  }
  public SAMPLE with_C_TAG_NO(Integer C_TAG_NO) {
    this.C_TAG_NO = C_TAG_NO;
    return this;
  }
  private Integer C_SERIAL_NO;
  public Integer get_C_SERIAL_NO() {
    return C_SERIAL_NO;
  }
  public void set_C_SERIAL_NO(Integer C_SERIAL_NO) {
    this.C_SERIAL_NO = C_SERIAL_NO;
  }
  public SAMPLE with_C_SERIAL_NO(Integer C_SERIAL_NO) {
    this.C_SERIAL_NO = C_SERIAL_NO;
    return this;
  }
  private Integer C_NO_OF_ACCESSORIES;
  public Integer get_C_NO_OF_ACCESSORIES() {
    return C_NO_OF_ACCESSORIES;
  }
  public void set_C_NO_OF_ACCESSORIES(Integer C_NO_OF_ACCESSORIES) {
    this.C_NO_OF_ACCESSORIES = C_NO_OF_ACCESSORIES;
  }
  public SAMPLE with_C_NO_OF_ACCESSORIES(Integer C_NO_OF_ACCESSORIES) {
    this.C_NO_OF_ACCESSORIES = C_NO_OF_ACCESSORIES;
    return this;
  }
  private String C_ACCESSORY_DETAIL;
  public String get_C_ACCESSORY_DETAIL() {
    return C_ACCESSORY_DETAIL;
  }
  public void set_C_ACCESSORY_DETAIL(String C_ACCESSORY_DETAIL) {
    this.C_ACCESSORY_DETAIL = C_ACCESSORY_DETAIL;
  }
  public SAMPLE with_C_ACCESSORY_DETAIL(String C_ACCESSORY_DETAIL) {
    this.C_ACCESSORY_DETAIL = C_ACCESSORY_DETAIL;
    return this;
  }
  private String C_ADDR_ROOM_NO;
  public String get_C_ADDR_ROOM_NO() {
    return C_ADDR_ROOM_NO;
  }
  public void set_C_ADDR_ROOM_NO(String C_ADDR_ROOM_NO) {
    this.C_ADDR_ROOM_NO = C_ADDR_ROOM_NO;
  }
  public SAMPLE with_C_ADDR_ROOM_NO(String C_ADDR_ROOM_NO) {
    this.C_ADDR_ROOM_NO = C_ADDR_ROOM_NO;
    return this;
  }
  private java.sql.Timestamp C_WARRANTY_EXP_DATE;
  public java.sql.Timestamp get_C_WARRANTY_EXP_DATE() {
    return C_WARRANTY_EXP_DATE;
  }
  public void set_C_WARRANTY_EXP_DATE(java.sql.Timestamp C_WARRANTY_EXP_DATE) {
    this.C_WARRANTY_EXP_DATE = C_WARRANTY_EXP_DATE;
  }
  public SAMPLE with_C_WARRANTY_EXP_DATE(java.sql.Timestamp C_WARRANTY_EXP_DATE) {
    this.C_WARRANTY_EXP_DATE = C_WARRANTY_EXP_DATE;
    return this;
  }
  private String C_UNDER_CONTRACT;
  public String get_C_UNDER_CONTRACT() {
    return C_UNDER_CONTRACT;
  }
  public void set_C_UNDER_CONTRACT(String C_UNDER_CONTRACT) {
    this.C_UNDER_CONTRACT = C_UNDER_CONTRACT;
  }
  public SAMPLE with_C_UNDER_CONTRACT(String C_UNDER_CONTRACT) {
    this.C_UNDER_CONTRACT = C_UNDER_CONTRACT;
    return this;
  }
  private String C_CONTRACT_NO;
  public String get_C_CONTRACT_NO() {
    return C_CONTRACT_NO;
  }
  public void set_C_CONTRACT_NO(String C_CONTRACT_NO) {
    this.C_CONTRACT_NO = C_CONTRACT_NO;
  }
  public SAMPLE with_C_CONTRACT_NO(String C_CONTRACT_NO) {
    this.C_CONTRACT_NO = C_CONTRACT_NO;
    return this;
  }
  private String C_CONTRACT_COMP;
  public String get_C_CONTRACT_COMP() {
    return C_CONTRACT_COMP;
  }
  public void set_C_CONTRACT_COMP(String C_CONTRACT_COMP) {
    this.C_CONTRACT_COMP = C_CONTRACT_COMP;
  }
  public SAMPLE with_C_CONTRACT_COMP(String C_CONTRACT_COMP) {
    this.C_CONTRACT_COMP = C_CONTRACT_COMP;
    return this;
  }
  private java.sql.Timestamp C_CONTRACT_START;
  public java.sql.Timestamp get_C_CONTRACT_START() {
    return C_CONTRACT_START;
  }
  public void set_C_CONTRACT_START(java.sql.Timestamp C_CONTRACT_START) {
    this.C_CONTRACT_START = C_CONTRACT_START;
  }
  public SAMPLE with_C_CONTRACT_START(java.sql.Timestamp C_CONTRACT_START) {
    this.C_CONTRACT_START = C_CONTRACT_START;
    return this;
  }
  private java.sql.Timestamp C_CONTRACT_END;
  public java.sql.Timestamp get_C_CONTRACT_END() {
    return C_CONTRACT_END;
  }
  public void set_C_CONTRACT_END(java.sql.Timestamp C_CONTRACT_END) {
    this.C_CONTRACT_END = C_CONTRACT_END;
  }
  public SAMPLE with_C_CONTRACT_END(java.sql.Timestamp C_CONTRACT_END) {
    this.C_CONTRACT_END = C_CONTRACT_END;
    return this;
  }
  private String C_CALIB_TYPE;
  public String get_C_CALIB_TYPE() {
    return C_CALIB_TYPE;
  }
  public void set_C_CALIB_TYPE(String C_CALIB_TYPE) {
    this.C_CALIB_TYPE = C_CALIB_TYPE;
  }
  public SAMPLE with_C_CALIB_TYPE(String C_CALIB_TYPE) {
    this.C_CALIB_TYPE = C_CALIB_TYPE;
    return this;
  }
  private String C_AGE_GROUP_LABEL;
  public String get_C_AGE_GROUP_LABEL() {
    return C_AGE_GROUP_LABEL;
  }
  public void set_C_AGE_GROUP_LABEL(String C_AGE_GROUP_LABEL) {
    this.C_AGE_GROUP_LABEL = C_AGE_GROUP_LABEL;
  }
  public SAMPLE with_C_AGE_GROUP_LABEL(String C_AGE_GROUP_LABEL) {
    this.C_AGE_GROUP_LABEL = C_AGE_GROUP_LABEL;
    return this;
  }
  private String C_AGE_GROUP_TEST;
  public String get_C_AGE_GROUP_TEST() {
    return C_AGE_GROUP_TEST;
  }
  public void set_C_AGE_GROUP_TEST(String C_AGE_GROUP_TEST) {
    this.C_AGE_GROUP_TEST = C_AGE_GROUP_TEST;
  }
  public SAMPLE with_C_AGE_GROUP_TEST(String C_AGE_GROUP_TEST) {
    this.C_AGE_GROUP_TEST = C_AGE_GROUP_TEST;
    return this;
  }
  private String C_TOYS_DIMENSION;
  public String get_C_TOYS_DIMENSION() {
    return C_TOYS_DIMENSION;
  }
  public void set_C_TOYS_DIMENSION(String C_TOYS_DIMENSION) {
    this.C_TOYS_DIMENSION = C_TOYS_DIMENSION;
  }
  public SAMPLE with_C_TOYS_DIMENSION(String C_TOYS_DIMENSION) {
    this.C_TOYS_DIMENSION = C_TOYS_DIMENSION;
    return this;
  }
  private String C_TOYS_FEATURES;
  public String get_C_TOYS_FEATURES() {
    return C_TOYS_FEATURES;
  }
  public void set_C_TOYS_FEATURES(String C_TOYS_FEATURES) {
    this.C_TOYS_FEATURES = C_TOYS_FEATURES;
  }
  public SAMPLE with_C_TOYS_FEATURES(String C_TOYS_FEATURES) {
    this.C_TOYS_FEATURES = C_TOYS_FEATURES;
    return this;
  }
  private String C_TOYS_LABEL_DETAILS;
  public String get_C_TOYS_LABEL_DETAILS() {
    return C_TOYS_LABEL_DETAILS;
  }
  public void set_C_TOYS_LABEL_DETAILS(String C_TOYS_LABEL_DETAILS) {
    this.C_TOYS_LABEL_DETAILS = C_TOYS_LABEL_DETAILS;
  }
  public SAMPLE with_C_TOYS_LABEL_DETAILS(String C_TOYS_LABEL_DETAILS) {
    this.C_TOYS_LABEL_DETAILS = C_TOYS_LABEL_DETAILS;
    return this;
  }
  private String C_TEXTILE_CLASS;
  public String get_C_TEXTILE_CLASS() {
    return C_TEXTILE_CLASS;
  }
  public void set_C_TEXTILE_CLASS(String C_TEXTILE_CLASS) {
    this.C_TEXTILE_CLASS = C_TEXTILE_CLASS;
  }
  public SAMPLE with_C_TEXTILE_CLASS(String C_TEXTILE_CLASS) {
    this.C_TEXTILE_CLASS = C_TEXTILE_CLASS;
    return this;
  }
  private String C_TEXTILE_TYPE;
  public String get_C_TEXTILE_TYPE() {
    return C_TEXTILE_TYPE;
  }
  public void set_C_TEXTILE_TYPE(String C_TEXTILE_TYPE) {
    this.C_TEXTILE_TYPE = C_TEXTILE_TYPE;
  }
  public SAMPLE with_C_TEXTILE_TYPE(String C_TEXTILE_TYPE) {
    this.C_TEXTILE_TYPE = C_TEXTILE_TYPE;
    return this;
  }
  private String C_MONTAJI_REGISTERED;
  public String get_C_MONTAJI_REGISTERED() {
    return C_MONTAJI_REGISTERED;
  }
  public void set_C_MONTAJI_REGISTERED(String C_MONTAJI_REGISTERED) {
    this.C_MONTAJI_REGISTERED = C_MONTAJI_REGISTERED;
  }
  public SAMPLE with_C_MONTAJI_REGISTERED(String C_MONTAJI_REGISTERED) {
    this.C_MONTAJI_REGISTERED = C_MONTAJI_REGISTERED;
    return this;
  }
  private String C_MONTAJI_REF;
  public String get_C_MONTAJI_REF() {
    return C_MONTAJI_REF;
  }
  public void set_C_MONTAJI_REF(String C_MONTAJI_REF) {
    this.C_MONTAJI_REF = C_MONTAJI_REF;
  }
  public SAMPLE with_C_MONTAJI_REF(String C_MONTAJI_REF) {
    this.C_MONTAJI_REF = C_MONTAJI_REF;
    return this;
  }
  private String C_SEALING_PACK;
  public String get_C_SEALING_PACK() {
    return C_SEALING_PACK;
  }
  public void set_C_SEALING_PACK(String C_SEALING_PACK) {
    this.C_SEALING_PACK = C_SEALING_PACK;
  }
  public SAMPLE with_C_SEALING_PACK(String C_SEALING_PACK) {
    this.C_SEALING_PACK = C_SEALING_PACK;
    return this;
  }
  private String C_TYPE;
  public String get_C_TYPE() {
    return C_TYPE;
  }
  public void set_C_TYPE(String C_TYPE) {
    this.C_TYPE = C_TYPE;
  }
  public SAMPLE with_C_TYPE(String C_TYPE) {
    this.C_TYPE = C_TYPE;
    return this;
  }
  private String C_FORM;
  public String get_C_FORM() {
    return C_FORM;
  }
  public void set_C_FORM(String C_FORM) {
    this.C_FORM = C_FORM;
  }
  public SAMPLE with_C_FORM(String C_FORM) {
    this.C_FORM = C_FORM;
    return this;
  }
  private String C_FORM_TYPE;
  public String get_C_FORM_TYPE() {
    return C_FORM_TYPE;
  }
  public void set_C_FORM_TYPE(String C_FORM_TYPE) {
    this.C_FORM_TYPE = C_FORM_TYPE;
  }
  public SAMPLE with_C_FORM_TYPE(String C_FORM_TYPE) {
    this.C_FORM_TYPE = C_FORM_TYPE;
    return this;
  }
  private String C_FINENESS;
  public String get_C_FINENESS() {
    return C_FINENESS;
  }
  public void set_C_FINENESS(String C_FINENESS) {
    this.C_FINENESS = C_FINENESS;
  }
  public SAMPLE with_C_FINENESS(String C_FINENESS) {
    this.C_FINENESS = C_FINENESS;
    return this;
  }
  private String C_SHAPE;
  public String get_C_SHAPE() {
    return C_SHAPE;
  }
  public void set_C_SHAPE(String C_SHAPE) {
    this.C_SHAPE = C_SHAPE;
  }
  public SAMPLE with_C_SHAPE(String C_SHAPE) {
    this.C_SHAPE = C_SHAPE;
    return this;
  }
  private String C_LABORATORY;
  public String get_C_LABORATORY() {
    return C_LABORATORY;
  }
  public void set_C_LABORATORY(String C_LABORATORY) {
    this.C_LABORATORY = C_LABORATORY;
  }
  public SAMPLE with_C_LABORATORY(String C_LABORATORY) {
    this.C_LABORATORY = C_LABORATORY;
    return this;
  }
  private String C_CEMARK;
  public String get_C_CEMARK() {
    return C_CEMARK;
  }
  public void set_C_CEMARK(String C_CEMARK) {
    this.C_CEMARK = C_CEMARK;
  }
  public SAMPLE with_C_CEMARK(String C_CEMARK) {
    this.C_CEMARK = C_CEMARK;
    return this;
  }
  private Integer C_AGE;
  public Integer get_C_AGE() {
    return C_AGE;
  }
  public void set_C_AGE(Integer C_AGE) {
    this.C_AGE = C_AGE;
  }
  public SAMPLE with_C_AGE(Integer C_AGE) {
    this.C_AGE = C_AGE;
    return this;
  }
  private String C_GENDER;
  public String get_C_GENDER() {
    return C_GENDER;
  }
  public void set_C_GENDER(String C_GENDER) {
    this.C_GENDER = C_GENDER;
  }
  public SAMPLE with_C_GENDER(String C_GENDER) {
    this.C_GENDER = C_GENDER;
    return this;
  }
  private String C_OWNER_NAME;
  public String get_C_OWNER_NAME() {
    return C_OWNER_NAME;
  }
  public void set_C_OWNER_NAME(String C_OWNER_NAME) {
    this.C_OWNER_NAME = C_OWNER_NAME;
  }
  public SAMPLE with_C_OWNER_NAME(String C_OWNER_NAME) {
    this.C_OWNER_NAME = C_OWNER_NAME;
    return this;
  }
  private String C_CONSIGNMENT_NO;
  public String get_C_CONSIGNMENT_NO() {
    return C_CONSIGNMENT_NO;
  }
  public void set_C_CONSIGNMENT_NO(String C_CONSIGNMENT_NO) {
    this.C_CONSIGNMENT_NO = C_CONSIGNMENT_NO;
  }
  public SAMPLE with_C_CONSIGNMENT_NO(String C_CONSIGNMENT_NO) {
    this.C_CONSIGNMENT_NO = C_CONSIGNMENT_NO;
    return this;
  }
  private String C_SAMPLE_ORIGIN;
  public String get_C_SAMPLE_ORIGIN() {
    return C_SAMPLE_ORIGIN;
  }
  public void set_C_SAMPLE_ORIGIN(String C_SAMPLE_ORIGIN) {
    this.C_SAMPLE_ORIGIN = C_SAMPLE_ORIGIN;
  }
  public SAMPLE with_C_SAMPLE_ORIGIN(String C_SAMPLE_ORIGIN) {
    this.C_SAMPLE_ORIGIN = C_SAMPLE_ORIGIN;
    return this;
  }
  private String C_MEAT_REQ_TYP;
  public String get_C_MEAT_REQ_TYP() {
    return C_MEAT_REQ_TYP;
  }
  public void set_C_MEAT_REQ_TYP(String C_MEAT_REQ_TYP) {
    this.C_MEAT_REQ_TYP = C_MEAT_REQ_TYP;
  }
  public SAMPLE with_C_MEAT_REQ_TYP(String C_MEAT_REQ_TYP) {
    this.C_MEAT_REQ_TYP = C_MEAT_REQ_TYP;
    return this;
  }
  private String C_PURPOSE_TEST;
  public String get_C_PURPOSE_TEST() {
    return C_PURPOSE_TEST;
  }
  public void set_C_PURPOSE_TEST(String C_PURPOSE_TEST) {
    this.C_PURPOSE_TEST = C_PURPOSE_TEST;
  }
  public SAMPLE with_C_PURPOSE_TEST(String C_PURPOSE_TEST) {
    this.C_PURPOSE_TEST = C_PURPOSE_TEST;
    return this;
  }
  private String C_COLL_CLARITY;
  public String get_C_COLL_CLARITY() {
    return C_COLL_CLARITY;
  }
  public void set_C_COLL_CLARITY(String C_COLL_CLARITY) {
    this.C_COLL_CLARITY = C_COLL_CLARITY;
  }
  public SAMPLE with_C_COLL_CLARITY(String C_COLL_CLARITY) {
    this.C_COLL_CLARITY = C_COLL_CLARITY;
    return this;
  }
  private String C_COLL_DESC;
  public String get_C_COLL_DESC() {
    return C_COLL_DESC;
  }
  public void set_C_COLL_DESC(String C_COLL_DESC) {
    this.C_COLL_DESC = C_COLL_DESC;
  }
  public SAMPLE with_C_COLL_DESC(String C_COLL_DESC) {
    this.C_COLL_DESC = C_COLL_DESC;
    return this;
  }
  private String C_COLL_ISCOLLSAMPLE;
  public String get_C_COLL_ISCOLLSAMPLE() {
    return C_COLL_ISCOLLSAMPLE;
  }
  public void set_C_COLL_ISCOLLSAMPLE(String C_COLL_ISCOLLSAMPLE) {
    this.C_COLL_ISCOLLSAMPLE = C_COLL_ISCOLLSAMPLE;
  }
  public SAMPLE with_C_COLL_ISCOLLSAMPLE(String C_COLL_ISCOLLSAMPLE) {
    this.C_COLL_ISCOLLSAMPLE = C_COLL_ISCOLLSAMPLE;
    return this;
  }
  private String C_COLL_NAME;
  public String get_C_COLL_NAME() {
    return C_COLL_NAME;
  }
  public void set_C_COLL_NAME(String C_COLL_NAME) {
    this.C_COLL_NAME = C_COLL_NAME;
  }
  public SAMPLE with_C_COLL_NAME(String C_COLL_NAME) {
    this.C_COLL_NAME = C_COLL_NAME;
    return this;
  }
  private String C_COLL_EMIRATEID;
  public String get_C_COLL_EMIRATEID() {
    return C_COLL_EMIRATEID;
  }
  public void set_C_COLL_EMIRATEID(String C_COLL_EMIRATEID) {
    this.C_COLL_EMIRATEID = C_COLL_EMIRATEID;
  }
  public SAMPLE with_C_COLL_EMIRATEID(String C_COLL_EMIRATEID) {
    this.C_COLL_EMIRATEID = C_COLL_EMIRATEID;
    return this;
  }
  private String C_DCL_USERID;
  public String get_C_DCL_USERID() {
    return C_DCL_USERID;
  }
  public void set_C_DCL_USERID(String C_DCL_USERID) {
    this.C_DCL_USERID = C_DCL_USERID;
  }
  public SAMPLE with_C_DCL_USERID(String C_DCL_USERID) {
    this.C_DCL_USERID = C_DCL_USERID;
    return this;
  }
  private String C_FAILURE_DESC;
  public String get_C_FAILURE_DESC() {
    return C_FAILURE_DESC;
  }
  public void set_C_FAILURE_DESC(String C_FAILURE_DESC) {
    this.C_FAILURE_DESC = C_FAILURE_DESC;
  }
  public SAMPLE with_C_FAILURE_DESC(String C_FAILURE_DESC) {
    this.C_FAILURE_DESC = C_FAILURE_DESC;
    return this;
  }
  private String C_FAILURE_COMP;
  public String get_C_FAILURE_COMP() {
    return C_FAILURE_COMP;
  }
  public void set_C_FAILURE_COMP(String C_FAILURE_COMP) {
    this.C_FAILURE_COMP = C_FAILURE_COMP;
  }
  public SAMPLE with_C_FAILURE_COMP(String C_FAILURE_COMP) {
    this.C_FAILURE_COMP = C_FAILURE_COMP;
    return this;
  }
  private String C_WORK_FAIL;
  public String get_C_WORK_FAIL() {
    return C_WORK_FAIL;
  }
  public void set_C_WORK_FAIL(String C_WORK_FAIL) {
    this.C_WORK_FAIL = C_WORK_FAIL;
  }
  public SAMPLE with_C_WORK_FAIL(String C_WORK_FAIL) {
    this.C_WORK_FAIL = C_WORK_FAIL;
    return this;
  }
  private String C_PURCHASE_REF;
  public String get_C_PURCHASE_REF() {
    return C_PURCHASE_REF;
  }
  public void set_C_PURCHASE_REF(String C_PURCHASE_REF) {
    this.C_PURCHASE_REF = C_PURCHASE_REF;
  }
  public SAMPLE with_C_PURCHASE_REF(String C_PURCHASE_REF) {
    this.C_PURCHASE_REF = C_PURCHASE_REF;
    return this;
  }
  private String C_PURCHASE_TYPE;
  public String get_C_PURCHASE_TYPE() {
    return C_PURCHASE_TYPE;
  }
  public void set_C_PURCHASE_TYPE(String C_PURCHASE_TYPE) {
    this.C_PURCHASE_TYPE = C_PURCHASE_TYPE;
  }
  public SAMPLE with_C_PURCHASE_TYPE(String C_PURCHASE_TYPE) {
    this.C_PURCHASE_TYPE = C_PURCHASE_TYPE;
    return this;
  }
  private String C_PEARL_FIELD;
  public String get_C_PEARL_FIELD() {
    return C_PEARL_FIELD;
  }
  public void set_C_PEARL_FIELD(String C_PEARL_FIELD) {
    this.C_PEARL_FIELD = C_PEARL_FIELD;
  }
  public SAMPLE with_C_PEARL_FIELD(String C_PEARL_FIELD) {
    this.C_PEARL_FIELD = C_PEARL_FIELD;
    return this;
  }
  private String C_POBOX;
  public String get_C_POBOX() {
    return C_POBOX;
  }
  public void set_C_POBOX(String C_POBOX) {
    this.C_POBOX = C_POBOX;
  }
  public SAMPLE with_C_POBOX(String C_POBOX) {
    this.C_POBOX = C_POBOX;
    return this;
  }
  private String C_PRODUCT_DILUENT;
  public String get_C_PRODUCT_DILUENT() {
    return C_PRODUCT_DILUENT;
  }
  public void set_C_PRODUCT_DILUENT(String C_PRODUCT_DILUENT) {
    this.C_PRODUCT_DILUENT = C_PRODUCT_DILUENT;
  }
  public SAMPLE with_C_PRODUCT_DILUENT(String C_PRODUCT_DILUENT) {
    this.C_PRODUCT_DILUENT = C_PRODUCT_DILUENT;
    return this;
  }
  private String C_ACTIVE_SUBSTANCE;
  public String get_C_ACTIVE_SUBSTANCE() {
    return C_ACTIVE_SUBSTANCE;
  }
  public void set_C_ACTIVE_SUBSTANCE(String C_ACTIVE_SUBSTANCE) {
    this.C_ACTIVE_SUBSTANCE = C_ACTIVE_SUBSTANCE;
  }
  public SAMPLE with_C_ACTIVE_SUBSTANCE(String C_ACTIVE_SUBSTANCE) {
    this.C_ACTIVE_SUBSTANCE = C_ACTIVE_SUBSTANCE;
    return this;
  }
  private String C_EDIT_ASSET;
  public String get_C_EDIT_ASSET() {
    return C_EDIT_ASSET;
  }
  public void set_C_EDIT_ASSET(String C_EDIT_ASSET) {
    this.C_EDIT_ASSET = C_EDIT_ASSET;
  }
  public SAMPLE with_C_EDIT_ASSET(String C_EDIT_ASSET) {
    this.C_EDIT_ASSET = C_EDIT_ASSET;
    return this;
  }
  private java.math.BigDecimal C_PH;
  public java.math.BigDecimal get_C_PH() {
    return C_PH;
  }
  public void set_C_PH(java.math.BigDecimal C_PH) {
    this.C_PH = C_PH;
  }
  public SAMPLE with_C_PH(java.math.BigDecimal C_PH) {
    this.C_PH = C_PH;
    return this;
  }
  private String C_NATUREOFACTIVITY;
  public String get_C_NATUREOFACTIVITY() {
    return C_NATUREOFACTIVITY;
  }
  public void set_C_NATUREOFACTIVITY(String C_NATUREOFACTIVITY) {
    this.C_NATUREOFACTIVITY = C_NATUREOFACTIVITY;
  }
  public SAMPLE with_C_NATUREOFACTIVITY(String C_NATUREOFACTIVITY) {
    this.C_NATUREOFACTIVITY = C_NATUREOFACTIVITY;
    return this;
  }
  private java.math.BigDecimal C_CHLORINELEVEL;
  public java.math.BigDecimal get_C_CHLORINELEVEL() {
    return C_CHLORINELEVEL;
  }
  public void set_C_CHLORINELEVEL(java.math.BigDecimal C_CHLORINELEVEL) {
    this.C_CHLORINELEVEL = C_CHLORINELEVEL;
  }
  public SAMPLE with_C_CHLORINELEVEL(java.math.BigDecimal C_CHLORINELEVEL) {
    this.C_CHLORINELEVEL = C_CHLORINELEVEL;
    return this;
  }
  private String C_RISK_ASSESSMENT;
  public String get_C_RISK_ASSESSMENT() {
    return C_RISK_ASSESSMENT;
  }
  public void set_C_RISK_ASSESSMENT(String C_RISK_ASSESSMENT) {
    this.C_RISK_ASSESSMENT = C_RISK_ASSESSMENT;
  }
  public SAMPLE with_C_RISK_ASSESSMENT(String C_RISK_ASSESSMENT) {
    this.C_RISK_ASSESSMENT = C_RISK_ASSESSMENT;
    return this;
  }
  private Integer C_SPECIMEN;
  public Integer get_C_SPECIMEN() {
    return C_SPECIMEN;
  }
  public void set_C_SPECIMEN(Integer C_SPECIMEN) {
    this.C_SPECIMEN = C_SPECIMEN;
  }
  public SAMPLE with_C_SPECIMEN(Integer C_SPECIMEN) {
    this.C_SPECIMEN = C_SPECIMEN;
    return this;
  }
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof SAMPLE)) {
      return false;
    }
    SAMPLE that = (SAMPLE) o;
    boolean equal = true;
    equal = equal && (this.SAMPLE_NUMBER == null ? that.SAMPLE_NUMBER == null : this.SAMPLE_NUMBER.equals(that.SAMPLE_NUMBER));
    equal = equal && (this.TEXT_ID == null ? that.TEXT_ID == null : this.TEXT_ID.equals(that.TEXT_ID));
    equal = equal && (this.STATUS == null ? that.STATUS == null : this.STATUS.equals(that.STATUS));
    equal = equal && (this.OLD_STATUS == null ? that.OLD_STATUS == null : this.OLD_STATUS.equals(that.OLD_STATUS));
    equal = equal && (this.DISP_FLDS == null ? that.DISP_FLDS == null : this.DISP_FLDS.equals(that.DISP_FLDS));
    equal = equal && (this.LABEL_MASK == null ? that.LABEL_MASK == null : this.LABEL_MASK.equals(that.LABEL_MASK));
    equal = equal && (this.IN_SPEC == null ? that.IN_SPEC == null : this.IN_SPEC.equals(that.IN_SPEC));
    equal = equal && (this.IN_CAL == null ? that.IN_CAL == null : this.IN_CAL.equals(that.IN_CAL));
    equal = equal && (this.CHANGED_ON == null ? that.CHANGED_ON == null : this.CHANGED_ON.equals(that.CHANGED_ON));
    equal = equal && (this.RE_SAMPLE == null ? that.RE_SAMPLE == null : this.RE_SAMPLE.equals(that.RE_SAMPLE));
    equal = equal && (this.ALIQUOT == null ? that.ALIQUOT == null : this.ALIQUOT.equals(that.ALIQUOT));
    equal = equal && (this.ORIGINAL_SAMPLE == null ? that.ORIGINAL_SAMPLE == null : this.ORIGINAL_SAMPLE.equals(that.ORIGINAL_SAMPLE));
    equal = equal && (this.PARENT_SAMPLE == null ? that.PARENT_SAMPLE == null : this.PARENT_SAMPLE.equals(that.PARENT_SAMPLE));
    equal = equal && (this.PARENT_ALIQUOT == null ? that.PARENT_ALIQUOT == null : this.PARENT_ALIQUOT.equals(that.PARENT_ALIQUOT));
    equal = equal && (this.ALIQUOT_GROUP == null ? that.ALIQUOT_GROUP == null : this.ALIQUOT_GROUP.equals(that.ALIQUOT_GROUP));
    equal = equal && (this.SAMPLE_VOLUME == null ? that.SAMPLE_VOLUME == null : this.SAMPLE_VOLUME.equals(that.SAMPLE_VOLUME));
    equal = equal && (this.SAMPLE_UNITS == null ? that.SAMPLE_UNITS == null : this.SAMPLE_UNITS.equals(that.SAMPLE_UNITS));
    equal = equal && (this.LOGIN_DATE == null ? that.LOGIN_DATE == null : this.LOGIN_DATE.equals(that.LOGIN_DATE));
    equal = equal && (this.LOGIN_BY == null ? that.LOGIN_BY == null : this.LOGIN_BY.equals(that.LOGIN_BY));
    equal = equal && (this.SAMPLED_DATE == null ? that.SAMPLED_DATE == null : this.SAMPLED_DATE.equals(that.SAMPLED_DATE));
    equal = equal && (this.RECD_DATE == null ? that.RECD_DATE == null : this.RECD_DATE.equals(that.RECD_DATE));
    equal = equal && (this.RECEIVED_BY == null ? that.RECEIVED_BY == null : this.RECEIVED_BY.equals(that.RECEIVED_BY));
    equal = equal && (this.DATE_STARTED == null ? that.DATE_STARTED == null : this.DATE_STARTED.equals(that.DATE_STARTED));
    equal = equal && (this.STARTED == null ? that.STARTED == null : this.STARTED.equals(that.STARTED));
    equal = equal && (this.ASSIGNED_OPERATOR == null ? that.ASSIGNED_OPERATOR == null : this.ASSIGNED_OPERATOR.equals(that.ASSIGNED_OPERATOR));
    equal = equal && (this.DUE_DATE == null ? that.DUE_DATE == null : this.DUE_DATE.equals(that.DUE_DATE));
    equal = equal && (this.DATE_COMPLETED == null ? that.DATE_COMPLETED == null : this.DATE_COMPLETED.equals(that.DATE_COMPLETED));
    equal = equal && (this.DATE_REVIEWED == null ? that.DATE_REVIEWED == null : this.DATE_REVIEWED.equals(that.DATE_REVIEWED));
    equal = equal && (this.PREP == null ? that.PREP == null : this.PREP.equals(that.PREP));
    equal = equal && (this.PREP_DATE == null ? that.PREP_DATE == null : this.PREP_DATE.equals(that.PREP_DATE));
    equal = equal && (this.PREP_BY == null ? that.PREP_BY == null : this.PREP_BY.equals(that.PREP_BY));
    equal = equal && (this.REVIEWER == null ? that.REVIEWER == null : this.REVIEWER.equals(that.REVIEWER));
    equal = equal && (this.REVIEW_NOTE == null ? that.REVIEW_NOTE == null : this.REVIEW_NOTE.equals(that.REVIEW_NOTE));
    equal = equal && (this.PRODUCT_CODE == null ? that.PRODUCT_CODE == null : this.PRODUCT_CODE.equals(that.PRODUCT_CODE));
    equal = equal && (this.PRODUCT == null ? that.PRODUCT == null : this.PRODUCT.equals(that.PRODUCT));
    equal = equal && (this.PRODUCT_VERSION == null ? that.PRODUCT_VERSION == null : this.PRODUCT_VERSION.equals(that.PRODUCT_VERSION));
    equal = equal && (this.PRODUCT_GRADE == null ? that.PRODUCT_GRADE == null : this.PRODUCT_GRADE.equals(that.PRODUCT_GRADE));
    equal = equal && (this.SAMPLING_POINT == null ? that.SAMPLING_POINT == null : this.SAMPLING_POINT.equals(that.SAMPLING_POINT));
    equal = equal && (this.SAMPLE_TYPE == null ? that.SAMPLE_TYPE == null : this.SAMPLE_TYPE.equals(that.SAMPLE_TYPE));
    equal = equal && (this.PROJECT == null ? that.PROJECT == null : this.PROJECT.equals(that.PROJECT));
    equal = equal && (this.BATCH_NAME == null ? that.BATCH_NAME == null : this.BATCH_NAME.equals(that.BATCH_NAME));
    equal = equal && (this.BATCH_TEMPLATE == null ? that.BATCH_TEMPLATE == null : this.BATCH_TEMPLATE.equals(that.BATCH_TEMPLATE));
    equal = equal && (this.STEP == null ? that.STEP == null : this.STEP.equals(that.STEP));
    equal = equal && (this.SAMPLE_NAME == null ? that.SAMPLE_NAME == null : this.SAMPLE_NAME.equals(that.SAMPLE_NAME));
    equal = equal && (this.DESCRIPTION == null ? that.DESCRIPTION == null : this.DESCRIPTION.equals(that.DESCRIPTION));
    equal = equal && (this.PRIORITY == null ? that.PRIORITY == null : this.PRIORITY.equals(that.PRIORITY));
    equal = equal && (this.LOCATION == null ? that.LOCATION == null : this.LOCATION.equals(that.LOCATION));
    equal = equal && (this.CUSTOMER == null ? that.CUSTOMER == null : this.CUSTOMER.equals(that.CUSTOMER));
    equal = equal && (this.TEST_LIST == null ? that.TEST_LIST == null : this.TEST_LIST.equals(that.TEST_LIST));
    equal = equal && (this.TEMPLATE == null ? that.TEMPLATE == null : this.TEMPLATE.equals(that.TEMPLATE));
    equal = equal && (this.RECIPIENT == null ? that.RECIPIENT == null : this.RECIPIENT.equals(that.RECIPIENT));
    equal = equal && (this.STANDARD == null ? that.STANDARD == null : this.STANDARD.equals(that.STANDARD));
    equal = equal && (this.EXT_LINK == null ? that.EXT_LINK == null : this.EXT_LINK.equals(that.EXT_LINK));
    equal = equal && (this.CONDITION == null ? that.CONDITION == null : this.CONDITION.equals(that.CONDITION));
    equal = equal && (this.TIMEPOINT == null ? that.TIMEPOINT == null : this.TIMEPOINT.equals(that.TIMEPOINT));
    equal = equal && (this.LOT == null ? that.LOT == null : this.LOT.equals(that.LOT));
    equal = equal && (this.BASE_DATE == null ? that.BASE_DATE == null : this.BASE_DATE.equals(that.BASE_DATE));
    equal = equal && (this.AVAILABLE_DATE == null ? that.AVAILABLE_DATE == null : this.AVAILABLE_DATE.equals(that.AVAILABLE_DATE));
    equal = equal && (this.REQUIRED_DATE == null ? that.REQUIRED_DATE == null : this.REQUIRED_DATE.equals(that.REQUIRED_DATE));
    equal = equal && (this.TARGET_DATE == null ? that.TARGET_DATE == null : this.TARGET_DATE.equals(that.TARGET_DATE));
    equal = equal && (this.PARTIAL_SPEC == null ? that.PARTIAL_SPEC == null : this.PARTIAL_SPEC.equals(that.PARTIAL_SPEC));
    equal = equal && (this.SPEC_TYPE == null ? that.SPEC_TYPE == null : this.SPEC_TYPE.equals(that.SPEC_TYPE));
    equal = equal && (this.STAGE == null ? that.STAGE == null : this.STAGE.equals(that.STAGE));
    equal = equal && (this.PRIMARY_IN_SPEC == null ? that.PRIMARY_IN_SPEC == null : this.PRIMARY_IN_SPEC.equals(that.PRIMARY_IN_SPEC));
    equal = equal && (this.BATCH == null ? that.BATCH == null : this.BATCH.equals(that.BATCH));
    equal = equal && (this.CHARGE_CODE == null ? that.CHARGE_CODE == null : this.CHARGE_CODE.equals(that.CHARGE_CODE));
    equal = equal && (this.FORMULATION == null ? that.FORMULATION == null : this.FORMULATION.equals(that.FORMULATION));
    equal = equal && (this.PROTOCOL_LEVEL == null ? that.PROTOCOL_LEVEL == null : this.PROTOCOL_LEVEL.equals(that.PROTOCOL_LEVEL));
    equal = equal && (this.RELEASED == null ? that.RELEASED == null : this.RELEASED.equals(that.RELEASED));
    equal = equal && (this.RELEASED_BY == null ? that.RELEASED_BY == null : this.RELEASED_BY.equals(that.RELEASED_BY));
    equal = equal && (this.RELEASED_ON == null ? that.RELEASED_ON == null : this.RELEASED_ON.equals(that.RELEASED_ON));
    equal = equal && (this.IN_CONTROL == null ? that.IN_CONTROL == null : this.IN_CONTROL.equals(that.IN_CONTROL));
    equal = equal && (this.INVESTIGATION == null ? that.INVESTIGATION == null : this.INVESTIGATION.equals(that.INVESTIGATION));
    equal = equal && (this.INVESTIGATED == null ? that.INVESTIGATED == null : this.INVESTIGATED.equals(that.INVESTIGATED));
    equal = equal && (this.APPROVED == null ? that.APPROVED == null : this.APPROVED.equals(that.APPROVED));
    equal = equal && (this.APPROVAL_GROUP == null ? that.APPROVAL_GROUP == null : this.APPROVAL_GROUP.equals(that.APPROVAL_GROUP));
    equal = equal && (this.READY_FOR_APPROVAL == null ? that.READY_FOR_APPROVAL == null : this.READY_FOR_APPROVAL.equals(that.READY_FOR_APPROVAL));
    equal = equal && (this.APPROVAL_ID == null ? that.APPROVAL_ID == null : this.APPROVAL_ID.equals(that.APPROVAL_ID));
    equal = equal && (this.APPROVAL_ROUTING == null ? that.APPROVAL_ROUTING == null : this.APPROVAL_ROUTING.equals(that.APPROVAL_ROUTING));
    equal = equal && (this.MODIFIED_RESULTS == null ? that.MODIFIED_RESULTS == null : this.MODIFIED_RESULTS.equals(that.MODIFIED_RESULTS));
    equal = equal && (this.REPORT_NUMBER == null ? that.REPORT_NUMBER == null : this.REPORT_NUMBER.equals(that.REPORT_NUMBER));
    equal = equal && (this.COMPOSITE == null ? that.COMPOSITE == null : this.COMPOSITE.equals(that.COMPOSITE));
    equal = equal && (this.PARENT_COMPOSITE == null ? that.PARENT_COMPOSITE == null : this.PARENT_COMPOSITE.equals(that.PARENT_COMPOSITE));
    equal = equal && (this.COMPOSITE_TEMPLATE == null ? that.COMPOSITE_TEMPLATE == null : this.COMPOSITE_TEMPLATE.equals(that.COMPOSITE_TEMPLATE));
    equal = equal && (this.SEASON_DATE == null ? that.SEASON_DATE == null : this.SEASON_DATE.equals(that.SEASON_DATE));
    equal = equal && (this.PEOPLE == null ? that.PEOPLE == null : this.PEOPLE.equals(that.PEOPLE));
    equal = equal && (this.TEST_LOCATION == null ? that.TEST_LOCATION == null : this.TEST_LOCATION.equals(that.TEST_LOCATION));
    equal = equal && (this.OWNER_LOCATION == null ? that.OWNER_LOCATION == null : this.OWNER_LOCATION.equals(that.OWNER_LOCATION));
    equal = equal && (this.CHK_ALIQUOT_STATUS == null ? that.CHK_ALIQUOT_STATUS == null : this.CHK_ALIQUOT_STATUS.equals(that.CHK_ALIQUOT_STATUS));
    equal = equal && (this.CHK_ALIQUOT_SPECS == null ? that.CHK_ALIQUOT_SPECS == null : this.CHK_ALIQUOT_SPECS.equals(that.CHK_ALIQUOT_SPECS));
    equal = equal && (this.ALIQUOT_TEMPLATE == null ? that.ALIQUOT_TEMPLATE == null : this.ALIQUOT_TEMPLATE.equals(that.ALIQUOT_TEMPLATE));
    equal = equal && (this.CALC_GROUP == null ? that.CALC_GROUP == null : this.CALC_GROUP.equals(that.CALC_GROUP));
    equal = equal && (this.SAMPLE_EVENT == null ? that.SAMPLE_EVENT == null : this.SAMPLE_EVENT.equals(that.SAMPLE_EVENT));
    equal = equal && (this.LABEL_ID == null ? that.LABEL_ID == null : this.LABEL_ID.equals(that.LABEL_ID));
    equal = equal && (this.HAS_FLAGS == null ? that.HAS_FLAGS == null : this.HAS_FLAGS.equals(that.HAS_FLAGS));
    equal = equal && (this.VARIATION == null ? that.VARIATION == null : this.VARIATION.equals(that.VARIATION));
    equal = equal && (this.SAMPLED_BY == null ? that.SAMPLED_BY == null : this.SAMPLED_BY.equals(that.SAMPLED_BY));
    equal = equal && (this.SAMPLED == null ? that.SAMPLED == null : this.SAMPLED.equals(that.SAMPLED));
    equal = equal && (this.ORDER_NUM == null ? that.ORDER_NUM == null : this.ORDER_NUM.equals(that.ORDER_NUM));
    equal = equal && (this.LAST_ORDER_NUM == null ? that.LAST_ORDER_NUM == null : this.LAST_ORDER_NUM.equals(that.LAST_ORDER_NUM));
    equal = equal && (this.STORAGE_CONDITION == null ? that.STORAGE_CONDITION == null : this.STORAGE_CONDITION.equals(that.STORAGE_CONDITION));
    equal = equal && (this.CONTAINER_TYPE == null ? that.CONTAINER_TYPE == null : this.CONTAINER_TYPE.equals(that.CONTAINER_TYPE));
    equal = equal && (this.NUM_CONTAINERS == null ? that.NUM_CONTAINERS == null : this.NUM_CONTAINERS.equals(that.NUM_CONTAINERS));
    equal = equal && (this.IMPORTANT_MESSAGE == null ? that.IMPORTANT_MESSAGE == null : this.IMPORTANT_MESSAGE.equals(that.IMPORTANT_MESSAGE));
    equal = equal && (this.OBSERVATIONS == null ? that.OBSERVATIONS == null : this.OBSERVATIONS.equals(that.OBSERVATIONS));
    equal = equal && (this.LAB == null ? that.LAB == null : this.LAB.equals(that.LAB));
    equal = equal && (this.EXPIRATION_DATE == null ? that.EXPIRATION_DATE == null : this.EXPIRATION_DATE.equals(that.EXPIRATION_DATE));
    equal = equal && (this.REQD_VOLUME == null ? that.REQD_VOLUME == null : this.REQD_VOLUME.equals(that.REQD_VOLUME));
    equal = equal && (this.COLLECTION_METHOD == null ? that.COLLECTION_METHOD == null : this.COLLECTION_METHOD.equals(that.COLLECTION_METHOD));
    equal = equal && (this.COLLECTION_OFFSET == null ? that.COLLECTION_OFFSET == null : this.COLLECTION_OFFSET.equals(that.COLLECTION_OFFSET));
    equal = equal && (this.SIGNED == null ? that.SIGNED == null : this.SIGNED.equals(that.SIGNED));
    equal = equal && (this.CASE_NAME == null ? that.CASE_NAME == null : this.CASE_NAME.equals(that.CASE_NAME));
    equal = equal && (this.CONTRACT_NUMBER == null ? that.CONTRACT_NUMBER == null : this.CONTRACT_NUMBER.equals(that.CONTRACT_NUMBER));
    equal = equal && (this.BILLING_ITEM_DESC == null ? that.BILLING_ITEM_DESC == null : this.BILLING_ITEM_DESC.equals(that.BILLING_ITEM_DESC));
    equal = equal && (this.INTERPRETED == null ? that.INTERPRETED == null : this.INTERPRETED.equals(that.INTERPRETED));
    equal = equal && (this.INTERP_TYPE == null ? that.INTERP_TYPE == null : this.INTERP_TYPE.equals(that.INTERP_TYPE));
    equal = equal && (this.INSPECT_PNT_NUM == null ? that.INSPECT_PNT_NUM == null : this.INSPECT_PNT_NUM.equals(that.INSPECT_PNT_NUM));
    equal = equal && (this.INSPECTION_LOT_NUM == null ? that.INSPECTION_LOT_NUM == null : this.INSPECTION_LOT_NUM.equals(that.INSPECTION_LOT_NUM));
    equal = equal && (this.IS_INSPECT_PNT == null ? that.IS_INSPECT_PNT == null : this.IS_INSPECT_PNT.equals(that.IS_INSPECT_PNT));
    equal = equal && (this.PLANT == null ? that.PLANT == null : this.PLANT.equals(that.PLANT));
    equal = equal && (this.USERC1_VALUE == null ? that.USERC1_VALUE == null : this.USERC1_VALUE.equals(that.USERC1_VALUE));
    equal = equal && (this.USERC2_VALUE == null ? that.USERC2_VALUE == null : this.USERC2_VALUE.equals(that.USERC2_VALUE));
    equal = equal && (this.USERD1_VALUE == null ? that.USERD1_VALUE == null : this.USERD1_VALUE.equals(that.USERD1_VALUE));
    equal = equal && (this.USERN1_VALUE == null ? that.USERN1_VALUE == null : this.USERN1_VALUE.equals(that.USERN1_VALUE));
    equal = equal && (this.USERN2_VALUE == null ? that.USERN2_VALUE == null : this.USERN2_VALUE.equals(that.USERN2_VALUE));
    equal = equal && (this.USERT1_VALUE == null ? that.USERT1_VALUE == null : this.USERT1_VALUE.equals(that.USERT1_VALUE));
    equal = equal && (this.SAP_SELECTED_SET == null ? that.SAP_SELECTED_SET == null : this.SAP_SELECTED_SET.equals(that.SAP_SELECTED_SET));
    equal = equal && (this.SAP_CODE_GROUP == null ? that.SAP_CODE_GROUP == null : this.SAP_CODE_GROUP.equals(that.SAP_CODE_GROUP));
    equal = equal && (this.SAP_SAMPLE_NUMBER == null ? that.SAP_SAMPLE_NUMBER == null : this.SAP_SAMPLE_NUMBER.equals(that.SAP_SAMPLE_NUMBER));
    equal = equal && (this.SAP_SS_PLANT == null ? that.SAP_SS_PLANT == null : this.SAP_SS_PLANT.equals(that.SAP_SS_PLANT));
    equal = equal && (this.SAP_SAMPLE_COUNT == null ? that.SAP_SAMPLE_COUNT == null : this.SAP_SAMPLE_COUNT.equals(that.SAP_SAMPLE_COUNT));
    equal = equal && (this.OPERATION_NUMBER == null ? that.OPERATION_NUMBER == null : this.OPERATION_NUMBER.equals(that.OPERATION_NUMBER));
    equal = equal && (this.STORAGE_LOC_NO == null ? that.STORAGE_LOC_NO == null : this.STORAGE_LOC_NO.equals(that.STORAGE_LOC_NO));
    equal = equal && (this.EXTERNAL_LOCATION == null ? that.EXTERNAL_LOCATION == null : this.EXTERNAL_LOCATION.equals(that.EXTERNAL_LOCATION));
    equal = equal && (this.FORMULATION_NAME == null ? that.FORMULATION_NAME == null : this.FORMULATION_NAME.equals(that.FORMULATION_NAME));
    equal = equal && (this.STANDARD_REAGENT == null ? that.STANDARD_REAGENT == null : this.STANDARD_REAGENT.equals(that.STANDARD_REAGENT));
    equal = equal && (this.CONVERSION_GROUPS == null ? that.CONVERSION_GROUPS == null : this.CONVERSION_GROUPS.equals(that.CONVERSION_GROUPS));
    equal = equal && (this.REPORTED_RSLT_OOS == null ? that.REPORTED_RSLT_OOS == null : this.REPORTED_RSLT_OOS.equals(that.REPORTED_RSLT_OOS));
    equal = equal && (this.GROUP_NAME == null ? that.GROUP_NAME == null : this.GROUP_NAME.equals(that.GROUP_NAME));
    equal = equal && (this.PROCESS_UNIT == null ? that.PROCESS_UNIT == null : this.PROCESS_UNIT.equals(that.PROCESS_UNIT));
    equal = equal && (this.HAZARD == null ? that.HAZARD == null : this.HAZARD.equals(that.HAZARD));
    equal = equal && (this.INSTRUMENT == null ? that.INSTRUMENT == null : this.INSTRUMENT.equals(that.INSTRUMENT));
    equal = equal && (this.T_SITE == null ? that.T_SITE == null : this.T_SITE.equals(that.T_SITE));
    equal = equal && (this.T_PLANT == null ? that.T_PLANT == null : this.T_PLANT.equals(that.T_PLANT));
    equal = equal && (this.T_CERTIFICATE == null ? that.T_CERTIFICATE == null : this.T_CERTIFICATE.equals(that.T_CERTIFICATE));
    equal = equal && (this.T_CONTAINER == null ? that.T_CONTAINER == null : this.T_CONTAINER.equals(that.T_CONTAINER));
    equal = equal && (this.T_OVERDUE == null ? that.T_OVERDUE == null : this.T_OVERDUE.equals(that.T_OVERDUE));
    equal = equal && (this.T_PO_NUMBER == null ? that.T_PO_NUMBER == null : this.T_PO_NUMBER.equals(that.T_PO_NUMBER));
    equal = equal && (this.T_PRODUCTION_DATE == null ? that.T_PRODUCTION_DATE == null : this.T_PRODUCTION_DATE.equals(that.T_PRODUCTION_DATE));
    equal = equal && (this.T_REPORT_DATE == null ? that.T_REPORT_DATE == null : this.T_REPORT_DATE.equals(that.T_REPORT_DATE));
    equal = equal && (this.T_REQUESTED_BY == null ? that.T_REQUESTED_BY == null : this.T_REQUESTED_BY.equals(that.T_REQUESTED_BY));
    equal = equal && (this.T_LONG_NOTE == null ? that.T_LONG_NOTE == null : this.T_LONG_NOTE.equals(that.T_LONG_NOTE));
    equal = equal && (this.T_SHIFT_CODE == null ? that.T_SHIFT_CODE == null : this.T_SHIFT_CODE.equals(that.T_SHIFT_CODE));
    equal = equal && (this.T_SUPP_BATCH_NO == null ? that.T_SUPP_BATCH_NO == null : this.T_SUPP_BATCH_NO.equals(that.T_SUPP_BATCH_NO));
    equal = equal && (this.T_SUPPLIER == null ? that.T_SUPPLIER == null : this.T_SUPPLIER.equals(that.T_SUPPLIER));
    equal = equal && (this.T_TRUCK_VESSEL == null ? that.T_TRUCK_VESSEL == null : this.T_TRUCK_VESSEL.equals(that.T_TRUCK_VESSEL));
    equal = equal && (this.T_PLANT_RECV_BY == null ? that.T_PLANT_RECV_BY == null : this.T_PLANT_RECV_BY.equals(that.T_PLANT_RECV_BY));
    equal = equal && (this.T_PLANT_RECV_DATE == null ? that.T_PLANT_RECV_DATE == null : this.T_PLANT_RECV_DATE.equals(that.T_PLANT_RECV_DATE));
    equal = equal && (this.C_PRIORITY == null ? that.C_PRIORITY == null : this.C_PRIORITY.equals(that.C_PRIORITY));
    equal = equal && (this.STORAGE_TEMPLATE == null ? that.STORAGE_TEMPLATE == null : this.STORAGE_TEMPLATE.equals(that.STORAGE_TEMPLATE));
    equal = equal && (this.ALLOW_CHLD_ALQTS == null ? that.ALLOW_CHLD_ALQTS == null : this.ALLOW_CHLD_ALQTS.equals(that.ALLOW_CHLD_ALQTS));
    equal = equal && (this.PHASE == null ? that.PHASE == null : this.PHASE.equals(that.PHASE));
    equal = equal && (this.SCHEDULE_NUMBER == null ? that.SCHEDULE_NUMBER == null : this.SCHEDULE_NUMBER.equals(that.SCHEDULE_NUMBER));
    equal = equal && (this.T_ACTION_NUMBER == null ? that.T_ACTION_NUMBER == null : this.T_ACTION_NUMBER.equals(that.T_ACTION_NUMBER));
    equal = equal && (this.T_BATCH_NAME1 == null ? that.T_BATCH_NAME1 == null : this.T_BATCH_NAME1.equals(that.T_BATCH_NAME1));
    equal = equal && (this.T_BATCH_NAME2 == null ? that.T_BATCH_NAME2 == null : this.T_BATCH_NAME2.equals(that.T_BATCH_NAME2));
    equal = equal && (this.T_BATCH_NAME3 == null ? that.T_BATCH_NAME3 == null : this.T_BATCH_NAME3.equals(that.T_BATCH_NAME3));
    equal = equal && (this.T_BATCH_NAME4 == null ? that.T_BATCH_NAME4 == null : this.T_BATCH_NAME4.equals(that.T_BATCH_NAME4));
    equal = equal && (this.T_BATCH_NAME5 == null ? that.T_BATCH_NAME5 == null : this.T_BATCH_NAME5.equals(that.T_BATCH_NAME5));
    equal = equal && (this.T_BATCH_NAME6 == null ? that.T_BATCH_NAME6 == null : this.T_BATCH_NAME6.equals(that.T_BATCH_NAME6));
    equal = equal && (this.T_COLLECT_SCHEME == null ? that.T_COLLECT_SCHEME == null : this.T_COLLECT_SCHEME.equals(that.T_COLLECT_SCHEME));
    equal = equal && (this.T_COMPOSITE_GROUP == null ? that.T_COMPOSITE_GROUP == null : this.T_COMPOSITE_GROUP.equals(that.T_COMPOSITE_GROUP));
    equal = equal && (this.T_DISTRIBUTION_BY == null ? that.T_DISTRIBUTION_BY == null : this.T_DISTRIBUTION_BY.equals(that.T_DISTRIBUTION_BY));
    equal = equal && (this.T_DISTRIBUTION_DATE == null ? that.T_DISTRIBUTION_DATE == null : this.T_DISTRIBUTION_DATE.equals(that.T_DISTRIBUTION_DATE));
    equal = equal && (this.T_EM_PLAN == null ? that.T_EM_PLAN == null : this.T_EM_PLAN.equals(that.T_EM_PLAN));
    equal = equal && (this.T_INCUB1_BATCH == null ? that.T_INCUB1_BATCH == null : this.T_INCUB1_BATCH.equals(that.T_INCUB1_BATCH));
    equal = equal && (this.T_INCUB1_END == null ? that.T_INCUB1_END == null : this.T_INCUB1_END.equals(that.T_INCUB1_END));
    equal = equal && (this.T_INCUB1_START == null ? that.T_INCUB1_START == null : this.T_INCUB1_START.equals(that.T_INCUB1_START));
    equal = equal && (this.T_INCUB2_BATCH == null ? that.T_INCUB2_BATCH == null : this.T_INCUB2_BATCH.equals(that.T_INCUB2_BATCH));
    equal = equal && (this.T_INCUB2_END == null ? that.T_INCUB2_END == null : this.T_INCUB2_END.equals(that.T_INCUB2_END));
    equal = equal && (this.T_INCUB2_START == null ? that.T_INCUB2_START == null : this.T_INCUB2_START.equals(that.T_INCUB2_START));
    equal = equal && (this.T_MEDIA_REFERENCE == null ? that.T_MEDIA_REFERENCE == null : this.T_MEDIA_REFERENCE.equals(that.T_MEDIA_REFERENCE));
    equal = equal && (this.T_ORIGINAL_SAMPLE == null ? that.T_ORIGINAL_SAMPLE == null : this.T_ORIGINAL_SAMPLE.equals(that.T_ORIGINAL_SAMPLE));
    equal = equal && (this.T_PERSONNEL == null ? that.T_PERSONNEL == null : this.T_PERSONNEL.equals(that.T_PERSONNEL));
    equal = equal && (this.T_PERSONNEL_SET == null ? that.T_PERSONNEL_SET == null : this.T_PERSONNEL_SET.equals(that.T_PERSONNEL_SET));
    equal = equal && (this.T_SAMPLE_TYPE == null ? that.T_SAMPLE_TYPE == null : this.T_SAMPLE_TYPE.equals(that.T_SAMPLE_TYPE));
    equal = equal && (this.T_SCHEDULE_GROUP == null ? that.T_SCHEDULE_GROUP == null : this.T_SCHEDULE_GROUP.equals(that.T_SCHEDULE_GROUP));
    equal = equal && (this.T_SUITE == null ? that.T_SUITE == null : this.T_SUITE.equals(that.T_SUITE));
    equal = equal && (this.T_TRANSIT_LOCATION == null ? that.T_TRANSIT_LOCATION == null : this.T_TRANSIT_LOCATION.equals(that.T_TRANSIT_LOCATION));
    equal = equal && (this.T_VALIDATION == null ? that.T_VALIDATION == null : this.T_VALIDATION.equals(that.T_VALIDATION));
    equal = equal && (this.C_REFERENCE_ID == null ? that.C_REFERENCE_ID == null : this.C_REFERENCE_ID.equals(that.C_REFERENCE_ID));
    equal = equal && (this.C_SAMPLING_REASON == null ? that.C_SAMPLING_REASON == null : this.C_SAMPLING_REASON.equals(that.C_SAMPLING_REASON));
    equal = equal && (this.C_CUSTOMER_TYPE == null ? that.C_CUSTOMER_TYPE == null : this.C_CUSTOMER_TYPE.equals(that.C_CUSTOMER_TYPE));
    equal = equal && (this.C_REQUEST_TYPE == null ? that.C_REQUEST_TYPE == null : this.C_REQUEST_TYPE.equals(that.C_REQUEST_TYPE));
    equal = equal && (this.C_OTHER_SAMPLE_SOURCE == null ? that.C_OTHER_SAMPLE_SOURCE == null : this.C_OTHER_SAMPLE_SOURCE.equals(that.C_OTHER_SAMPLE_SOURCE));
    equal = equal && (this.C_CUST_ID == null ? that.C_CUST_ID == null : this.C_CUST_ID.equals(that.C_CUST_ID));
    equal = equal && (this.C_CLIENT_TYPE == null ? that.C_CLIENT_TYPE == null : this.C_CLIENT_TYPE.equals(that.C_CLIENT_TYPE));
    equal = equal && (this.C_REQ_SAMP_TYPE == null ? that.C_REQ_SAMP_TYPE == null : this.C_REQ_SAMP_TYPE.equals(that.C_REQ_SAMP_TYPE));
    equal = equal && (this.C_SAMPLE_SOURCE == null ? that.C_SAMPLE_SOURCE == null : this.C_SAMPLE_SOURCE.equals(that.C_SAMPLE_SOURCE));
    equal = equal && (this.C_DM_BARCODE == null ? that.C_DM_BARCODE == null : this.C_DM_BARCODE.equals(that.C_DM_BARCODE));
    equal = equal && (this.C_REQ_EXT_REFERENCE == null ? that.C_REQ_EXT_REFERENCE == null : this.C_REQ_EXT_REFERENCE.equals(that.C_REQ_EXT_REFERENCE));
    equal = equal && (this.C_EXPRESS_SERVICE == null ? that.C_EXPRESS_SERVICE == null : this.C_EXPRESS_SERVICE.equals(that.C_EXPRESS_SERVICE));
    equal = equal && (this.C_HARDCOPY_REQUIRED == null ? that.C_HARDCOPY_REQUIRED == null : this.C_HARDCOPY_REQUIRED.equals(that.C_HARDCOPY_REQUIRED));
    equal = equal && (this.C_REQ_REMARKS == null ? that.C_REQ_REMARKS == null : this.C_REQ_REMARKS.equals(that.C_REQ_REMARKS));
    equal = equal && (this.C_REQ_COPIES == null ? that.C_REQ_COPIES == null : this.C_REQ_COPIES.equals(that.C_REQ_COPIES));
    equal = equal && (this.C_REQ_EDIT == null ? that.C_REQ_EDIT == null : this.C_REQ_EDIT.equals(that.C_REQ_EDIT));
    equal = equal && (this.C_TOTAL_SERVICE_FEE == null ? that.C_TOTAL_SERVICE_FEE == null : this.C_TOTAL_SERVICE_FEE.equals(that.C_TOTAL_SERVICE_FEE));
    equal = equal && (this.C_PRODUCT_GROUP == null ? that.C_PRODUCT_GROUP == null : this.C_PRODUCT_GROUP.equals(that.C_PRODUCT_GROUP));
    equal = equal && (this.C_PRODUCT_CATEGORY == null ? that.C_PRODUCT_CATEGORY == null : this.C_PRODUCT_CATEGORY.equals(that.C_PRODUCT_CATEGORY));
    equal = equal && (this.C_PRODUCTION_DATE == null ? that.C_PRODUCTION_DATE == null : this.C_PRODUCTION_DATE.equals(that.C_PRODUCTION_DATE));
    equal = equal && (this.C_NO_OF_UNIT == null ? that.C_NO_OF_UNIT == null : this.C_NO_OF_UNIT.equals(that.C_NO_OF_UNIT));
    equal = equal && (this.C_SAMPLE_CONDITION == null ? that.C_SAMPLE_CONDITION == null : this.C_SAMPLE_CONDITION.equals(that.C_SAMPLE_CONDITION));
    equal = equal && (this.C_TEMP_REC == null ? that.C_TEMP_REC == null : this.C_TEMP_REC.equals(that.C_TEMP_REC));
    equal = equal && (this.C_POINT_OF_SAMPLING == null ? that.C_POINT_OF_SAMPLING == null : this.C_POINT_OF_SAMPLING.equals(that.C_POINT_OF_SAMPLING));
    equal = equal && (this.C_REQ_SAMP_COLLECTION == null ? that.C_REQ_SAMP_COLLECTION == null : this.C_REQ_SAMP_COLLECTION.equals(that.C_REQ_SAMP_COLLECTION));
    equal = equal && (this.C_REQ_SAMP_BAL_RETURN == null ? that.C_REQ_SAMP_BAL_RETURN == null : this.C_REQ_SAMP_BAL_RETURN.equals(that.C_REQ_SAMP_BAL_RETURN));
    equal = equal && (this.C_HAZARD == null ? that.C_HAZARD == null : this.C_HAZARD.equals(that.C_HAZARD));
    equal = equal && (this.C_BATCH_NO == null ? that.C_BATCH_NO == null : this.C_BATCH_NO.equals(that.C_BATCH_NO));
    equal = equal && (this.C_REQUEST_NO == null ? that.C_REQUEST_NO == null : this.C_REQUEST_NO.equals(that.C_REQUEST_NO));
    equal = equal && (this.C_BILLING_TYPE == null ? that.C_BILLING_TYPE == null : this.C_BILLING_TYPE.equals(that.C_BILLING_TYPE));
    equal = equal && (this.C_TOTAL_TEST_CHARGE == null ? that.C_TOTAL_TEST_CHARGE == null : this.C_TOTAL_TEST_CHARGE.equals(that.C_TOTAL_TEST_CHARGE));
    equal = equal && (this.C_VOUCHER == null ? that.C_VOUCHER == null : this.C_VOUCHER.equals(that.C_VOUCHER));
    equal = equal && (this.C_ERAD_NO == null ? that.C_ERAD_NO == null : this.C_ERAD_NO.equals(that.C_ERAD_NO));
    equal = equal && (this.C_RECEIPT == null ? that.C_RECEIPT == null : this.C_RECEIPT.equals(that.C_RECEIPT));
    equal = equal && (this.C_PAYMENT_DT == null ? that.C_PAYMENT_DT == null : this.C_PAYMENT_DT.equals(that.C_PAYMENT_DT));
    equal = equal && (this.C_PAYMENT_SRC == null ? that.C_PAYMENT_SRC == null : this.C_PAYMENT_SRC.equals(that.C_PAYMENT_SRC));
    equal = equal && (this.C_PAYMENT_STATUS == null ? that.C_PAYMENT_STATUS == null : this.C_PAYMENT_STATUS.equals(that.C_PAYMENT_STATUS));
    equal = equal && (this.C_CUST_DELIVERY_DATE == null ? that.C_CUST_DELIVERY_DATE == null : this.C_CUST_DELIVERY_DATE.equals(that.C_CUST_DELIVERY_DATE));
    equal = equal && (this.C_SAMPLE_OPINION == null ? that.C_SAMPLE_OPINION == null : this.C_SAMPLE_OPINION.equals(that.C_SAMPLE_OPINION));
    equal = equal && (this.C_SUBCAT_ID == null ? that.C_SUBCAT_ID == null : this.C_SUBCAT_ID.equals(that.C_SUBCAT_ID));
    equal = equal && (this.C_PRODCAT_ID == null ? that.C_PRODCAT_ID == null : this.C_PRODCAT_ID.equals(that.C_PRODCAT_ID));
    equal = equal && (this.C_PROD_GROUP_ID == null ? that.C_PROD_GROUP_ID == null : this.C_PROD_GROUP_ID.equals(that.C_PROD_GROUP_ID));
    equal = equal && (this.C_MSG_ID == null ? that.C_MSG_ID == null : this.C_MSG_ID.equals(that.C_MSG_ID));
    equal = equal && (this.C_MSG_DIGEST == null ? that.C_MSG_DIGEST == null : this.C_MSG_DIGEST.equals(that.C_MSG_DIGEST));
    equal = equal && (this.C_REQ_SOURCE == null ? that.C_REQ_SOURCE == null : this.C_REQ_SOURCE.equals(that.C_REQ_SOURCE));
    equal = equal && (this.C_ITEM_ID == null ? that.C_ITEM_ID == null : this.C_ITEM_ID.equals(that.C_ITEM_ID));
    equal = equal && (this.C_SRC_REQ_ID == null ? that.C_SRC_REQ_ID == null : this.C_SRC_REQ_ID.equals(that.C_SRC_REQ_ID));
    equal = equal && (this.C_EXPECTED_DATE == null ? that.C_EXPECTED_DATE == null : this.C_EXPECTED_DATE.equals(that.C_EXPECTED_DATE));
    equal = equal && (this.C_PRODUCT_DESC == null ? that.C_PRODUCT_DESC == null : this.C_PRODUCT_DESC.equals(that.C_PRODUCT_DESC));
    equal = equal && (this.C_DATE_ONHOLD == null ? that.C_DATE_ONHOLD == null : this.C_DATE_ONHOLD.equals(that.C_DATE_ONHOLD));
    equal = equal && (this.C_DATE_OFFHOLD == null ? that.C_DATE_OFFHOLD == null : this.C_DATE_OFFHOLD.equals(that.C_DATE_OFFHOLD));
    equal = equal && (this.C_ONHOLD_REASON == null ? that.C_ONHOLD_REASON == null : this.C_ONHOLD_REASON.equals(that.C_ONHOLD_REASON));
    equal = equal && (this.LATITUDE == null ? that.LATITUDE == null : this.LATITUDE.equals(that.LATITUDE));
    equal = equal && (this.LONGITUDE == null ? that.LONGITUDE == null : this.LONGITUDE.equals(that.LONGITUDE));
    equal = equal && (this.C_ON_SITE_PRESERVATION == null ? that.C_ON_SITE_PRESERVATION == null : this.C_ON_SITE_PRESERVATION.equals(that.C_ON_SITE_PRESERVATION));
    equal = equal && (this.C_PRESERVATION_METHOD == null ? that.C_PRESERVATION_METHOD == null : this.C_PRESERVATION_METHOD.equals(that.C_PRESERVATION_METHOD));
    equal = equal && (this.C_SAMPLING_PROCEDURE == null ? that.C_SAMPLING_PROCEDURE == null : this.C_SAMPLING_PROCEDURE.equals(that.C_SAMPLING_PROCEDURE));
    equal = equal && (this.C_SAMPLING_APPARATUS == null ? that.C_SAMPLING_APPARATUS == null : this.C_SAMPLING_APPARATUS.equals(that.C_SAMPLING_APPARATUS));
    equal = equal && (this.C_APPEARANCE == null ? that.C_APPEARANCE == null : this.C_APPEARANCE.equals(that.C_APPEARANCE));
    equal = equal && (this.C_COLOUR == null ? that.C_COLOUR == null : this.C_COLOUR.equals(that.C_COLOUR));
    equal = equal && (this.C_ODOUR == null ? that.C_ODOUR == null : this.C_ODOUR.equals(that.C_ODOUR));
    equal = equal && (this.C_SAMPLING_COLLECTION_LOC == null ? that.C_SAMPLING_COLLECTION_LOC == null : this.C_SAMPLING_COLLECTION_LOC.equals(that.C_SAMPLING_COLLECTION_LOC));
    equal = equal && (this.C_REPORT_ID == null ? that.C_REPORT_ID == null : this.C_REPORT_ID.equals(that.C_REPORT_ID));
    equal = equal && (this.C_DELIVERED_BY == null ? that.C_DELIVERED_BY == null : this.C_DELIVERED_BY.equals(that.C_DELIVERED_BY));
    equal = equal && (this.C_MAKANI_NO == null ? that.C_MAKANI_NO == null : this.C_MAKANI_NO.equals(that.C_MAKANI_NO));
    equal = equal && (this.C_COUNTRY == null ? that.C_COUNTRY == null : this.C_COUNTRY.equals(that.C_COUNTRY));
    equal = equal && (this.C_BUILDING_FLOOR == null ? that.C_BUILDING_FLOOR == null : this.C_BUILDING_FLOOR.equals(that.C_BUILDING_FLOOR));
    equal = equal && (this.C_LOCATION_DESC == null ? that.C_LOCATION_DESC == null : this.C_LOCATION_DESC.equals(that.C_LOCATION_DESC));
    equal = equal && (this.C_ITEM_BARCODE == null ? that.C_ITEM_BARCODE == null : this.C_ITEM_BARCODE.equals(that.C_ITEM_BARCODE));
    equal = equal && (this.C_ITEM_BRAND == null ? that.C_ITEM_BRAND == null : this.C_ITEM_BRAND.equals(that.C_ITEM_BRAND));
    equal = equal && (this.C_MANUFACTURER == null ? that.C_MANUFACTURER == null : this.C_MANUFACTURER.equals(that.C_MANUFACTURER));
    equal = equal && (this.C_COUNTRY_ORIGIN == null ? that.C_COUNTRY_ORIGIN == null : this.C_COUNTRY_ORIGIN.equals(that.C_COUNTRY_ORIGIN));
    equal = equal && (this.C_ITEM_TRADE_NAME == null ? that.C_ITEM_TRADE_NAME == null : this.C_ITEM_TRADE_NAME.equals(that.C_ITEM_TRADE_NAME));
    equal = equal && (this.C_PROCESS_ONE == null ? that.C_PROCESS_ONE == null : this.C_PROCESS_ONE.equals(that.C_PROCESS_ONE));
    equal = equal && (this.C_PROCESS_TWO == null ? that.C_PROCESS_TWO == null : this.C_PROCESS_TWO.equals(that.C_PROCESS_TWO));
    equal = equal && (this.C_SHELF_LIFE == null ? that.C_SHELF_LIFE == null : this.C_SHELF_LIFE.equals(that.C_SHELF_LIFE));
    equal = equal && (this.C_SHELF_LIFE_UNIT == null ? that.C_SHELF_LIFE_UNIT == null : this.C_SHELF_LIFE_UNIT.equals(that.C_SHELF_LIFE_UNIT));
    equal = equal && (this.C_STORAGE_CONDITION == null ? that.C_STORAGE_CONDITION == null : this.C_STORAGE_CONDITION.equals(that.C_STORAGE_CONDITION));
    equal = equal && (this.C_WEIGHT == null ? that.C_WEIGHT == null : this.C_WEIGHT.equals(that.C_WEIGHT));
    equal = equal && (this.C_WEIGHT_UNIT == null ? that.C_WEIGHT_UNIT == null : this.C_WEIGHT_UNIT.equals(that.C_WEIGHT_UNIT));
    equal = equal && (this.C_PACKAGING_TYPE == null ? that.C_PACKAGING_TYPE == null : this.C_PACKAGING_TYPE.equals(that.C_PACKAGING_TYPE));
    equal = equal && (this.C_TEST_TYPE == null ? that.C_TEST_TYPE == null : this.C_TEST_TYPE.equals(that.C_TEST_TYPE));
    equal = equal && (this.C_EXTERNAL_REFERENCE == null ? that.C_EXTERNAL_REFERENCE == null : this.C_EXTERNAL_REFERENCE.equals(that.C_EXTERNAL_REFERENCE));
    equal = equal && (this.C_NOMINAL_SIZE == null ? that.C_NOMINAL_SIZE == null : this.C_NOMINAL_SIZE.equals(that.C_NOMINAL_SIZE));
    equal = equal && (this.C_LAYER_MIX_TYPE == null ? that.C_LAYER_MIX_TYPE == null : this.C_LAYER_MIX_TYPE.equals(that.C_LAYER_MIX_TYPE));
    equal = equal && (this.C_SAMPLE_UNIT == null ? that.C_SAMPLE_UNIT == null : this.C_SAMPLE_UNIT.equals(that.C_SAMPLE_UNIT));
    equal = equal && (this.C_SAMP_QNTY == null ? that.C_SAMP_QNTY == null : this.C_SAMP_QNTY.equals(that.C_SAMP_QNTY));
    equal = equal && (this.C_SAMPLED_BY == null ? that.C_SAMPLED_BY == null : this.C_SAMPLED_BY.equals(that.C_SAMPLED_BY));
    equal = equal && (this.C_BITUMEN_LOCALSUPPLIER == null ? that.C_BITUMEN_LOCALSUPPLIER == null : this.C_BITUMEN_LOCALSUPPLIER.equals(that.C_BITUMEN_LOCALSUPPLIER));
    equal = equal && (this.C_BLOCK_TOTALBUNDLES == null ? that.C_BLOCK_TOTALBUNDLES == null : this.C_BLOCK_TOTALBUNDLES.equals(that.C_BLOCK_TOTALBUNDLES));
    equal = equal && (this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX == null ? that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX == null : this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX.equals(that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX));
    equal = equal && (this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY == null ? that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY == null : this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY.equals(that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY));
    equal = equal && (this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ == null ? that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ == null : this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ.equals(that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ));
    equal = equal && (this.C_BLOCK_BLOCKSPERBUNDLE == null ? that.C_BLOCK_BLOCKSPERBUNDLE == null : this.C_BLOCK_BLOCKSPERBUNDLE.equals(that.C_BLOCK_BLOCKSPERBUNDLE));
    equal = equal && (this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID == null ? that.C_BLOCK_RELATEDCERTIFICATIONREQUESTID == null : this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID.equals(that.C_BLOCK_RELATEDCERTIFICATIONREQUESTID));
    equal = equal && (this.C_MORTAR_WATERORCEMENTRATIO == null ? that.C_MORTAR_WATERORCEMENTRATIO == null : this.C_MORTAR_WATERORCEMENTRATIO.equals(that.C_MORTAR_WATERORCEMENTRATIO));
    equal = equal && (this.C_MORTAR_TYPEOFMORTAR == null ? that.C_MORTAR_TYPEOFMORTAR == null : this.C_MORTAR_TYPEOFMORTAR.equals(that.C_MORTAR_TYPEOFMORTAR));
    equal = equal && (this.C_THERMALINSULATION_NOMTHICKNESS == null ? that.C_THERMALINSULATION_NOMTHICKNESS == null : this.C_THERMALINSULATION_NOMTHICKNESS.equals(that.C_THERMALINSULATION_NOMTHICKNESS));
    equal = equal && (this.C_THERMALINSULATION_NOMDENSITY == null ? that.C_THERMALINSULATION_NOMDENSITY == null : this.C_THERMALINSULATION_NOMDENSITY.equals(that.C_THERMALINSULATION_NOMDENSITY));
    equal = equal && (this.C_THERMALINSULATION_NOMDIAMETER == null ? that.C_THERMALINSULATION_NOMDIAMETER == null : this.C_THERMALINSULATION_NOMDIAMETER.equals(that.C_THERMALINSULATION_NOMDIAMETER));
    equal = equal && (this.C_THERMALINSULATION_FACINGTYPE == null ? that.C_THERMALINSULATION_FACINGTYPE == null : this.C_THERMALINSULATION_FACINGTYPE.equals(that.C_THERMALINSULATION_FACINGTYPE));
    equal = equal && (this.C_THERMALINSULATION_FACINGDESCRIPTION == null ? that.C_THERMALINSULATION_FACINGDESCRIPTION == null : this.C_THERMALINSULATION_FACINGDESCRIPTION.equals(that.C_THERMALINSULATION_FACINGDESCRIPTION));
    equal = equal && (this.C_THERMALINSULATION_TESTTEMPORHUMIDITY == null ? that.C_THERMALINSULATION_TESTTEMPORHUMIDITY == null : this.C_THERMALINSULATION_TESTTEMPORHUMIDITY.equals(that.C_THERMALINSULATION_TESTTEMPORHUMIDITY));
    equal = equal && (this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY == null ? that.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY == null : this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY.equals(that.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY));
    equal = equal && (this.C_THERMALINSULATION_AGEOFSAMPLEDAYS == null ? that.C_THERMALINSULATION_AGEOFSAMPLEDAYS == null : this.C_THERMALINSULATION_AGEOFSAMPLEDAYS.equals(that.C_THERMALINSULATION_AGEOFSAMPLEDAYS));
    equal = equal && (this.C_LUBEOIL_VISCOSITYGRADE == null ? that.C_LUBEOIL_VISCOSITYGRADE == null : this.C_LUBEOIL_VISCOSITYGRADE.equals(that.C_LUBEOIL_VISCOSITYGRADE));
    equal = equal && (this.C_ASPHALT_REFGMB == null ? that.C_ASPHALT_REFGMB == null : this.C_ASPHALT_REFGMB.equals(that.C_ASPHALT_REFGMB));
    equal = equal && (this.C_ASPHALT_REFGSB == null ? that.C_ASPHALT_REFGSB == null : this.C_ASPHALT_REFGSB.equals(that.C_ASPHALT_REFGSB));
    equal = equal && (this.C_ASPHALT_REFGSE == null ? that.C_ASPHALT_REFGSE == null : this.C_ASPHALT_REFGSE.equals(that.C_ASPHALT_REFGSE));
    equal = equal && (this.C_ASPHALT_REFGB == null ? that.C_ASPHALT_REFGB == null : this.C_ASPHALT_REFGB.equals(that.C_ASPHALT_REFGB));
    equal = equal && (this.C_ASPHALT_LAYINGDATE == null ? that.C_ASPHALT_LAYINGDATE == null : this.C_ASPHALT_LAYINGDATE.equals(that.C_ASPHALT_LAYINGDATE));
    equal = equal && (this.C_ASPHALT_REFMARSHALLREQNO == null ? that.C_ASPHALT_REFMARSHALLREQNO == null : this.C_ASPHALT_REFMARSHALLREQNO.equals(that.C_ASPHALT_REFMARSHALLREQNO));
    equal = equal && (this.C_ASPHALT_REFBITUMENREQNO == null ? that.C_ASPHALT_REFBITUMENREQNO == null : this.C_ASPHALT_REFBITUMENREQNO.equals(that.C_ASPHALT_REFBITUMENREQNO));
    equal = equal && (this.C_ASPHALT_REFMIX == null ? that.C_ASPHALT_REFMIX == null : this.C_ASPHALT_REFMIX.equals(that.C_ASPHALT_REFMIX));
    equal = equal && (this.C_ASPHALT_CALIBRATIONFACTOR == null ? that.C_ASPHALT_CALIBRATIONFACTOR == null : this.C_ASPHALT_CALIBRATIONFACTOR.equals(that.C_ASPHALT_CALIBRATIONFACTOR));
    equal = equal && (this.C_ASPHALT_GRADINGORBITUMENSPECS == null ? that.C_ASPHALT_GRADINGORBITUMENSPECS == null : this.C_ASPHALT_GRADINGORBITUMENSPECS.equals(that.C_ASPHALT_GRADINGORBITUMENSPECS));
    equal = equal && (this.C_ASPHALT_OTHERSPECS == null ? that.C_ASPHALT_OTHERSPECS == null : this.C_ASPHALT_OTHERSPECS.equals(that.C_ASPHALT_OTHERSPECS));
    equal = equal && (this.C_CEMENT_CLASSOFCEMENT == null ? that.C_CEMENT_CLASSOFCEMENT == null : this.C_CEMENT_CLASSOFCEMENT.equals(that.C_CEMENT_CLASSOFCEMENT));
    equal = equal && (this.C_CONCRETE_GRADEOFCONCRETE == null ? that.C_CONCRETE_GRADEOFCONCRETE == null : this.C_CONCRETE_GRADEOFCONCRETE.equals(that.C_CONCRETE_GRADEOFCONCRETE));
    equal = equal && (this.C_CONCRETE_CEMENTCONTENT == null ? that.C_CONCRETE_CEMENTCONTENT == null : this.C_CONCRETE_CEMENTCONTENT.equals(that.C_CONCRETE_CEMENTCONTENT));
    equal = equal && (this.C_CONCRETE_TESTINGAGEOFSAMPLE == null ? that.C_CONCRETE_TESTINGAGEOFSAMPLE == null : this.C_CONCRETE_TESTINGAGEOFSAMPLE.equals(that.C_CONCRETE_TESTINGAGEOFSAMPLE));
    equal = equal && (this.C_CONCRETE_ESTIMATEDTESTDATE == null ? that.C_CONCRETE_ESTIMATEDTESTDATE == null : this.C_CONCRETE_ESTIMATEDTESTDATE.equals(that.C_CONCRETE_ESTIMATEDTESTDATE));
    equal = equal && (this.C_CONCRETE_TRUCKNUMBER == null ? that.C_CONCRETE_TRUCKNUMBER == null : this.C_CONCRETE_TRUCKNUMBER.equals(that.C_CONCRETE_TRUCKNUMBER));
    equal = equal && (this.C_CONCRETE_PLACEOFMAKINGCUBES == null ? that.C_CONCRETE_PLACEOFMAKINGCUBES == null : this.C_CONCRETE_PLACEOFMAKINGCUBES.equals(that.C_CONCRETE_PLACEOFMAKINGCUBES));
    equal = equal && (this.C_CONCRETE_EQUIPMENTTYPEUSED == null ? that.C_CONCRETE_EQUIPMENTTYPEUSED == null : this.C_CONCRETE_EQUIPMENTTYPEUSED.equals(that.C_CONCRETE_EQUIPMENTTYPEUSED));
    equal = equal && (this.C_CONCRETE_CURINGORSTORAGECONDITIONS == null ? that.C_CONCRETE_CURINGORSTORAGECONDITIONS == null : this.C_CONCRETE_CURINGORSTORAGECONDITIONS.equals(that.C_CONCRETE_CURINGORSTORAGECONDITIONS));
    equal = equal && (this.C_CONCRETE_METHODOFCOMPACTION == null ? that.C_CONCRETE_METHODOFCOMPACTION == null : this.C_CONCRETE_METHODOFCOMPACTION.equals(that.C_CONCRETE_METHODOFCOMPACTION));
    equal = equal && (this.C_CONCRETE_CONDITIONOFSAMPLE == null ? that.C_CONCRETE_CONDITIONOFSAMPLE == null : this.C_CONCRETE_CONDITIONOFSAMPLE.equals(that.C_CONCRETE_CONDITIONOFSAMPLE));
    equal = equal && (this.C_FRESHCONCRETE_CEMENT == null ? that.C_FRESHCONCRETE_CEMENT == null : this.C_FRESHCONCRETE_CEMENT.equals(that.C_FRESHCONCRETE_CEMENT));
    equal = equal && (this.C_FRESHCONCRETE_CEMENTTYPE == null ? that.C_FRESHCONCRETE_CEMENTTYPE == null : this.C_FRESHCONCRETE_CEMENTTYPE.equals(that.C_FRESHCONCRETE_CEMENTTYPE));
    equal = equal && (this.C_FRESHCONCRETE_ADMIXTURE == null ? that.C_FRESHCONCRETE_ADMIXTURE == null : this.C_FRESHCONCRETE_ADMIXTURE.equals(that.C_FRESHCONCRETE_ADMIXTURE));
    equal = equal && (this.C_FRESHCONCRETE_ADMIXTURETYPE == null ? that.C_FRESHCONCRETE_ADMIXTURETYPE == null : this.C_FRESHCONCRETE_ADMIXTURETYPE.equals(that.C_FRESHCONCRETE_ADMIXTURETYPE));
    equal = equal && (this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE == null ? that.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE == null : this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE.equals(that.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE));
    equal = equal && (this.C_FRESHCONCRETE_AGGREGATE_20MM == null ? that.C_FRESHCONCRETE_AGGREGATE_20MM == null : this.C_FRESHCONCRETE_AGGREGATE_20MM.equals(that.C_FRESHCONCRETE_AGGREGATE_20MM));
    equal = equal && (this.C_FRESHCONCRETE_AGGREGATE_10MM == null ? that.C_FRESHCONCRETE_AGGREGATE_10MM == null : this.C_FRESHCONCRETE_AGGREGATE_10MM.equals(that.C_FRESHCONCRETE_AGGREGATE_10MM));
    equal = equal && (this.C_FRESHCONCRETE_AGGREGATE_1MM == null ? that.C_FRESHCONCRETE_AGGREGATE_1MM == null : this.C_FRESHCONCRETE_AGGREGATE_1MM.equals(that.C_FRESHCONCRETE_AGGREGATE_1MM));
    equal = equal && (this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE == null ? that.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE == null : this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE.equals(that.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE));
    equal = equal && (this.C_SOIL_MDD == null ? that.C_SOIL_MDD == null : this.C_SOIL_MDD.equals(that.C_SOIL_MDD));
    equal = equal && (this.C_SOIL_OMC == null ? that.C_SOIL_OMC == null : this.C_SOIL_OMC.equals(that.C_SOIL_OMC));
    equal = equal && (this.C_SOIL_MDD_OMC_REF == null ? that.C_SOIL_MDD_OMC_REF == null : this.C_SOIL_MDD_OMC_REF.equals(that.C_SOIL_MDD_OMC_REF));
    equal = equal && (this.C_SOIL_BFRL == null ? that.C_SOIL_BFRL == null : this.C_SOIL_BFRL.equals(that.C_SOIL_BFRL));
    equal = equal && (this.C_SOIL_LAYER_THICKNESSMM == null ? that.C_SOIL_LAYER_THICKNESSMM == null : this.C_SOIL_LAYER_THICKNESSMM.equals(that.C_SOIL_LAYER_THICKNESSMM));
    equal = equal && (this.C_SOIL_SOURCE_MINERAL_AGG == null ? that.C_SOIL_SOURCE_MINERAL_AGG == null : this.C_SOIL_SOURCE_MINERAL_AGG.equals(that.C_SOIL_SOURCE_MINERAL_AGG));
    equal = equal && (this.C_STEEL_MANUFACTURER_CERT_NO == null ? that.C_STEEL_MANUFACTURER_CERT_NO == null : this.C_STEEL_MANUFACTURER_CERT_NO.equals(that.C_STEEL_MANUFACTURER_CERT_NO));
    equal = equal && (this.C_STEEL_GRADE_STEEL == null ? that.C_STEEL_GRADE_STEEL == null : this.C_STEEL_GRADE_STEEL.equals(that.C_STEEL_GRADE_STEEL));
    equal = equal && (this.C_STEEL_LOCAL_SUPPLIER == null ? that.C_STEEL_LOCAL_SUPPLIER == null : this.C_STEEL_LOCAL_SUPPLIER.equals(that.C_STEEL_LOCAL_SUPPLIER));
    equal = equal && (this.C_STEEL_HEAT_NUMBER == null ? that.C_STEEL_HEAT_NUMBER == null : this.C_STEEL_HEAT_NUMBER.equals(that.C_STEEL_HEAT_NUMBER));
    equal = equal && (this.C_PRODUCT_TEST_SERV == null ? that.C_PRODUCT_TEST_SERV == null : this.C_PRODUCT_TEST_SERV.equals(that.C_PRODUCT_TEST_SERV));
    equal = equal && (this.C_SAMPLING_METHOD == null ? that.C_SAMPLING_METHOD == null : this.C_SAMPLING_METHOD.equals(that.C_SAMPLING_METHOD));
    equal = equal && (this.C_SAMPLE_DESC == null ? that.C_SAMPLE_DESC == null : this.C_SAMPLE_DESC.equals(that.C_SAMPLE_DESC));
    equal = equal && (this.C_BATCH_SIZE == null ? that.C_BATCH_SIZE == null : this.C_BATCH_SIZE.equals(that.C_BATCH_SIZE));
    equal = equal && (this.C_UNITNO == null ? that.C_UNITNO == null : this.C_UNITNO.equals(that.C_UNITNO));
    equal = equal && (this.C_UNITSIZE == null ? that.C_UNITSIZE == null : this.C_UNITSIZE.equals(that.C_UNITSIZE));
    equal = equal && (this.C_NO_INCREMENT == null ? that.C_NO_INCREMENT == null : this.C_NO_INCREMENT.equals(that.C_NO_INCREMENT));
    equal = equal && (this.C_MORE_SAMPLE_NOTE == null ? that.C_MORE_SAMPLE_NOTE == null : this.C_MORE_SAMPLE_NOTE.equals(that.C_MORE_SAMPLE_NOTE));
    equal = equal && (this.C_STAGES == null ? that.C_STAGES == null : this.C_STAGES.equals(that.C_STAGES));
    equal = equal && (this.C_RETURN_NOTE == null ? that.C_RETURN_NOTE == null : this.C_RETURN_NOTE.equals(that.C_RETURN_NOTE));
    equal = equal && (this.C_DISCARD == null ? that.C_DISCARD == null : this.C_DISCARD.equals(that.C_DISCARD));
    equal = equal && (this.C_DISCARD_DATE == null ? that.C_DISCARD_DATE == null : this.C_DISCARD_DATE.equals(that.C_DISCARD_DATE));
    equal = equal && (this.C_DISCARD_BY == null ? that.C_DISCARD_BY == null : this.C_DISCARD_BY.equals(that.C_DISCARD_BY));
    equal = equal && (this.C_TRAVEL_CALCULATED == null ? that.C_TRAVEL_CALCULATED == null : this.C_TRAVEL_CALCULATED.equals(that.C_TRAVEL_CALCULATED));
    equal = equal && (this.C_PHYSICAL_OBSERVATION == null ? that.C_PHYSICAL_OBSERVATION == null : this.C_PHYSICAL_OBSERVATION.equals(that.C_PHYSICAL_OBSERVATION));
    equal = equal && (this.C_SENDER_NO == null ? that.C_SENDER_NO == null : this.C_SENDER_NO.equals(that.C_SENDER_NO));
    equal = equal && (this.C_REF_SENDER_NO == null ? that.C_REF_SENDER_NO == null : this.C_REF_SENDER_NO.equals(that.C_REF_SENDER_NO));
    equal = equal && (this.C_TESTLAB == null ? that.C_TESTLAB == null : this.C_TESTLAB.equals(that.C_TESTLAB));
    equal = equal && (this.C_PRIMARY_RESULT == null ? that.C_PRIMARY_RESULT == null : this.C_PRIMARY_RESULT.equals(that.C_PRIMARY_RESULT));
    equal = equal && (this.C_PRIMARY_REPORT_NO == null ? that.C_PRIMARY_REPORT_NO == null : this.C_PRIMARY_REPORT_NO.equals(that.C_PRIMARY_REPORT_NO));
    equal = equal && (this.C_REF_RESULT == null ? that.C_REF_RESULT == null : this.C_REF_RESULT.equals(that.C_REF_RESULT));
    equal = equal && (this.C_REF_REPORT_NO == null ? that.C_REF_REPORT_NO == null : this.C_REF_REPORT_NO.equals(that.C_REF_REPORT_NO));
    equal = equal && (this.C_DETERMINATION == null ? that.C_DETERMINATION == null : this.C_DETERMINATION.equals(that.C_DETERMINATION));
    equal = equal && (this.C_EQUIPMENT_TYPE == null ? that.C_EQUIPMENT_TYPE == null : this.C_EQUIPMENT_TYPE.equals(that.C_EQUIPMENT_TYPE));
    equal = equal && (this.C_EQUIPMENT_CLASS == null ? that.C_EQUIPMENT_CLASS == null : this.C_EQUIPMENT_CLASS.equals(that.C_EQUIPMENT_CLASS));
    equal = equal && (this.C_CAPACITY == null ? that.C_CAPACITY == null : this.C_CAPACITY.equals(that.C_CAPACITY));
    equal = equal && (this.C_NO_OF_MEASUREMENTS == null ? that.C_NO_OF_MEASUREMENTS == null : this.C_NO_OF_MEASUREMENTS.equals(that.C_NO_OF_MEASUREMENTS));
    equal = equal && (this.C_REQ_DATE_CALIB == null ? that.C_REQ_DATE_CALIB == null : this.C_REQ_DATE_CALIB.equals(that.C_REQ_DATE_CALIB));
    equal = equal && (this.C_CALIB_SITE == null ? that.C_CALIB_SITE == null : this.C_CALIB_SITE.equals(that.C_CALIB_SITE));
    equal = equal && (this.C_CALIB_METHOD == null ? that.C_CALIB_METHOD == null : this.C_CALIB_METHOD.equals(that.C_CALIB_METHOD));
    equal = equal && (this.C_ASSET_NAME == null ? that.C_ASSET_NAME == null : this.C_ASSET_NAME.equals(that.C_ASSET_NAME));
    equal = equal && (this.C_MODEL_NO == null ? that.C_MODEL_NO == null : this.C_MODEL_NO.equals(that.C_MODEL_NO));
    equal = equal && (this.C_PURCHASE_DATE == null ? that.C_PURCHASE_DATE == null : this.C_PURCHASE_DATE.equals(that.C_PURCHASE_DATE));
    equal = equal && (this.C_PURCHASE_PRICE == null ? that.C_PURCHASE_PRICE == null : this.C_PURCHASE_PRICE.equals(that.C_PURCHASE_PRICE));
    equal = equal && (this.C_DELIVERY_RECD == null ? that.C_DELIVERY_RECD == null : this.C_DELIVERY_RECD.equals(that.C_DELIVERY_RECD));
    equal = equal && (this.C_DATE_OF_INSTALL == null ? that.C_DATE_OF_INSTALL == null : this.C_DATE_OF_INSTALL.equals(that.C_DATE_OF_INSTALL));
    equal = equal && (this.C_TAG_NO == null ? that.C_TAG_NO == null : this.C_TAG_NO.equals(that.C_TAG_NO));
    equal = equal && (this.C_SERIAL_NO == null ? that.C_SERIAL_NO == null : this.C_SERIAL_NO.equals(that.C_SERIAL_NO));
    equal = equal && (this.C_NO_OF_ACCESSORIES == null ? that.C_NO_OF_ACCESSORIES == null : this.C_NO_OF_ACCESSORIES.equals(that.C_NO_OF_ACCESSORIES));
    equal = equal && (this.C_ACCESSORY_DETAIL == null ? that.C_ACCESSORY_DETAIL == null : this.C_ACCESSORY_DETAIL.equals(that.C_ACCESSORY_DETAIL));
    equal = equal && (this.C_ADDR_ROOM_NO == null ? that.C_ADDR_ROOM_NO == null : this.C_ADDR_ROOM_NO.equals(that.C_ADDR_ROOM_NO));
    equal = equal && (this.C_WARRANTY_EXP_DATE == null ? that.C_WARRANTY_EXP_DATE == null : this.C_WARRANTY_EXP_DATE.equals(that.C_WARRANTY_EXP_DATE));
    equal = equal && (this.C_UNDER_CONTRACT == null ? that.C_UNDER_CONTRACT == null : this.C_UNDER_CONTRACT.equals(that.C_UNDER_CONTRACT));
    equal = equal && (this.C_CONTRACT_NO == null ? that.C_CONTRACT_NO == null : this.C_CONTRACT_NO.equals(that.C_CONTRACT_NO));
    equal = equal && (this.C_CONTRACT_COMP == null ? that.C_CONTRACT_COMP == null : this.C_CONTRACT_COMP.equals(that.C_CONTRACT_COMP));
    equal = equal && (this.C_CONTRACT_START == null ? that.C_CONTRACT_START == null : this.C_CONTRACT_START.equals(that.C_CONTRACT_START));
    equal = equal && (this.C_CONTRACT_END == null ? that.C_CONTRACT_END == null : this.C_CONTRACT_END.equals(that.C_CONTRACT_END));
    equal = equal && (this.C_CALIB_TYPE == null ? that.C_CALIB_TYPE == null : this.C_CALIB_TYPE.equals(that.C_CALIB_TYPE));
    equal = equal && (this.C_AGE_GROUP_LABEL == null ? that.C_AGE_GROUP_LABEL == null : this.C_AGE_GROUP_LABEL.equals(that.C_AGE_GROUP_LABEL));
    equal = equal && (this.C_AGE_GROUP_TEST == null ? that.C_AGE_GROUP_TEST == null : this.C_AGE_GROUP_TEST.equals(that.C_AGE_GROUP_TEST));
    equal = equal && (this.C_TOYS_DIMENSION == null ? that.C_TOYS_DIMENSION == null : this.C_TOYS_DIMENSION.equals(that.C_TOYS_DIMENSION));
    equal = equal && (this.C_TOYS_FEATURES == null ? that.C_TOYS_FEATURES == null : this.C_TOYS_FEATURES.equals(that.C_TOYS_FEATURES));
    equal = equal && (this.C_TOYS_LABEL_DETAILS == null ? that.C_TOYS_LABEL_DETAILS == null : this.C_TOYS_LABEL_DETAILS.equals(that.C_TOYS_LABEL_DETAILS));
    equal = equal && (this.C_TEXTILE_CLASS == null ? that.C_TEXTILE_CLASS == null : this.C_TEXTILE_CLASS.equals(that.C_TEXTILE_CLASS));
    equal = equal && (this.C_TEXTILE_TYPE == null ? that.C_TEXTILE_TYPE == null : this.C_TEXTILE_TYPE.equals(that.C_TEXTILE_TYPE));
    equal = equal && (this.C_MONTAJI_REGISTERED == null ? that.C_MONTAJI_REGISTERED == null : this.C_MONTAJI_REGISTERED.equals(that.C_MONTAJI_REGISTERED));
    equal = equal && (this.C_MONTAJI_REF == null ? that.C_MONTAJI_REF == null : this.C_MONTAJI_REF.equals(that.C_MONTAJI_REF));
    equal = equal && (this.C_SEALING_PACK == null ? that.C_SEALING_PACK == null : this.C_SEALING_PACK.equals(that.C_SEALING_PACK));
    equal = equal && (this.C_TYPE == null ? that.C_TYPE == null : this.C_TYPE.equals(that.C_TYPE));
    equal = equal && (this.C_FORM == null ? that.C_FORM == null : this.C_FORM.equals(that.C_FORM));
    equal = equal && (this.C_FORM_TYPE == null ? that.C_FORM_TYPE == null : this.C_FORM_TYPE.equals(that.C_FORM_TYPE));
    equal = equal && (this.C_FINENESS == null ? that.C_FINENESS == null : this.C_FINENESS.equals(that.C_FINENESS));
    equal = equal && (this.C_SHAPE == null ? that.C_SHAPE == null : this.C_SHAPE.equals(that.C_SHAPE));
    equal = equal && (this.C_LABORATORY == null ? that.C_LABORATORY == null : this.C_LABORATORY.equals(that.C_LABORATORY));
    equal = equal && (this.C_CEMARK == null ? that.C_CEMARK == null : this.C_CEMARK.equals(that.C_CEMARK));
    equal = equal && (this.C_AGE == null ? that.C_AGE == null : this.C_AGE.equals(that.C_AGE));
    equal = equal && (this.C_GENDER == null ? that.C_GENDER == null : this.C_GENDER.equals(that.C_GENDER));
    equal = equal && (this.C_OWNER_NAME == null ? that.C_OWNER_NAME == null : this.C_OWNER_NAME.equals(that.C_OWNER_NAME));
    equal = equal && (this.C_CONSIGNMENT_NO == null ? that.C_CONSIGNMENT_NO == null : this.C_CONSIGNMENT_NO.equals(that.C_CONSIGNMENT_NO));
    equal = equal && (this.C_SAMPLE_ORIGIN == null ? that.C_SAMPLE_ORIGIN == null : this.C_SAMPLE_ORIGIN.equals(that.C_SAMPLE_ORIGIN));
    equal = equal && (this.C_MEAT_REQ_TYP == null ? that.C_MEAT_REQ_TYP == null : this.C_MEAT_REQ_TYP.equals(that.C_MEAT_REQ_TYP));
    equal = equal && (this.C_PURPOSE_TEST == null ? that.C_PURPOSE_TEST == null : this.C_PURPOSE_TEST.equals(that.C_PURPOSE_TEST));
    equal = equal && (this.C_COLL_CLARITY == null ? that.C_COLL_CLARITY == null : this.C_COLL_CLARITY.equals(that.C_COLL_CLARITY));
    equal = equal && (this.C_COLL_DESC == null ? that.C_COLL_DESC == null : this.C_COLL_DESC.equals(that.C_COLL_DESC));
    equal = equal && (this.C_COLL_ISCOLLSAMPLE == null ? that.C_COLL_ISCOLLSAMPLE == null : this.C_COLL_ISCOLLSAMPLE.equals(that.C_COLL_ISCOLLSAMPLE));
    equal = equal && (this.C_COLL_NAME == null ? that.C_COLL_NAME == null : this.C_COLL_NAME.equals(that.C_COLL_NAME));
    equal = equal && (this.C_COLL_EMIRATEID == null ? that.C_COLL_EMIRATEID == null : this.C_COLL_EMIRATEID.equals(that.C_COLL_EMIRATEID));
    equal = equal && (this.C_DCL_USERID == null ? that.C_DCL_USERID == null : this.C_DCL_USERID.equals(that.C_DCL_USERID));
    equal = equal && (this.C_FAILURE_DESC == null ? that.C_FAILURE_DESC == null : this.C_FAILURE_DESC.equals(that.C_FAILURE_DESC));
    equal = equal && (this.C_FAILURE_COMP == null ? that.C_FAILURE_COMP == null : this.C_FAILURE_COMP.equals(that.C_FAILURE_COMP));
    equal = equal && (this.C_WORK_FAIL == null ? that.C_WORK_FAIL == null : this.C_WORK_FAIL.equals(that.C_WORK_FAIL));
    equal = equal && (this.C_PURCHASE_REF == null ? that.C_PURCHASE_REF == null : this.C_PURCHASE_REF.equals(that.C_PURCHASE_REF));
    equal = equal && (this.C_PURCHASE_TYPE == null ? that.C_PURCHASE_TYPE == null : this.C_PURCHASE_TYPE.equals(that.C_PURCHASE_TYPE));
    equal = equal && (this.C_PEARL_FIELD == null ? that.C_PEARL_FIELD == null : this.C_PEARL_FIELD.equals(that.C_PEARL_FIELD));
    equal = equal && (this.C_POBOX == null ? that.C_POBOX == null : this.C_POBOX.equals(that.C_POBOX));
    equal = equal && (this.C_PRODUCT_DILUENT == null ? that.C_PRODUCT_DILUENT == null : this.C_PRODUCT_DILUENT.equals(that.C_PRODUCT_DILUENT));
    equal = equal && (this.C_ACTIVE_SUBSTANCE == null ? that.C_ACTIVE_SUBSTANCE == null : this.C_ACTIVE_SUBSTANCE.equals(that.C_ACTIVE_SUBSTANCE));
    equal = equal && (this.C_EDIT_ASSET == null ? that.C_EDIT_ASSET == null : this.C_EDIT_ASSET.equals(that.C_EDIT_ASSET));
    equal = equal && (this.C_PH == null ? that.C_PH == null : this.C_PH.equals(that.C_PH));
    equal = equal && (this.C_NATUREOFACTIVITY == null ? that.C_NATUREOFACTIVITY == null : this.C_NATUREOFACTIVITY.equals(that.C_NATUREOFACTIVITY));
    equal = equal && (this.C_CHLORINELEVEL == null ? that.C_CHLORINELEVEL == null : this.C_CHLORINELEVEL.equals(that.C_CHLORINELEVEL));
    equal = equal && (this.C_RISK_ASSESSMENT == null ? that.C_RISK_ASSESSMENT == null : this.C_RISK_ASSESSMENT.equals(that.C_RISK_ASSESSMENT));
    equal = equal && (this.C_SPECIMEN == null ? that.C_SPECIMEN == null : this.C_SPECIMEN.equals(that.C_SPECIMEN));
    return equal;
  }
  public boolean equals0(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof SAMPLE)) {
      return false;
    }
    SAMPLE that = (SAMPLE) o;
    boolean equal = true;
    equal = equal && (this.SAMPLE_NUMBER == null ? that.SAMPLE_NUMBER == null : this.SAMPLE_NUMBER.equals(that.SAMPLE_NUMBER));
    equal = equal && (this.TEXT_ID == null ? that.TEXT_ID == null : this.TEXT_ID.equals(that.TEXT_ID));
    equal = equal && (this.STATUS == null ? that.STATUS == null : this.STATUS.equals(that.STATUS));
    equal = equal && (this.OLD_STATUS == null ? that.OLD_STATUS == null : this.OLD_STATUS.equals(that.OLD_STATUS));
    equal = equal && (this.DISP_FLDS == null ? that.DISP_FLDS == null : this.DISP_FLDS.equals(that.DISP_FLDS));
    equal = equal && (this.LABEL_MASK == null ? that.LABEL_MASK == null : this.LABEL_MASK.equals(that.LABEL_MASK));
    equal = equal && (this.IN_SPEC == null ? that.IN_SPEC == null : this.IN_SPEC.equals(that.IN_SPEC));
    equal = equal && (this.IN_CAL == null ? that.IN_CAL == null : this.IN_CAL.equals(that.IN_CAL));
    equal = equal && (this.CHANGED_ON == null ? that.CHANGED_ON == null : this.CHANGED_ON.equals(that.CHANGED_ON));
    equal = equal && (this.RE_SAMPLE == null ? that.RE_SAMPLE == null : this.RE_SAMPLE.equals(that.RE_SAMPLE));
    equal = equal && (this.ALIQUOT == null ? that.ALIQUOT == null : this.ALIQUOT.equals(that.ALIQUOT));
    equal = equal && (this.ORIGINAL_SAMPLE == null ? that.ORIGINAL_SAMPLE == null : this.ORIGINAL_SAMPLE.equals(that.ORIGINAL_SAMPLE));
    equal = equal && (this.PARENT_SAMPLE == null ? that.PARENT_SAMPLE == null : this.PARENT_SAMPLE.equals(that.PARENT_SAMPLE));
    equal = equal && (this.PARENT_ALIQUOT == null ? that.PARENT_ALIQUOT == null : this.PARENT_ALIQUOT.equals(that.PARENT_ALIQUOT));
    equal = equal && (this.ALIQUOT_GROUP == null ? that.ALIQUOT_GROUP == null : this.ALIQUOT_GROUP.equals(that.ALIQUOT_GROUP));
    equal = equal && (this.SAMPLE_VOLUME == null ? that.SAMPLE_VOLUME == null : this.SAMPLE_VOLUME.equals(that.SAMPLE_VOLUME));
    equal = equal && (this.SAMPLE_UNITS == null ? that.SAMPLE_UNITS == null : this.SAMPLE_UNITS.equals(that.SAMPLE_UNITS));
    equal = equal && (this.LOGIN_DATE == null ? that.LOGIN_DATE == null : this.LOGIN_DATE.equals(that.LOGIN_DATE));
    equal = equal && (this.LOGIN_BY == null ? that.LOGIN_BY == null : this.LOGIN_BY.equals(that.LOGIN_BY));
    equal = equal && (this.SAMPLED_DATE == null ? that.SAMPLED_DATE == null : this.SAMPLED_DATE.equals(that.SAMPLED_DATE));
    equal = equal && (this.RECD_DATE == null ? that.RECD_DATE == null : this.RECD_DATE.equals(that.RECD_DATE));
    equal = equal && (this.RECEIVED_BY == null ? that.RECEIVED_BY == null : this.RECEIVED_BY.equals(that.RECEIVED_BY));
    equal = equal && (this.DATE_STARTED == null ? that.DATE_STARTED == null : this.DATE_STARTED.equals(that.DATE_STARTED));
    equal = equal && (this.STARTED == null ? that.STARTED == null : this.STARTED.equals(that.STARTED));
    equal = equal && (this.ASSIGNED_OPERATOR == null ? that.ASSIGNED_OPERATOR == null : this.ASSIGNED_OPERATOR.equals(that.ASSIGNED_OPERATOR));
    equal = equal && (this.DUE_DATE == null ? that.DUE_DATE == null : this.DUE_DATE.equals(that.DUE_DATE));
    equal = equal && (this.DATE_COMPLETED == null ? that.DATE_COMPLETED == null : this.DATE_COMPLETED.equals(that.DATE_COMPLETED));
    equal = equal && (this.DATE_REVIEWED == null ? that.DATE_REVIEWED == null : this.DATE_REVIEWED.equals(that.DATE_REVIEWED));
    equal = equal && (this.PREP == null ? that.PREP == null : this.PREP.equals(that.PREP));
    equal = equal && (this.PREP_DATE == null ? that.PREP_DATE == null : this.PREP_DATE.equals(that.PREP_DATE));
    equal = equal && (this.PREP_BY == null ? that.PREP_BY == null : this.PREP_BY.equals(that.PREP_BY));
    equal = equal && (this.REVIEWER == null ? that.REVIEWER == null : this.REVIEWER.equals(that.REVIEWER));
    equal = equal && (this.REVIEW_NOTE == null ? that.REVIEW_NOTE == null : this.REVIEW_NOTE.equals(that.REVIEW_NOTE));
    equal = equal && (this.PRODUCT_CODE == null ? that.PRODUCT_CODE == null : this.PRODUCT_CODE.equals(that.PRODUCT_CODE));
    equal = equal && (this.PRODUCT == null ? that.PRODUCT == null : this.PRODUCT.equals(that.PRODUCT));
    equal = equal && (this.PRODUCT_VERSION == null ? that.PRODUCT_VERSION == null : this.PRODUCT_VERSION.equals(that.PRODUCT_VERSION));
    equal = equal && (this.PRODUCT_GRADE == null ? that.PRODUCT_GRADE == null : this.PRODUCT_GRADE.equals(that.PRODUCT_GRADE));
    equal = equal && (this.SAMPLING_POINT == null ? that.SAMPLING_POINT == null : this.SAMPLING_POINT.equals(that.SAMPLING_POINT));
    equal = equal && (this.SAMPLE_TYPE == null ? that.SAMPLE_TYPE == null : this.SAMPLE_TYPE.equals(that.SAMPLE_TYPE));
    equal = equal && (this.PROJECT == null ? that.PROJECT == null : this.PROJECT.equals(that.PROJECT));
    equal = equal && (this.BATCH_NAME == null ? that.BATCH_NAME == null : this.BATCH_NAME.equals(that.BATCH_NAME));
    equal = equal && (this.BATCH_TEMPLATE == null ? that.BATCH_TEMPLATE == null : this.BATCH_TEMPLATE.equals(that.BATCH_TEMPLATE));
    equal = equal && (this.STEP == null ? that.STEP == null : this.STEP.equals(that.STEP));
    equal = equal && (this.SAMPLE_NAME == null ? that.SAMPLE_NAME == null : this.SAMPLE_NAME.equals(that.SAMPLE_NAME));
    equal = equal && (this.DESCRIPTION == null ? that.DESCRIPTION == null : this.DESCRIPTION.equals(that.DESCRIPTION));
    equal = equal && (this.PRIORITY == null ? that.PRIORITY == null : this.PRIORITY.equals(that.PRIORITY));
    equal = equal && (this.LOCATION == null ? that.LOCATION == null : this.LOCATION.equals(that.LOCATION));
    equal = equal && (this.CUSTOMER == null ? that.CUSTOMER == null : this.CUSTOMER.equals(that.CUSTOMER));
    equal = equal && (this.TEST_LIST == null ? that.TEST_LIST == null : this.TEST_LIST.equals(that.TEST_LIST));
    equal = equal && (this.TEMPLATE == null ? that.TEMPLATE == null : this.TEMPLATE.equals(that.TEMPLATE));
    equal = equal && (this.RECIPIENT == null ? that.RECIPIENT == null : this.RECIPIENT.equals(that.RECIPIENT));
    equal = equal && (this.STANDARD == null ? that.STANDARD == null : this.STANDARD.equals(that.STANDARD));
    equal = equal && (this.EXT_LINK == null ? that.EXT_LINK == null : this.EXT_LINK.equals(that.EXT_LINK));
    equal = equal && (this.CONDITION == null ? that.CONDITION == null : this.CONDITION.equals(that.CONDITION));
    equal = equal && (this.TIMEPOINT == null ? that.TIMEPOINT == null : this.TIMEPOINT.equals(that.TIMEPOINT));
    equal = equal && (this.LOT == null ? that.LOT == null : this.LOT.equals(that.LOT));
    equal = equal && (this.BASE_DATE == null ? that.BASE_DATE == null : this.BASE_DATE.equals(that.BASE_DATE));
    equal = equal && (this.AVAILABLE_DATE == null ? that.AVAILABLE_DATE == null : this.AVAILABLE_DATE.equals(that.AVAILABLE_DATE));
    equal = equal && (this.REQUIRED_DATE == null ? that.REQUIRED_DATE == null : this.REQUIRED_DATE.equals(that.REQUIRED_DATE));
    equal = equal && (this.TARGET_DATE == null ? that.TARGET_DATE == null : this.TARGET_DATE.equals(that.TARGET_DATE));
    equal = equal && (this.PARTIAL_SPEC == null ? that.PARTIAL_SPEC == null : this.PARTIAL_SPEC.equals(that.PARTIAL_SPEC));
    equal = equal && (this.SPEC_TYPE == null ? that.SPEC_TYPE == null : this.SPEC_TYPE.equals(that.SPEC_TYPE));
    equal = equal && (this.STAGE == null ? that.STAGE == null : this.STAGE.equals(that.STAGE));
    equal = equal && (this.PRIMARY_IN_SPEC == null ? that.PRIMARY_IN_SPEC == null : this.PRIMARY_IN_SPEC.equals(that.PRIMARY_IN_SPEC));
    equal = equal && (this.BATCH == null ? that.BATCH == null : this.BATCH.equals(that.BATCH));
    equal = equal && (this.CHARGE_CODE == null ? that.CHARGE_CODE == null : this.CHARGE_CODE.equals(that.CHARGE_CODE));
    equal = equal && (this.FORMULATION == null ? that.FORMULATION == null : this.FORMULATION.equals(that.FORMULATION));
    equal = equal && (this.PROTOCOL_LEVEL == null ? that.PROTOCOL_LEVEL == null : this.PROTOCOL_LEVEL.equals(that.PROTOCOL_LEVEL));
    equal = equal && (this.RELEASED == null ? that.RELEASED == null : this.RELEASED.equals(that.RELEASED));
    equal = equal && (this.RELEASED_BY == null ? that.RELEASED_BY == null : this.RELEASED_BY.equals(that.RELEASED_BY));
    equal = equal && (this.RELEASED_ON == null ? that.RELEASED_ON == null : this.RELEASED_ON.equals(that.RELEASED_ON));
    equal = equal && (this.IN_CONTROL == null ? that.IN_CONTROL == null : this.IN_CONTROL.equals(that.IN_CONTROL));
    equal = equal && (this.INVESTIGATION == null ? that.INVESTIGATION == null : this.INVESTIGATION.equals(that.INVESTIGATION));
    equal = equal && (this.INVESTIGATED == null ? that.INVESTIGATED == null : this.INVESTIGATED.equals(that.INVESTIGATED));
    equal = equal && (this.APPROVED == null ? that.APPROVED == null : this.APPROVED.equals(that.APPROVED));
    equal = equal && (this.APPROVAL_GROUP == null ? that.APPROVAL_GROUP == null : this.APPROVAL_GROUP.equals(that.APPROVAL_GROUP));
    equal = equal && (this.READY_FOR_APPROVAL == null ? that.READY_FOR_APPROVAL == null : this.READY_FOR_APPROVAL.equals(that.READY_FOR_APPROVAL));
    equal = equal && (this.APPROVAL_ID == null ? that.APPROVAL_ID == null : this.APPROVAL_ID.equals(that.APPROVAL_ID));
    equal = equal && (this.APPROVAL_ROUTING == null ? that.APPROVAL_ROUTING == null : this.APPROVAL_ROUTING.equals(that.APPROVAL_ROUTING));
    equal = equal && (this.MODIFIED_RESULTS == null ? that.MODIFIED_RESULTS == null : this.MODIFIED_RESULTS.equals(that.MODIFIED_RESULTS));
    equal = equal && (this.REPORT_NUMBER == null ? that.REPORT_NUMBER == null : this.REPORT_NUMBER.equals(that.REPORT_NUMBER));
    equal = equal && (this.COMPOSITE == null ? that.COMPOSITE == null : this.COMPOSITE.equals(that.COMPOSITE));
    equal = equal && (this.PARENT_COMPOSITE == null ? that.PARENT_COMPOSITE == null : this.PARENT_COMPOSITE.equals(that.PARENT_COMPOSITE));
    equal = equal && (this.COMPOSITE_TEMPLATE == null ? that.COMPOSITE_TEMPLATE == null : this.COMPOSITE_TEMPLATE.equals(that.COMPOSITE_TEMPLATE));
    equal = equal && (this.SEASON_DATE == null ? that.SEASON_DATE == null : this.SEASON_DATE.equals(that.SEASON_DATE));
    equal = equal && (this.PEOPLE == null ? that.PEOPLE == null : this.PEOPLE.equals(that.PEOPLE));
    equal = equal && (this.TEST_LOCATION == null ? that.TEST_LOCATION == null : this.TEST_LOCATION.equals(that.TEST_LOCATION));
    equal = equal && (this.OWNER_LOCATION == null ? that.OWNER_LOCATION == null : this.OWNER_LOCATION.equals(that.OWNER_LOCATION));
    equal = equal && (this.CHK_ALIQUOT_STATUS == null ? that.CHK_ALIQUOT_STATUS == null : this.CHK_ALIQUOT_STATUS.equals(that.CHK_ALIQUOT_STATUS));
    equal = equal && (this.CHK_ALIQUOT_SPECS == null ? that.CHK_ALIQUOT_SPECS == null : this.CHK_ALIQUOT_SPECS.equals(that.CHK_ALIQUOT_SPECS));
    equal = equal && (this.ALIQUOT_TEMPLATE == null ? that.ALIQUOT_TEMPLATE == null : this.ALIQUOT_TEMPLATE.equals(that.ALIQUOT_TEMPLATE));
    equal = equal && (this.CALC_GROUP == null ? that.CALC_GROUP == null : this.CALC_GROUP.equals(that.CALC_GROUP));
    equal = equal && (this.SAMPLE_EVENT == null ? that.SAMPLE_EVENT == null : this.SAMPLE_EVENT.equals(that.SAMPLE_EVENT));
    equal = equal && (this.LABEL_ID == null ? that.LABEL_ID == null : this.LABEL_ID.equals(that.LABEL_ID));
    equal = equal && (this.HAS_FLAGS == null ? that.HAS_FLAGS == null : this.HAS_FLAGS.equals(that.HAS_FLAGS));
    equal = equal && (this.VARIATION == null ? that.VARIATION == null : this.VARIATION.equals(that.VARIATION));
    equal = equal && (this.SAMPLED_BY == null ? that.SAMPLED_BY == null : this.SAMPLED_BY.equals(that.SAMPLED_BY));
    equal = equal && (this.SAMPLED == null ? that.SAMPLED == null : this.SAMPLED.equals(that.SAMPLED));
    equal = equal && (this.ORDER_NUM == null ? that.ORDER_NUM == null : this.ORDER_NUM.equals(that.ORDER_NUM));
    equal = equal && (this.LAST_ORDER_NUM == null ? that.LAST_ORDER_NUM == null : this.LAST_ORDER_NUM.equals(that.LAST_ORDER_NUM));
    equal = equal && (this.STORAGE_CONDITION == null ? that.STORAGE_CONDITION == null : this.STORAGE_CONDITION.equals(that.STORAGE_CONDITION));
    equal = equal && (this.CONTAINER_TYPE == null ? that.CONTAINER_TYPE == null : this.CONTAINER_TYPE.equals(that.CONTAINER_TYPE));
    equal = equal && (this.NUM_CONTAINERS == null ? that.NUM_CONTAINERS == null : this.NUM_CONTAINERS.equals(that.NUM_CONTAINERS));
    equal = equal && (this.IMPORTANT_MESSAGE == null ? that.IMPORTANT_MESSAGE == null : this.IMPORTANT_MESSAGE.equals(that.IMPORTANT_MESSAGE));
    equal = equal && (this.OBSERVATIONS == null ? that.OBSERVATIONS == null : this.OBSERVATIONS.equals(that.OBSERVATIONS));
    equal = equal && (this.LAB == null ? that.LAB == null : this.LAB.equals(that.LAB));
    equal = equal && (this.EXPIRATION_DATE == null ? that.EXPIRATION_DATE == null : this.EXPIRATION_DATE.equals(that.EXPIRATION_DATE));
    equal = equal && (this.REQD_VOLUME == null ? that.REQD_VOLUME == null : this.REQD_VOLUME.equals(that.REQD_VOLUME));
    equal = equal && (this.COLLECTION_METHOD == null ? that.COLLECTION_METHOD == null : this.COLLECTION_METHOD.equals(that.COLLECTION_METHOD));
    equal = equal && (this.COLLECTION_OFFSET == null ? that.COLLECTION_OFFSET == null : this.COLLECTION_OFFSET.equals(that.COLLECTION_OFFSET));
    equal = equal && (this.SIGNED == null ? that.SIGNED == null : this.SIGNED.equals(that.SIGNED));
    equal = equal && (this.CASE_NAME == null ? that.CASE_NAME == null : this.CASE_NAME.equals(that.CASE_NAME));
    equal = equal && (this.CONTRACT_NUMBER == null ? that.CONTRACT_NUMBER == null : this.CONTRACT_NUMBER.equals(that.CONTRACT_NUMBER));
    equal = equal && (this.BILLING_ITEM_DESC == null ? that.BILLING_ITEM_DESC == null : this.BILLING_ITEM_DESC.equals(that.BILLING_ITEM_DESC));
    equal = equal && (this.INTERPRETED == null ? that.INTERPRETED == null : this.INTERPRETED.equals(that.INTERPRETED));
    equal = equal && (this.INTERP_TYPE == null ? that.INTERP_TYPE == null : this.INTERP_TYPE.equals(that.INTERP_TYPE));
    equal = equal && (this.INSPECT_PNT_NUM == null ? that.INSPECT_PNT_NUM == null : this.INSPECT_PNT_NUM.equals(that.INSPECT_PNT_NUM));
    equal = equal && (this.INSPECTION_LOT_NUM == null ? that.INSPECTION_LOT_NUM == null : this.INSPECTION_LOT_NUM.equals(that.INSPECTION_LOT_NUM));
    equal = equal && (this.IS_INSPECT_PNT == null ? that.IS_INSPECT_PNT == null : this.IS_INSPECT_PNT.equals(that.IS_INSPECT_PNT));
    equal = equal && (this.PLANT == null ? that.PLANT == null : this.PLANT.equals(that.PLANT));
    equal = equal && (this.USERC1_VALUE == null ? that.USERC1_VALUE == null : this.USERC1_VALUE.equals(that.USERC1_VALUE));
    equal = equal && (this.USERC2_VALUE == null ? that.USERC2_VALUE == null : this.USERC2_VALUE.equals(that.USERC2_VALUE));
    equal = equal && (this.USERD1_VALUE == null ? that.USERD1_VALUE == null : this.USERD1_VALUE.equals(that.USERD1_VALUE));
    equal = equal && (this.USERN1_VALUE == null ? that.USERN1_VALUE == null : this.USERN1_VALUE.equals(that.USERN1_VALUE));
    equal = equal && (this.USERN2_VALUE == null ? that.USERN2_VALUE == null : this.USERN2_VALUE.equals(that.USERN2_VALUE));
    equal = equal && (this.USERT1_VALUE == null ? that.USERT1_VALUE == null : this.USERT1_VALUE.equals(that.USERT1_VALUE));
    equal = equal && (this.SAP_SELECTED_SET == null ? that.SAP_SELECTED_SET == null : this.SAP_SELECTED_SET.equals(that.SAP_SELECTED_SET));
    equal = equal && (this.SAP_CODE_GROUP == null ? that.SAP_CODE_GROUP == null : this.SAP_CODE_GROUP.equals(that.SAP_CODE_GROUP));
    equal = equal && (this.SAP_SAMPLE_NUMBER == null ? that.SAP_SAMPLE_NUMBER == null : this.SAP_SAMPLE_NUMBER.equals(that.SAP_SAMPLE_NUMBER));
    equal = equal && (this.SAP_SS_PLANT == null ? that.SAP_SS_PLANT == null : this.SAP_SS_PLANT.equals(that.SAP_SS_PLANT));
    equal = equal && (this.SAP_SAMPLE_COUNT == null ? that.SAP_SAMPLE_COUNT == null : this.SAP_SAMPLE_COUNT.equals(that.SAP_SAMPLE_COUNT));
    equal = equal && (this.OPERATION_NUMBER == null ? that.OPERATION_NUMBER == null : this.OPERATION_NUMBER.equals(that.OPERATION_NUMBER));
    equal = equal && (this.STORAGE_LOC_NO == null ? that.STORAGE_LOC_NO == null : this.STORAGE_LOC_NO.equals(that.STORAGE_LOC_NO));
    equal = equal && (this.EXTERNAL_LOCATION == null ? that.EXTERNAL_LOCATION == null : this.EXTERNAL_LOCATION.equals(that.EXTERNAL_LOCATION));
    equal = equal && (this.FORMULATION_NAME == null ? that.FORMULATION_NAME == null : this.FORMULATION_NAME.equals(that.FORMULATION_NAME));
    equal = equal && (this.STANDARD_REAGENT == null ? that.STANDARD_REAGENT == null : this.STANDARD_REAGENT.equals(that.STANDARD_REAGENT));
    equal = equal && (this.CONVERSION_GROUPS == null ? that.CONVERSION_GROUPS == null : this.CONVERSION_GROUPS.equals(that.CONVERSION_GROUPS));
    equal = equal && (this.REPORTED_RSLT_OOS == null ? that.REPORTED_RSLT_OOS == null : this.REPORTED_RSLT_OOS.equals(that.REPORTED_RSLT_OOS));
    equal = equal && (this.GROUP_NAME == null ? that.GROUP_NAME == null : this.GROUP_NAME.equals(that.GROUP_NAME));
    equal = equal && (this.PROCESS_UNIT == null ? that.PROCESS_UNIT == null : this.PROCESS_UNIT.equals(that.PROCESS_UNIT));
    equal = equal && (this.HAZARD == null ? that.HAZARD == null : this.HAZARD.equals(that.HAZARD));
    equal = equal && (this.INSTRUMENT == null ? that.INSTRUMENT == null : this.INSTRUMENT.equals(that.INSTRUMENT));
    equal = equal && (this.T_SITE == null ? that.T_SITE == null : this.T_SITE.equals(that.T_SITE));
    equal = equal && (this.T_PLANT == null ? that.T_PLANT == null : this.T_PLANT.equals(that.T_PLANT));
    equal = equal && (this.T_CERTIFICATE == null ? that.T_CERTIFICATE == null : this.T_CERTIFICATE.equals(that.T_CERTIFICATE));
    equal = equal && (this.T_CONTAINER == null ? that.T_CONTAINER == null : this.T_CONTAINER.equals(that.T_CONTAINER));
    equal = equal && (this.T_OVERDUE == null ? that.T_OVERDUE == null : this.T_OVERDUE.equals(that.T_OVERDUE));
    equal = equal && (this.T_PO_NUMBER == null ? that.T_PO_NUMBER == null : this.T_PO_NUMBER.equals(that.T_PO_NUMBER));
    equal = equal && (this.T_PRODUCTION_DATE == null ? that.T_PRODUCTION_DATE == null : this.T_PRODUCTION_DATE.equals(that.T_PRODUCTION_DATE));
    equal = equal && (this.T_REPORT_DATE == null ? that.T_REPORT_DATE == null : this.T_REPORT_DATE.equals(that.T_REPORT_DATE));
    equal = equal && (this.T_REQUESTED_BY == null ? that.T_REQUESTED_BY == null : this.T_REQUESTED_BY.equals(that.T_REQUESTED_BY));
    equal = equal && (this.T_LONG_NOTE == null ? that.T_LONG_NOTE == null : this.T_LONG_NOTE.equals(that.T_LONG_NOTE));
    equal = equal && (this.T_SHIFT_CODE == null ? that.T_SHIFT_CODE == null : this.T_SHIFT_CODE.equals(that.T_SHIFT_CODE));
    equal = equal && (this.T_SUPP_BATCH_NO == null ? that.T_SUPP_BATCH_NO == null : this.T_SUPP_BATCH_NO.equals(that.T_SUPP_BATCH_NO));
    equal = equal && (this.T_SUPPLIER == null ? that.T_SUPPLIER == null : this.T_SUPPLIER.equals(that.T_SUPPLIER));
    equal = equal && (this.T_TRUCK_VESSEL == null ? that.T_TRUCK_VESSEL == null : this.T_TRUCK_VESSEL.equals(that.T_TRUCK_VESSEL));
    equal = equal && (this.T_PLANT_RECV_BY == null ? that.T_PLANT_RECV_BY == null : this.T_PLANT_RECV_BY.equals(that.T_PLANT_RECV_BY));
    equal = equal && (this.T_PLANT_RECV_DATE == null ? that.T_PLANT_RECV_DATE == null : this.T_PLANT_RECV_DATE.equals(that.T_PLANT_RECV_DATE));
    equal = equal && (this.C_PRIORITY == null ? that.C_PRIORITY == null : this.C_PRIORITY.equals(that.C_PRIORITY));
    equal = equal && (this.STORAGE_TEMPLATE == null ? that.STORAGE_TEMPLATE == null : this.STORAGE_TEMPLATE.equals(that.STORAGE_TEMPLATE));
    equal = equal && (this.ALLOW_CHLD_ALQTS == null ? that.ALLOW_CHLD_ALQTS == null : this.ALLOW_CHLD_ALQTS.equals(that.ALLOW_CHLD_ALQTS));
    equal = equal && (this.PHASE == null ? that.PHASE == null : this.PHASE.equals(that.PHASE));
    equal = equal && (this.SCHEDULE_NUMBER == null ? that.SCHEDULE_NUMBER == null : this.SCHEDULE_NUMBER.equals(that.SCHEDULE_NUMBER));
    equal = equal && (this.T_ACTION_NUMBER == null ? that.T_ACTION_NUMBER == null : this.T_ACTION_NUMBER.equals(that.T_ACTION_NUMBER));
    equal = equal && (this.T_BATCH_NAME1 == null ? that.T_BATCH_NAME1 == null : this.T_BATCH_NAME1.equals(that.T_BATCH_NAME1));
    equal = equal && (this.T_BATCH_NAME2 == null ? that.T_BATCH_NAME2 == null : this.T_BATCH_NAME2.equals(that.T_BATCH_NAME2));
    equal = equal && (this.T_BATCH_NAME3 == null ? that.T_BATCH_NAME3 == null : this.T_BATCH_NAME3.equals(that.T_BATCH_NAME3));
    equal = equal && (this.T_BATCH_NAME4 == null ? that.T_BATCH_NAME4 == null : this.T_BATCH_NAME4.equals(that.T_BATCH_NAME4));
    equal = equal && (this.T_BATCH_NAME5 == null ? that.T_BATCH_NAME5 == null : this.T_BATCH_NAME5.equals(that.T_BATCH_NAME5));
    equal = equal && (this.T_BATCH_NAME6 == null ? that.T_BATCH_NAME6 == null : this.T_BATCH_NAME6.equals(that.T_BATCH_NAME6));
    equal = equal && (this.T_COLLECT_SCHEME == null ? that.T_COLLECT_SCHEME == null : this.T_COLLECT_SCHEME.equals(that.T_COLLECT_SCHEME));
    equal = equal && (this.T_COMPOSITE_GROUP == null ? that.T_COMPOSITE_GROUP == null : this.T_COMPOSITE_GROUP.equals(that.T_COMPOSITE_GROUP));
    equal = equal && (this.T_DISTRIBUTION_BY == null ? that.T_DISTRIBUTION_BY == null : this.T_DISTRIBUTION_BY.equals(that.T_DISTRIBUTION_BY));
    equal = equal && (this.T_DISTRIBUTION_DATE == null ? that.T_DISTRIBUTION_DATE == null : this.T_DISTRIBUTION_DATE.equals(that.T_DISTRIBUTION_DATE));
    equal = equal && (this.T_EM_PLAN == null ? that.T_EM_PLAN == null : this.T_EM_PLAN.equals(that.T_EM_PLAN));
    equal = equal && (this.T_INCUB1_BATCH == null ? that.T_INCUB1_BATCH == null : this.T_INCUB1_BATCH.equals(that.T_INCUB1_BATCH));
    equal = equal && (this.T_INCUB1_END == null ? that.T_INCUB1_END == null : this.T_INCUB1_END.equals(that.T_INCUB1_END));
    equal = equal && (this.T_INCUB1_START == null ? that.T_INCUB1_START == null : this.T_INCUB1_START.equals(that.T_INCUB1_START));
    equal = equal && (this.T_INCUB2_BATCH == null ? that.T_INCUB2_BATCH == null : this.T_INCUB2_BATCH.equals(that.T_INCUB2_BATCH));
    equal = equal && (this.T_INCUB2_END == null ? that.T_INCUB2_END == null : this.T_INCUB2_END.equals(that.T_INCUB2_END));
    equal = equal && (this.T_INCUB2_START == null ? that.T_INCUB2_START == null : this.T_INCUB2_START.equals(that.T_INCUB2_START));
    equal = equal && (this.T_MEDIA_REFERENCE == null ? that.T_MEDIA_REFERENCE == null : this.T_MEDIA_REFERENCE.equals(that.T_MEDIA_REFERENCE));
    equal = equal && (this.T_ORIGINAL_SAMPLE == null ? that.T_ORIGINAL_SAMPLE == null : this.T_ORIGINAL_SAMPLE.equals(that.T_ORIGINAL_SAMPLE));
    equal = equal && (this.T_PERSONNEL == null ? that.T_PERSONNEL == null : this.T_PERSONNEL.equals(that.T_PERSONNEL));
    equal = equal && (this.T_PERSONNEL_SET == null ? that.T_PERSONNEL_SET == null : this.T_PERSONNEL_SET.equals(that.T_PERSONNEL_SET));
    equal = equal && (this.T_SAMPLE_TYPE == null ? that.T_SAMPLE_TYPE == null : this.T_SAMPLE_TYPE.equals(that.T_SAMPLE_TYPE));
    equal = equal && (this.T_SCHEDULE_GROUP == null ? that.T_SCHEDULE_GROUP == null : this.T_SCHEDULE_GROUP.equals(that.T_SCHEDULE_GROUP));
    equal = equal && (this.T_SUITE == null ? that.T_SUITE == null : this.T_SUITE.equals(that.T_SUITE));
    equal = equal && (this.T_TRANSIT_LOCATION == null ? that.T_TRANSIT_LOCATION == null : this.T_TRANSIT_LOCATION.equals(that.T_TRANSIT_LOCATION));
    equal = equal && (this.T_VALIDATION == null ? that.T_VALIDATION == null : this.T_VALIDATION.equals(that.T_VALIDATION));
    equal = equal && (this.C_REFERENCE_ID == null ? that.C_REFERENCE_ID == null : this.C_REFERENCE_ID.equals(that.C_REFERENCE_ID));
    equal = equal && (this.C_SAMPLING_REASON == null ? that.C_SAMPLING_REASON == null : this.C_SAMPLING_REASON.equals(that.C_SAMPLING_REASON));
    equal = equal && (this.C_CUSTOMER_TYPE == null ? that.C_CUSTOMER_TYPE == null : this.C_CUSTOMER_TYPE.equals(that.C_CUSTOMER_TYPE));
    equal = equal && (this.C_REQUEST_TYPE == null ? that.C_REQUEST_TYPE == null : this.C_REQUEST_TYPE.equals(that.C_REQUEST_TYPE));
    equal = equal && (this.C_OTHER_SAMPLE_SOURCE == null ? that.C_OTHER_SAMPLE_SOURCE == null : this.C_OTHER_SAMPLE_SOURCE.equals(that.C_OTHER_SAMPLE_SOURCE));
    equal = equal && (this.C_CUST_ID == null ? that.C_CUST_ID == null : this.C_CUST_ID.equals(that.C_CUST_ID));
    equal = equal && (this.C_CLIENT_TYPE == null ? that.C_CLIENT_TYPE == null : this.C_CLIENT_TYPE.equals(that.C_CLIENT_TYPE));
    equal = equal && (this.C_REQ_SAMP_TYPE == null ? that.C_REQ_SAMP_TYPE == null : this.C_REQ_SAMP_TYPE.equals(that.C_REQ_SAMP_TYPE));
    equal = equal && (this.C_SAMPLE_SOURCE == null ? that.C_SAMPLE_SOURCE == null : this.C_SAMPLE_SOURCE.equals(that.C_SAMPLE_SOURCE));
    equal = equal && (this.C_DM_BARCODE == null ? that.C_DM_BARCODE == null : this.C_DM_BARCODE.equals(that.C_DM_BARCODE));
    equal = equal && (this.C_REQ_EXT_REFERENCE == null ? that.C_REQ_EXT_REFERENCE == null : this.C_REQ_EXT_REFERENCE.equals(that.C_REQ_EXT_REFERENCE));
    equal = equal && (this.C_EXPRESS_SERVICE == null ? that.C_EXPRESS_SERVICE == null : this.C_EXPRESS_SERVICE.equals(that.C_EXPRESS_SERVICE));
    equal = equal && (this.C_HARDCOPY_REQUIRED == null ? that.C_HARDCOPY_REQUIRED == null : this.C_HARDCOPY_REQUIRED.equals(that.C_HARDCOPY_REQUIRED));
    equal = equal && (this.C_REQ_REMARKS == null ? that.C_REQ_REMARKS == null : this.C_REQ_REMARKS.equals(that.C_REQ_REMARKS));
    equal = equal && (this.C_REQ_COPIES == null ? that.C_REQ_COPIES == null : this.C_REQ_COPIES.equals(that.C_REQ_COPIES));
    equal = equal && (this.C_REQ_EDIT == null ? that.C_REQ_EDIT == null : this.C_REQ_EDIT.equals(that.C_REQ_EDIT));
    equal = equal && (this.C_TOTAL_SERVICE_FEE == null ? that.C_TOTAL_SERVICE_FEE == null : this.C_TOTAL_SERVICE_FEE.equals(that.C_TOTAL_SERVICE_FEE));
    equal = equal && (this.C_PRODUCT_GROUP == null ? that.C_PRODUCT_GROUP == null : this.C_PRODUCT_GROUP.equals(that.C_PRODUCT_GROUP));
    equal = equal && (this.C_PRODUCT_CATEGORY == null ? that.C_PRODUCT_CATEGORY == null : this.C_PRODUCT_CATEGORY.equals(that.C_PRODUCT_CATEGORY));
    equal = equal && (this.C_PRODUCTION_DATE == null ? that.C_PRODUCTION_DATE == null : this.C_PRODUCTION_DATE.equals(that.C_PRODUCTION_DATE));
    equal = equal && (this.C_NO_OF_UNIT == null ? that.C_NO_OF_UNIT == null : this.C_NO_OF_UNIT.equals(that.C_NO_OF_UNIT));
    equal = equal && (this.C_SAMPLE_CONDITION == null ? that.C_SAMPLE_CONDITION == null : this.C_SAMPLE_CONDITION.equals(that.C_SAMPLE_CONDITION));
    equal = equal && (this.C_TEMP_REC == null ? that.C_TEMP_REC == null : this.C_TEMP_REC.equals(that.C_TEMP_REC));
    equal = equal && (this.C_POINT_OF_SAMPLING == null ? that.C_POINT_OF_SAMPLING == null : this.C_POINT_OF_SAMPLING.equals(that.C_POINT_OF_SAMPLING));
    equal = equal && (this.C_REQ_SAMP_COLLECTION == null ? that.C_REQ_SAMP_COLLECTION == null : this.C_REQ_SAMP_COLLECTION.equals(that.C_REQ_SAMP_COLLECTION));
    equal = equal && (this.C_REQ_SAMP_BAL_RETURN == null ? that.C_REQ_SAMP_BAL_RETURN == null : this.C_REQ_SAMP_BAL_RETURN.equals(that.C_REQ_SAMP_BAL_RETURN));
    equal = equal && (this.C_HAZARD == null ? that.C_HAZARD == null : this.C_HAZARD.equals(that.C_HAZARD));
    equal = equal && (this.C_BATCH_NO == null ? that.C_BATCH_NO == null : this.C_BATCH_NO.equals(that.C_BATCH_NO));
    equal = equal && (this.C_REQUEST_NO == null ? that.C_REQUEST_NO == null : this.C_REQUEST_NO.equals(that.C_REQUEST_NO));
    equal = equal && (this.C_BILLING_TYPE == null ? that.C_BILLING_TYPE == null : this.C_BILLING_TYPE.equals(that.C_BILLING_TYPE));
    equal = equal && (this.C_TOTAL_TEST_CHARGE == null ? that.C_TOTAL_TEST_CHARGE == null : this.C_TOTAL_TEST_CHARGE.equals(that.C_TOTAL_TEST_CHARGE));
    equal = equal && (this.C_VOUCHER == null ? that.C_VOUCHER == null : this.C_VOUCHER.equals(that.C_VOUCHER));
    equal = equal && (this.C_ERAD_NO == null ? that.C_ERAD_NO == null : this.C_ERAD_NO.equals(that.C_ERAD_NO));
    equal = equal && (this.C_RECEIPT == null ? that.C_RECEIPT == null : this.C_RECEIPT.equals(that.C_RECEIPT));
    equal = equal && (this.C_PAYMENT_DT == null ? that.C_PAYMENT_DT == null : this.C_PAYMENT_DT.equals(that.C_PAYMENT_DT));
    equal = equal && (this.C_PAYMENT_SRC == null ? that.C_PAYMENT_SRC == null : this.C_PAYMENT_SRC.equals(that.C_PAYMENT_SRC));
    equal = equal && (this.C_PAYMENT_STATUS == null ? that.C_PAYMENT_STATUS == null : this.C_PAYMENT_STATUS.equals(that.C_PAYMENT_STATUS));
    equal = equal && (this.C_CUST_DELIVERY_DATE == null ? that.C_CUST_DELIVERY_DATE == null : this.C_CUST_DELIVERY_DATE.equals(that.C_CUST_DELIVERY_DATE));
    equal = equal && (this.C_SAMPLE_OPINION == null ? that.C_SAMPLE_OPINION == null : this.C_SAMPLE_OPINION.equals(that.C_SAMPLE_OPINION));
    equal = equal && (this.C_SUBCAT_ID == null ? that.C_SUBCAT_ID == null : this.C_SUBCAT_ID.equals(that.C_SUBCAT_ID));
    equal = equal && (this.C_PRODCAT_ID == null ? that.C_PRODCAT_ID == null : this.C_PRODCAT_ID.equals(that.C_PRODCAT_ID));
    equal = equal && (this.C_PROD_GROUP_ID == null ? that.C_PROD_GROUP_ID == null : this.C_PROD_GROUP_ID.equals(that.C_PROD_GROUP_ID));
    equal = equal && (this.C_MSG_ID == null ? that.C_MSG_ID == null : this.C_MSG_ID.equals(that.C_MSG_ID));
    equal = equal && (this.C_MSG_DIGEST == null ? that.C_MSG_DIGEST == null : this.C_MSG_DIGEST.equals(that.C_MSG_DIGEST));
    equal = equal && (this.C_REQ_SOURCE == null ? that.C_REQ_SOURCE == null : this.C_REQ_SOURCE.equals(that.C_REQ_SOURCE));
    equal = equal && (this.C_ITEM_ID == null ? that.C_ITEM_ID == null : this.C_ITEM_ID.equals(that.C_ITEM_ID));
    equal = equal && (this.C_SRC_REQ_ID == null ? that.C_SRC_REQ_ID == null : this.C_SRC_REQ_ID.equals(that.C_SRC_REQ_ID));
    equal = equal && (this.C_EXPECTED_DATE == null ? that.C_EXPECTED_DATE == null : this.C_EXPECTED_DATE.equals(that.C_EXPECTED_DATE));
    equal = equal && (this.C_PRODUCT_DESC == null ? that.C_PRODUCT_DESC == null : this.C_PRODUCT_DESC.equals(that.C_PRODUCT_DESC));
    equal = equal && (this.C_DATE_ONHOLD == null ? that.C_DATE_ONHOLD == null : this.C_DATE_ONHOLD.equals(that.C_DATE_ONHOLD));
    equal = equal && (this.C_DATE_OFFHOLD == null ? that.C_DATE_OFFHOLD == null : this.C_DATE_OFFHOLD.equals(that.C_DATE_OFFHOLD));
    equal = equal && (this.C_ONHOLD_REASON == null ? that.C_ONHOLD_REASON == null : this.C_ONHOLD_REASON.equals(that.C_ONHOLD_REASON));
    equal = equal && (this.LATITUDE == null ? that.LATITUDE == null : this.LATITUDE.equals(that.LATITUDE));
    equal = equal && (this.LONGITUDE == null ? that.LONGITUDE == null : this.LONGITUDE.equals(that.LONGITUDE));
    equal = equal && (this.C_ON_SITE_PRESERVATION == null ? that.C_ON_SITE_PRESERVATION == null : this.C_ON_SITE_PRESERVATION.equals(that.C_ON_SITE_PRESERVATION));
    equal = equal && (this.C_PRESERVATION_METHOD == null ? that.C_PRESERVATION_METHOD == null : this.C_PRESERVATION_METHOD.equals(that.C_PRESERVATION_METHOD));
    equal = equal && (this.C_SAMPLING_PROCEDURE == null ? that.C_SAMPLING_PROCEDURE == null : this.C_SAMPLING_PROCEDURE.equals(that.C_SAMPLING_PROCEDURE));
    equal = equal && (this.C_SAMPLING_APPARATUS == null ? that.C_SAMPLING_APPARATUS == null : this.C_SAMPLING_APPARATUS.equals(that.C_SAMPLING_APPARATUS));
    equal = equal && (this.C_APPEARANCE == null ? that.C_APPEARANCE == null : this.C_APPEARANCE.equals(that.C_APPEARANCE));
    equal = equal && (this.C_COLOUR == null ? that.C_COLOUR == null : this.C_COLOUR.equals(that.C_COLOUR));
    equal = equal && (this.C_ODOUR == null ? that.C_ODOUR == null : this.C_ODOUR.equals(that.C_ODOUR));
    equal = equal && (this.C_SAMPLING_COLLECTION_LOC == null ? that.C_SAMPLING_COLLECTION_LOC == null : this.C_SAMPLING_COLLECTION_LOC.equals(that.C_SAMPLING_COLLECTION_LOC));
    equal = equal && (this.C_REPORT_ID == null ? that.C_REPORT_ID == null : this.C_REPORT_ID.equals(that.C_REPORT_ID));
    equal = equal && (this.C_DELIVERED_BY == null ? that.C_DELIVERED_BY == null : this.C_DELIVERED_BY.equals(that.C_DELIVERED_BY));
    equal = equal && (this.C_MAKANI_NO == null ? that.C_MAKANI_NO == null : this.C_MAKANI_NO.equals(that.C_MAKANI_NO));
    equal = equal && (this.C_COUNTRY == null ? that.C_COUNTRY == null : this.C_COUNTRY.equals(that.C_COUNTRY));
    equal = equal && (this.C_BUILDING_FLOOR == null ? that.C_BUILDING_FLOOR == null : this.C_BUILDING_FLOOR.equals(that.C_BUILDING_FLOOR));
    equal = equal && (this.C_LOCATION_DESC == null ? that.C_LOCATION_DESC == null : this.C_LOCATION_DESC.equals(that.C_LOCATION_DESC));
    equal = equal && (this.C_ITEM_BARCODE == null ? that.C_ITEM_BARCODE == null : this.C_ITEM_BARCODE.equals(that.C_ITEM_BARCODE));
    equal = equal && (this.C_ITEM_BRAND == null ? that.C_ITEM_BRAND == null : this.C_ITEM_BRAND.equals(that.C_ITEM_BRAND));
    equal = equal && (this.C_MANUFACTURER == null ? that.C_MANUFACTURER == null : this.C_MANUFACTURER.equals(that.C_MANUFACTURER));
    equal = equal && (this.C_COUNTRY_ORIGIN == null ? that.C_COUNTRY_ORIGIN == null : this.C_COUNTRY_ORIGIN.equals(that.C_COUNTRY_ORIGIN));
    equal = equal && (this.C_ITEM_TRADE_NAME == null ? that.C_ITEM_TRADE_NAME == null : this.C_ITEM_TRADE_NAME.equals(that.C_ITEM_TRADE_NAME));
    equal = equal && (this.C_PROCESS_ONE == null ? that.C_PROCESS_ONE == null : this.C_PROCESS_ONE.equals(that.C_PROCESS_ONE));
    equal = equal && (this.C_PROCESS_TWO == null ? that.C_PROCESS_TWO == null : this.C_PROCESS_TWO.equals(that.C_PROCESS_TWO));
    equal = equal && (this.C_SHELF_LIFE == null ? that.C_SHELF_LIFE == null : this.C_SHELF_LIFE.equals(that.C_SHELF_LIFE));
    equal = equal && (this.C_SHELF_LIFE_UNIT == null ? that.C_SHELF_LIFE_UNIT == null : this.C_SHELF_LIFE_UNIT.equals(that.C_SHELF_LIFE_UNIT));
    equal = equal && (this.C_STORAGE_CONDITION == null ? that.C_STORAGE_CONDITION == null : this.C_STORAGE_CONDITION.equals(that.C_STORAGE_CONDITION));
    equal = equal && (this.C_WEIGHT == null ? that.C_WEIGHT == null : this.C_WEIGHT.equals(that.C_WEIGHT));
    equal = equal && (this.C_WEIGHT_UNIT == null ? that.C_WEIGHT_UNIT == null : this.C_WEIGHT_UNIT.equals(that.C_WEIGHT_UNIT));
    equal = equal && (this.C_PACKAGING_TYPE == null ? that.C_PACKAGING_TYPE == null : this.C_PACKAGING_TYPE.equals(that.C_PACKAGING_TYPE));
    equal = equal && (this.C_TEST_TYPE == null ? that.C_TEST_TYPE == null : this.C_TEST_TYPE.equals(that.C_TEST_TYPE));
    equal = equal && (this.C_EXTERNAL_REFERENCE == null ? that.C_EXTERNAL_REFERENCE == null : this.C_EXTERNAL_REFERENCE.equals(that.C_EXTERNAL_REFERENCE));
    equal = equal && (this.C_NOMINAL_SIZE == null ? that.C_NOMINAL_SIZE == null : this.C_NOMINAL_SIZE.equals(that.C_NOMINAL_SIZE));
    equal = equal && (this.C_LAYER_MIX_TYPE == null ? that.C_LAYER_MIX_TYPE == null : this.C_LAYER_MIX_TYPE.equals(that.C_LAYER_MIX_TYPE));
    equal = equal && (this.C_SAMPLE_UNIT == null ? that.C_SAMPLE_UNIT == null : this.C_SAMPLE_UNIT.equals(that.C_SAMPLE_UNIT));
    equal = equal && (this.C_SAMP_QNTY == null ? that.C_SAMP_QNTY == null : this.C_SAMP_QNTY.equals(that.C_SAMP_QNTY));
    equal = equal && (this.C_SAMPLED_BY == null ? that.C_SAMPLED_BY == null : this.C_SAMPLED_BY.equals(that.C_SAMPLED_BY));
    equal = equal && (this.C_BITUMEN_LOCALSUPPLIER == null ? that.C_BITUMEN_LOCALSUPPLIER == null : this.C_BITUMEN_LOCALSUPPLIER.equals(that.C_BITUMEN_LOCALSUPPLIER));
    equal = equal && (this.C_BLOCK_TOTALBUNDLES == null ? that.C_BLOCK_TOTALBUNDLES == null : this.C_BLOCK_TOTALBUNDLES.equals(that.C_BLOCK_TOTALBUNDLES));
    equal = equal && (this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX == null ? that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX == null : this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX.equals(that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX));
    equal = equal && (this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY == null ? that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY == null : this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY.equals(that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY));
    equal = equal && (this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ == null ? that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ == null : this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ.equals(that.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ));
    equal = equal && (this.C_BLOCK_BLOCKSPERBUNDLE == null ? that.C_BLOCK_BLOCKSPERBUNDLE == null : this.C_BLOCK_BLOCKSPERBUNDLE.equals(that.C_BLOCK_BLOCKSPERBUNDLE));
    equal = equal && (this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID == null ? that.C_BLOCK_RELATEDCERTIFICATIONREQUESTID == null : this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID.equals(that.C_BLOCK_RELATEDCERTIFICATIONREQUESTID));
    equal = equal && (this.C_MORTAR_WATERORCEMENTRATIO == null ? that.C_MORTAR_WATERORCEMENTRATIO == null : this.C_MORTAR_WATERORCEMENTRATIO.equals(that.C_MORTAR_WATERORCEMENTRATIO));
    equal = equal && (this.C_MORTAR_TYPEOFMORTAR == null ? that.C_MORTAR_TYPEOFMORTAR == null : this.C_MORTAR_TYPEOFMORTAR.equals(that.C_MORTAR_TYPEOFMORTAR));
    equal = equal && (this.C_THERMALINSULATION_NOMTHICKNESS == null ? that.C_THERMALINSULATION_NOMTHICKNESS == null : this.C_THERMALINSULATION_NOMTHICKNESS.equals(that.C_THERMALINSULATION_NOMTHICKNESS));
    equal = equal && (this.C_THERMALINSULATION_NOMDENSITY == null ? that.C_THERMALINSULATION_NOMDENSITY == null : this.C_THERMALINSULATION_NOMDENSITY.equals(that.C_THERMALINSULATION_NOMDENSITY));
    equal = equal && (this.C_THERMALINSULATION_NOMDIAMETER == null ? that.C_THERMALINSULATION_NOMDIAMETER == null : this.C_THERMALINSULATION_NOMDIAMETER.equals(that.C_THERMALINSULATION_NOMDIAMETER));
    equal = equal && (this.C_THERMALINSULATION_FACINGTYPE == null ? that.C_THERMALINSULATION_FACINGTYPE == null : this.C_THERMALINSULATION_FACINGTYPE.equals(that.C_THERMALINSULATION_FACINGTYPE));
    equal = equal && (this.C_THERMALINSULATION_FACINGDESCRIPTION == null ? that.C_THERMALINSULATION_FACINGDESCRIPTION == null : this.C_THERMALINSULATION_FACINGDESCRIPTION.equals(that.C_THERMALINSULATION_FACINGDESCRIPTION));
    equal = equal && (this.C_THERMALINSULATION_TESTTEMPORHUMIDITY == null ? that.C_THERMALINSULATION_TESTTEMPORHUMIDITY == null : this.C_THERMALINSULATION_TESTTEMPORHUMIDITY.equals(that.C_THERMALINSULATION_TESTTEMPORHUMIDITY));
    equal = equal && (this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY == null ? that.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY == null : this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY.equals(that.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY));
    equal = equal && (this.C_THERMALINSULATION_AGEOFSAMPLEDAYS == null ? that.C_THERMALINSULATION_AGEOFSAMPLEDAYS == null : this.C_THERMALINSULATION_AGEOFSAMPLEDAYS.equals(that.C_THERMALINSULATION_AGEOFSAMPLEDAYS));
    equal = equal && (this.C_LUBEOIL_VISCOSITYGRADE == null ? that.C_LUBEOIL_VISCOSITYGRADE == null : this.C_LUBEOIL_VISCOSITYGRADE.equals(that.C_LUBEOIL_VISCOSITYGRADE));
    equal = equal && (this.C_ASPHALT_REFGMB == null ? that.C_ASPHALT_REFGMB == null : this.C_ASPHALT_REFGMB.equals(that.C_ASPHALT_REFGMB));
    equal = equal && (this.C_ASPHALT_REFGSB == null ? that.C_ASPHALT_REFGSB == null : this.C_ASPHALT_REFGSB.equals(that.C_ASPHALT_REFGSB));
    equal = equal && (this.C_ASPHALT_REFGSE == null ? that.C_ASPHALT_REFGSE == null : this.C_ASPHALT_REFGSE.equals(that.C_ASPHALT_REFGSE));
    equal = equal && (this.C_ASPHALT_REFGB == null ? that.C_ASPHALT_REFGB == null : this.C_ASPHALT_REFGB.equals(that.C_ASPHALT_REFGB));
    equal = equal && (this.C_ASPHALT_LAYINGDATE == null ? that.C_ASPHALT_LAYINGDATE == null : this.C_ASPHALT_LAYINGDATE.equals(that.C_ASPHALT_LAYINGDATE));
    equal = equal && (this.C_ASPHALT_REFMARSHALLREQNO == null ? that.C_ASPHALT_REFMARSHALLREQNO == null : this.C_ASPHALT_REFMARSHALLREQNO.equals(that.C_ASPHALT_REFMARSHALLREQNO));
    equal = equal && (this.C_ASPHALT_REFBITUMENREQNO == null ? that.C_ASPHALT_REFBITUMENREQNO == null : this.C_ASPHALT_REFBITUMENREQNO.equals(that.C_ASPHALT_REFBITUMENREQNO));
    equal = equal && (this.C_ASPHALT_REFMIX == null ? that.C_ASPHALT_REFMIX == null : this.C_ASPHALT_REFMIX.equals(that.C_ASPHALT_REFMIX));
    equal = equal && (this.C_ASPHALT_CALIBRATIONFACTOR == null ? that.C_ASPHALT_CALIBRATIONFACTOR == null : this.C_ASPHALT_CALIBRATIONFACTOR.equals(that.C_ASPHALT_CALIBRATIONFACTOR));
    equal = equal && (this.C_ASPHALT_GRADINGORBITUMENSPECS == null ? that.C_ASPHALT_GRADINGORBITUMENSPECS == null : this.C_ASPHALT_GRADINGORBITUMENSPECS.equals(that.C_ASPHALT_GRADINGORBITUMENSPECS));
    equal = equal && (this.C_ASPHALT_OTHERSPECS == null ? that.C_ASPHALT_OTHERSPECS == null : this.C_ASPHALT_OTHERSPECS.equals(that.C_ASPHALT_OTHERSPECS));
    equal = equal && (this.C_CEMENT_CLASSOFCEMENT == null ? that.C_CEMENT_CLASSOFCEMENT == null : this.C_CEMENT_CLASSOFCEMENT.equals(that.C_CEMENT_CLASSOFCEMENT));
    equal = equal && (this.C_CONCRETE_GRADEOFCONCRETE == null ? that.C_CONCRETE_GRADEOFCONCRETE == null : this.C_CONCRETE_GRADEOFCONCRETE.equals(that.C_CONCRETE_GRADEOFCONCRETE));
    equal = equal && (this.C_CONCRETE_CEMENTCONTENT == null ? that.C_CONCRETE_CEMENTCONTENT == null : this.C_CONCRETE_CEMENTCONTENT.equals(that.C_CONCRETE_CEMENTCONTENT));
    equal = equal && (this.C_CONCRETE_TESTINGAGEOFSAMPLE == null ? that.C_CONCRETE_TESTINGAGEOFSAMPLE == null : this.C_CONCRETE_TESTINGAGEOFSAMPLE.equals(that.C_CONCRETE_TESTINGAGEOFSAMPLE));
    equal = equal && (this.C_CONCRETE_ESTIMATEDTESTDATE == null ? that.C_CONCRETE_ESTIMATEDTESTDATE == null : this.C_CONCRETE_ESTIMATEDTESTDATE.equals(that.C_CONCRETE_ESTIMATEDTESTDATE));
    equal = equal && (this.C_CONCRETE_TRUCKNUMBER == null ? that.C_CONCRETE_TRUCKNUMBER == null : this.C_CONCRETE_TRUCKNUMBER.equals(that.C_CONCRETE_TRUCKNUMBER));
    equal = equal && (this.C_CONCRETE_PLACEOFMAKINGCUBES == null ? that.C_CONCRETE_PLACEOFMAKINGCUBES == null : this.C_CONCRETE_PLACEOFMAKINGCUBES.equals(that.C_CONCRETE_PLACEOFMAKINGCUBES));
    equal = equal && (this.C_CONCRETE_EQUIPMENTTYPEUSED == null ? that.C_CONCRETE_EQUIPMENTTYPEUSED == null : this.C_CONCRETE_EQUIPMENTTYPEUSED.equals(that.C_CONCRETE_EQUIPMENTTYPEUSED));
    equal = equal && (this.C_CONCRETE_CURINGORSTORAGECONDITIONS == null ? that.C_CONCRETE_CURINGORSTORAGECONDITIONS == null : this.C_CONCRETE_CURINGORSTORAGECONDITIONS.equals(that.C_CONCRETE_CURINGORSTORAGECONDITIONS));
    equal = equal && (this.C_CONCRETE_METHODOFCOMPACTION == null ? that.C_CONCRETE_METHODOFCOMPACTION == null : this.C_CONCRETE_METHODOFCOMPACTION.equals(that.C_CONCRETE_METHODOFCOMPACTION));
    equal = equal && (this.C_CONCRETE_CONDITIONOFSAMPLE == null ? that.C_CONCRETE_CONDITIONOFSAMPLE == null : this.C_CONCRETE_CONDITIONOFSAMPLE.equals(that.C_CONCRETE_CONDITIONOFSAMPLE));
    equal = equal && (this.C_FRESHCONCRETE_CEMENT == null ? that.C_FRESHCONCRETE_CEMENT == null : this.C_FRESHCONCRETE_CEMENT.equals(that.C_FRESHCONCRETE_CEMENT));
    equal = equal && (this.C_FRESHCONCRETE_CEMENTTYPE == null ? that.C_FRESHCONCRETE_CEMENTTYPE == null : this.C_FRESHCONCRETE_CEMENTTYPE.equals(that.C_FRESHCONCRETE_CEMENTTYPE));
    equal = equal && (this.C_FRESHCONCRETE_ADMIXTURE == null ? that.C_FRESHCONCRETE_ADMIXTURE == null : this.C_FRESHCONCRETE_ADMIXTURE.equals(that.C_FRESHCONCRETE_ADMIXTURE));
    equal = equal && (this.C_FRESHCONCRETE_ADMIXTURETYPE == null ? that.C_FRESHCONCRETE_ADMIXTURETYPE == null : this.C_FRESHCONCRETE_ADMIXTURETYPE.equals(that.C_FRESHCONCRETE_ADMIXTURETYPE));
    equal = equal && (this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE == null ? that.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE == null : this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE.equals(that.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE));
    equal = equal && (this.C_FRESHCONCRETE_AGGREGATE_20MM == null ? that.C_FRESHCONCRETE_AGGREGATE_20MM == null : this.C_FRESHCONCRETE_AGGREGATE_20MM.equals(that.C_FRESHCONCRETE_AGGREGATE_20MM));
    equal = equal && (this.C_FRESHCONCRETE_AGGREGATE_10MM == null ? that.C_FRESHCONCRETE_AGGREGATE_10MM == null : this.C_FRESHCONCRETE_AGGREGATE_10MM.equals(that.C_FRESHCONCRETE_AGGREGATE_10MM));
    equal = equal && (this.C_FRESHCONCRETE_AGGREGATE_1MM == null ? that.C_FRESHCONCRETE_AGGREGATE_1MM == null : this.C_FRESHCONCRETE_AGGREGATE_1MM.equals(that.C_FRESHCONCRETE_AGGREGATE_1MM));
    equal = equal && (this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE == null ? that.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE == null : this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE.equals(that.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE));
    equal = equal && (this.C_SOIL_MDD == null ? that.C_SOIL_MDD == null : this.C_SOIL_MDD.equals(that.C_SOIL_MDD));
    equal = equal && (this.C_SOIL_OMC == null ? that.C_SOIL_OMC == null : this.C_SOIL_OMC.equals(that.C_SOIL_OMC));
    equal = equal && (this.C_SOIL_MDD_OMC_REF == null ? that.C_SOIL_MDD_OMC_REF == null : this.C_SOIL_MDD_OMC_REF.equals(that.C_SOIL_MDD_OMC_REF));
    equal = equal && (this.C_SOIL_BFRL == null ? that.C_SOIL_BFRL == null : this.C_SOIL_BFRL.equals(that.C_SOIL_BFRL));
    equal = equal && (this.C_SOIL_LAYER_THICKNESSMM == null ? that.C_SOIL_LAYER_THICKNESSMM == null : this.C_SOIL_LAYER_THICKNESSMM.equals(that.C_SOIL_LAYER_THICKNESSMM));
    equal = equal && (this.C_SOIL_SOURCE_MINERAL_AGG == null ? that.C_SOIL_SOURCE_MINERAL_AGG == null : this.C_SOIL_SOURCE_MINERAL_AGG.equals(that.C_SOIL_SOURCE_MINERAL_AGG));
    equal = equal && (this.C_STEEL_MANUFACTURER_CERT_NO == null ? that.C_STEEL_MANUFACTURER_CERT_NO == null : this.C_STEEL_MANUFACTURER_CERT_NO.equals(that.C_STEEL_MANUFACTURER_CERT_NO));
    equal = equal && (this.C_STEEL_GRADE_STEEL == null ? that.C_STEEL_GRADE_STEEL == null : this.C_STEEL_GRADE_STEEL.equals(that.C_STEEL_GRADE_STEEL));
    equal = equal && (this.C_STEEL_LOCAL_SUPPLIER == null ? that.C_STEEL_LOCAL_SUPPLIER == null : this.C_STEEL_LOCAL_SUPPLIER.equals(that.C_STEEL_LOCAL_SUPPLIER));
    equal = equal && (this.C_STEEL_HEAT_NUMBER == null ? that.C_STEEL_HEAT_NUMBER == null : this.C_STEEL_HEAT_NUMBER.equals(that.C_STEEL_HEAT_NUMBER));
    equal = equal && (this.C_PRODUCT_TEST_SERV == null ? that.C_PRODUCT_TEST_SERV == null : this.C_PRODUCT_TEST_SERV.equals(that.C_PRODUCT_TEST_SERV));
    equal = equal && (this.C_SAMPLING_METHOD == null ? that.C_SAMPLING_METHOD == null : this.C_SAMPLING_METHOD.equals(that.C_SAMPLING_METHOD));
    equal = equal && (this.C_SAMPLE_DESC == null ? that.C_SAMPLE_DESC == null : this.C_SAMPLE_DESC.equals(that.C_SAMPLE_DESC));
    equal = equal && (this.C_BATCH_SIZE == null ? that.C_BATCH_SIZE == null : this.C_BATCH_SIZE.equals(that.C_BATCH_SIZE));
    equal = equal && (this.C_UNITNO == null ? that.C_UNITNO == null : this.C_UNITNO.equals(that.C_UNITNO));
    equal = equal && (this.C_UNITSIZE == null ? that.C_UNITSIZE == null : this.C_UNITSIZE.equals(that.C_UNITSIZE));
    equal = equal && (this.C_NO_INCREMENT == null ? that.C_NO_INCREMENT == null : this.C_NO_INCREMENT.equals(that.C_NO_INCREMENT));
    equal = equal && (this.C_MORE_SAMPLE_NOTE == null ? that.C_MORE_SAMPLE_NOTE == null : this.C_MORE_SAMPLE_NOTE.equals(that.C_MORE_SAMPLE_NOTE));
    equal = equal && (this.C_STAGES == null ? that.C_STAGES == null : this.C_STAGES.equals(that.C_STAGES));
    equal = equal && (this.C_RETURN_NOTE == null ? that.C_RETURN_NOTE == null : this.C_RETURN_NOTE.equals(that.C_RETURN_NOTE));
    equal = equal && (this.C_DISCARD == null ? that.C_DISCARD == null : this.C_DISCARD.equals(that.C_DISCARD));
    equal = equal && (this.C_DISCARD_DATE == null ? that.C_DISCARD_DATE == null : this.C_DISCARD_DATE.equals(that.C_DISCARD_DATE));
    equal = equal && (this.C_DISCARD_BY == null ? that.C_DISCARD_BY == null : this.C_DISCARD_BY.equals(that.C_DISCARD_BY));
    equal = equal && (this.C_TRAVEL_CALCULATED == null ? that.C_TRAVEL_CALCULATED == null : this.C_TRAVEL_CALCULATED.equals(that.C_TRAVEL_CALCULATED));
    equal = equal && (this.C_PHYSICAL_OBSERVATION == null ? that.C_PHYSICAL_OBSERVATION == null : this.C_PHYSICAL_OBSERVATION.equals(that.C_PHYSICAL_OBSERVATION));
    equal = equal && (this.C_SENDER_NO == null ? that.C_SENDER_NO == null : this.C_SENDER_NO.equals(that.C_SENDER_NO));
    equal = equal && (this.C_REF_SENDER_NO == null ? that.C_REF_SENDER_NO == null : this.C_REF_SENDER_NO.equals(that.C_REF_SENDER_NO));
    equal = equal && (this.C_TESTLAB == null ? that.C_TESTLAB == null : this.C_TESTLAB.equals(that.C_TESTLAB));
    equal = equal && (this.C_PRIMARY_RESULT == null ? that.C_PRIMARY_RESULT == null : this.C_PRIMARY_RESULT.equals(that.C_PRIMARY_RESULT));
    equal = equal && (this.C_PRIMARY_REPORT_NO == null ? that.C_PRIMARY_REPORT_NO == null : this.C_PRIMARY_REPORT_NO.equals(that.C_PRIMARY_REPORT_NO));
    equal = equal && (this.C_REF_RESULT == null ? that.C_REF_RESULT == null : this.C_REF_RESULT.equals(that.C_REF_RESULT));
    equal = equal && (this.C_REF_REPORT_NO == null ? that.C_REF_REPORT_NO == null : this.C_REF_REPORT_NO.equals(that.C_REF_REPORT_NO));
    equal = equal && (this.C_DETERMINATION == null ? that.C_DETERMINATION == null : this.C_DETERMINATION.equals(that.C_DETERMINATION));
    equal = equal && (this.C_EQUIPMENT_TYPE == null ? that.C_EQUIPMENT_TYPE == null : this.C_EQUIPMENT_TYPE.equals(that.C_EQUIPMENT_TYPE));
    equal = equal && (this.C_EQUIPMENT_CLASS == null ? that.C_EQUIPMENT_CLASS == null : this.C_EQUIPMENT_CLASS.equals(that.C_EQUIPMENT_CLASS));
    equal = equal && (this.C_CAPACITY == null ? that.C_CAPACITY == null : this.C_CAPACITY.equals(that.C_CAPACITY));
    equal = equal && (this.C_NO_OF_MEASUREMENTS == null ? that.C_NO_OF_MEASUREMENTS == null : this.C_NO_OF_MEASUREMENTS.equals(that.C_NO_OF_MEASUREMENTS));
    equal = equal && (this.C_REQ_DATE_CALIB == null ? that.C_REQ_DATE_CALIB == null : this.C_REQ_DATE_CALIB.equals(that.C_REQ_DATE_CALIB));
    equal = equal && (this.C_CALIB_SITE == null ? that.C_CALIB_SITE == null : this.C_CALIB_SITE.equals(that.C_CALIB_SITE));
    equal = equal && (this.C_CALIB_METHOD == null ? that.C_CALIB_METHOD == null : this.C_CALIB_METHOD.equals(that.C_CALIB_METHOD));
    equal = equal && (this.C_ASSET_NAME == null ? that.C_ASSET_NAME == null : this.C_ASSET_NAME.equals(that.C_ASSET_NAME));
    equal = equal && (this.C_MODEL_NO == null ? that.C_MODEL_NO == null : this.C_MODEL_NO.equals(that.C_MODEL_NO));
    equal = equal && (this.C_PURCHASE_DATE == null ? that.C_PURCHASE_DATE == null : this.C_PURCHASE_DATE.equals(that.C_PURCHASE_DATE));
    equal = equal && (this.C_PURCHASE_PRICE == null ? that.C_PURCHASE_PRICE == null : this.C_PURCHASE_PRICE.equals(that.C_PURCHASE_PRICE));
    equal = equal && (this.C_DELIVERY_RECD == null ? that.C_DELIVERY_RECD == null : this.C_DELIVERY_RECD.equals(that.C_DELIVERY_RECD));
    equal = equal && (this.C_DATE_OF_INSTALL == null ? that.C_DATE_OF_INSTALL == null : this.C_DATE_OF_INSTALL.equals(that.C_DATE_OF_INSTALL));
    equal = equal && (this.C_TAG_NO == null ? that.C_TAG_NO == null : this.C_TAG_NO.equals(that.C_TAG_NO));
    equal = equal && (this.C_SERIAL_NO == null ? that.C_SERIAL_NO == null : this.C_SERIAL_NO.equals(that.C_SERIAL_NO));
    equal = equal && (this.C_NO_OF_ACCESSORIES == null ? that.C_NO_OF_ACCESSORIES == null : this.C_NO_OF_ACCESSORIES.equals(that.C_NO_OF_ACCESSORIES));
    equal = equal && (this.C_ACCESSORY_DETAIL == null ? that.C_ACCESSORY_DETAIL == null : this.C_ACCESSORY_DETAIL.equals(that.C_ACCESSORY_DETAIL));
    equal = equal && (this.C_ADDR_ROOM_NO == null ? that.C_ADDR_ROOM_NO == null : this.C_ADDR_ROOM_NO.equals(that.C_ADDR_ROOM_NO));
    equal = equal && (this.C_WARRANTY_EXP_DATE == null ? that.C_WARRANTY_EXP_DATE == null : this.C_WARRANTY_EXP_DATE.equals(that.C_WARRANTY_EXP_DATE));
    equal = equal && (this.C_UNDER_CONTRACT == null ? that.C_UNDER_CONTRACT == null : this.C_UNDER_CONTRACT.equals(that.C_UNDER_CONTRACT));
    equal = equal && (this.C_CONTRACT_NO == null ? that.C_CONTRACT_NO == null : this.C_CONTRACT_NO.equals(that.C_CONTRACT_NO));
    equal = equal && (this.C_CONTRACT_COMP == null ? that.C_CONTRACT_COMP == null : this.C_CONTRACT_COMP.equals(that.C_CONTRACT_COMP));
    equal = equal && (this.C_CONTRACT_START == null ? that.C_CONTRACT_START == null : this.C_CONTRACT_START.equals(that.C_CONTRACT_START));
    equal = equal && (this.C_CONTRACT_END == null ? that.C_CONTRACT_END == null : this.C_CONTRACT_END.equals(that.C_CONTRACT_END));
    equal = equal && (this.C_CALIB_TYPE == null ? that.C_CALIB_TYPE == null : this.C_CALIB_TYPE.equals(that.C_CALIB_TYPE));
    equal = equal && (this.C_AGE_GROUP_LABEL == null ? that.C_AGE_GROUP_LABEL == null : this.C_AGE_GROUP_LABEL.equals(that.C_AGE_GROUP_LABEL));
    equal = equal && (this.C_AGE_GROUP_TEST == null ? that.C_AGE_GROUP_TEST == null : this.C_AGE_GROUP_TEST.equals(that.C_AGE_GROUP_TEST));
    equal = equal && (this.C_TOYS_DIMENSION == null ? that.C_TOYS_DIMENSION == null : this.C_TOYS_DIMENSION.equals(that.C_TOYS_DIMENSION));
    equal = equal && (this.C_TOYS_FEATURES == null ? that.C_TOYS_FEATURES == null : this.C_TOYS_FEATURES.equals(that.C_TOYS_FEATURES));
    equal = equal && (this.C_TOYS_LABEL_DETAILS == null ? that.C_TOYS_LABEL_DETAILS == null : this.C_TOYS_LABEL_DETAILS.equals(that.C_TOYS_LABEL_DETAILS));
    equal = equal && (this.C_TEXTILE_CLASS == null ? that.C_TEXTILE_CLASS == null : this.C_TEXTILE_CLASS.equals(that.C_TEXTILE_CLASS));
    equal = equal && (this.C_TEXTILE_TYPE == null ? that.C_TEXTILE_TYPE == null : this.C_TEXTILE_TYPE.equals(that.C_TEXTILE_TYPE));
    equal = equal && (this.C_MONTAJI_REGISTERED == null ? that.C_MONTAJI_REGISTERED == null : this.C_MONTAJI_REGISTERED.equals(that.C_MONTAJI_REGISTERED));
    equal = equal && (this.C_MONTAJI_REF == null ? that.C_MONTAJI_REF == null : this.C_MONTAJI_REF.equals(that.C_MONTAJI_REF));
    equal = equal && (this.C_SEALING_PACK == null ? that.C_SEALING_PACK == null : this.C_SEALING_PACK.equals(that.C_SEALING_PACK));
    equal = equal && (this.C_TYPE == null ? that.C_TYPE == null : this.C_TYPE.equals(that.C_TYPE));
    equal = equal && (this.C_FORM == null ? that.C_FORM == null : this.C_FORM.equals(that.C_FORM));
    equal = equal && (this.C_FORM_TYPE == null ? that.C_FORM_TYPE == null : this.C_FORM_TYPE.equals(that.C_FORM_TYPE));
    equal = equal && (this.C_FINENESS == null ? that.C_FINENESS == null : this.C_FINENESS.equals(that.C_FINENESS));
    equal = equal && (this.C_SHAPE == null ? that.C_SHAPE == null : this.C_SHAPE.equals(that.C_SHAPE));
    equal = equal && (this.C_LABORATORY == null ? that.C_LABORATORY == null : this.C_LABORATORY.equals(that.C_LABORATORY));
    equal = equal && (this.C_CEMARK == null ? that.C_CEMARK == null : this.C_CEMARK.equals(that.C_CEMARK));
    equal = equal && (this.C_AGE == null ? that.C_AGE == null : this.C_AGE.equals(that.C_AGE));
    equal = equal && (this.C_GENDER == null ? that.C_GENDER == null : this.C_GENDER.equals(that.C_GENDER));
    equal = equal && (this.C_OWNER_NAME == null ? that.C_OWNER_NAME == null : this.C_OWNER_NAME.equals(that.C_OWNER_NAME));
    equal = equal && (this.C_CONSIGNMENT_NO == null ? that.C_CONSIGNMENT_NO == null : this.C_CONSIGNMENT_NO.equals(that.C_CONSIGNMENT_NO));
    equal = equal && (this.C_SAMPLE_ORIGIN == null ? that.C_SAMPLE_ORIGIN == null : this.C_SAMPLE_ORIGIN.equals(that.C_SAMPLE_ORIGIN));
    equal = equal && (this.C_MEAT_REQ_TYP == null ? that.C_MEAT_REQ_TYP == null : this.C_MEAT_REQ_TYP.equals(that.C_MEAT_REQ_TYP));
    equal = equal && (this.C_PURPOSE_TEST == null ? that.C_PURPOSE_TEST == null : this.C_PURPOSE_TEST.equals(that.C_PURPOSE_TEST));
    equal = equal && (this.C_COLL_CLARITY == null ? that.C_COLL_CLARITY == null : this.C_COLL_CLARITY.equals(that.C_COLL_CLARITY));
    equal = equal && (this.C_COLL_DESC == null ? that.C_COLL_DESC == null : this.C_COLL_DESC.equals(that.C_COLL_DESC));
    equal = equal && (this.C_COLL_ISCOLLSAMPLE == null ? that.C_COLL_ISCOLLSAMPLE == null : this.C_COLL_ISCOLLSAMPLE.equals(that.C_COLL_ISCOLLSAMPLE));
    equal = equal && (this.C_COLL_NAME == null ? that.C_COLL_NAME == null : this.C_COLL_NAME.equals(that.C_COLL_NAME));
    equal = equal && (this.C_COLL_EMIRATEID == null ? that.C_COLL_EMIRATEID == null : this.C_COLL_EMIRATEID.equals(that.C_COLL_EMIRATEID));
    equal = equal && (this.C_DCL_USERID == null ? that.C_DCL_USERID == null : this.C_DCL_USERID.equals(that.C_DCL_USERID));
    equal = equal && (this.C_FAILURE_DESC == null ? that.C_FAILURE_DESC == null : this.C_FAILURE_DESC.equals(that.C_FAILURE_DESC));
    equal = equal && (this.C_FAILURE_COMP == null ? that.C_FAILURE_COMP == null : this.C_FAILURE_COMP.equals(that.C_FAILURE_COMP));
    equal = equal && (this.C_WORK_FAIL == null ? that.C_WORK_FAIL == null : this.C_WORK_FAIL.equals(that.C_WORK_FAIL));
    equal = equal && (this.C_PURCHASE_REF == null ? that.C_PURCHASE_REF == null : this.C_PURCHASE_REF.equals(that.C_PURCHASE_REF));
    equal = equal && (this.C_PURCHASE_TYPE == null ? that.C_PURCHASE_TYPE == null : this.C_PURCHASE_TYPE.equals(that.C_PURCHASE_TYPE));
    equal = equal && (this.C_PEARL_FIELD == null ? that.C_PEARL_FIELD == null : this.C_PEARL_FIELD.equals(that.C_PEARL_FIELD));
    equal = equal && (this.C_POBOX == null ? that.C_POBOX == null : this.C_POBOX.equals(that.C_POBOX));
    equal = equal && (this.C_PRODUCT_DILUENT == null ? that.C_PRODUCT_DILUENT == null : this.C_PRODUCT_DILUENT.equals(that.C_PRODUCT_DILUENT));
    equal = equal && (this.C_ACTIVE_SUBSTANCE == null ? that.C_ACTIVE_SUBSTANCE == null : this.C_ACTIVE_SUBSTANCE.equals(that.C_ACTIVE_SUBSTANCE));
    equal = equal && (this.C_EDIT_ASSET == null ? that.C_EDIT_ASSET == null : this.C_EDIT_ASSET.equals(that.C_EDIT_ASSET));
    equal = equal && (this.C_PH == null ? that.C_PH == null : this.C_PH.equals(that.C_PH));
    equal = equal && (this.C_NATUREOFACTIVITY == null ? that.C_NATUREOFACTIVITY == null : this.C_NATUREOFACTIVITY.equals(that.C_NATUREOFACTIVITY));
    equal = equal && (this.C_CHLORINELEVEL == null ? that.C_CHLORINELEVEL == null : this.C_CHLORINELEVEL.equals(that.C_CHLORINELEVEL));
    equal = equal && (this.C_RISK_ASSESSMENT == null ? that.C_RISK_ASSESSMENT == null : this.C_RISK_ASSESSMENT.equals(that.C_RISK_ASSESSMENT));
    equal = equal && (this.C_SPECIMEN == null ? that.C_SPECIMEN == null : this.C_SPECIMEN.equals(that.C_SPECIMEN));
    return equal;
  }
  public void readFields(ResultSet __dbResults) throws SQLException {
    this.__cur_result_set = __dbResults;
    this.SAMPLE_NUMBER = JdbcWritableBridge.readInteger(1, __dbResults);
    this.TEXT_ID = JdbcWritableBridge.readString(2, __dbResults);
    this.STATUS = JdbcWritableBridge.readString(3, __dbResults);
    this.OLD_STATUS = JdbcWritableBridge.readString(4, __dbResults);
    this.DISP_FLDS = JdbcWritableBridge.readString(5, __dbResults);
    this.LABEL_MASK = JdbcWritableBridge.readString(6, __dbResults);
    this.IN_SPEC = JdbcWritableBridge.readString(7, __dbResults);
    this.IN_CAL = JdbcWritableBridge.readString(8, __dbResults);
    this.CHANGED_ON = JdbcWritableBridge.readTimestamp(9, __dbResults);
    this.RE_SAMPLE = JdbcWritableBridge.readString(10, __dbResults);
    this.ALIQUOT = JdbcWritableBridge.readString(11, __dbResults);
    this.ORIGINAL_SAMPLE = JdbcWritableBridge.readInteger(12, __dbResults);
    this.PARENT_SAMPLE = JdbcWritableBridge.readInteger(13, __dbResults);
    this.PARENT_ALIQUOT = JdbcWritableBridge.readInteger(14, __dbResults);
    this.ALIQUOT_GROUP = JdbcWritableBridge.readString(15, __dbResults);
    this.SAMPLE_VOLUME = JdbcWritableBridge.readFloat(16, __dbResults);
    this.SAMPLE_UNITS = JdbcWritableBridge.readString(17, __dbResults);
    this.LOGIN_DATE = JdbcWritableBridge.readTimestamp(18, __dbResults);
    this.LOGIN_BY = JdbcWritableBridge.readString(19, __dbResults);
    this.SAMPLED_DATE = JdbcWritableBridge.readTimestamp(20, __dbResults);
    this.RECD_DATE = JdbcWritableBridge.readTimestamp(21, __dbResults);
    this.RECEIVED_BY = JdbcWritableBridge.readString(22, __dbResults);
    this.DATE_STARTED = JdbcWritableBridge.readTimestamp(23, __dbResults);
    this.STARTED = JdbcWritableBridge.readString(24, __dbResults);
    this.ASSIGNED_OPERATOR = JdbcWritableBridge.readString(25, __dbResults);
    this.DUE_DATE = JdbcWritableBridge.readTimestamp(26, __dbResults);
    this.DATE_COMPLETED = JdbcWritableBridge.readTimestamp(27, __dbResults);
    this.DATE_REVIEWED = JdbcWritableBridge.readTimestamp(28, __dbResults);
    this.PREP = JdbcWritableBridge.readString(29, __dbResults);
    this.PREP_DATE = JdbcWritableBridge.readTimestamp(30, __dbResults);
    this.PREP_BY = JdbcWritableBridge.readString(31, __dbResults);
    this.REVIEWER = JdbcWritableBridge.readString(32, __dbResults);
    this.REVIEW_NOTE = JdbcWritableBridge.readString(33, __dbResults);
    this.PRODUCT_CODE = JdbcWritableBridge.readString(34, __dbResults);
    this.PRODUCT = JdbcWritableBridge.readString(35, __dbResults);
    this.PRODUCT_VERSION = JdbcWritableBridge.readInteger(36, __dbResults);
    this.PRODUCT_GRADE = JdbcWritableBridge.readString(37, __dbResults);
    this.SAMPLING_POINT = JdbcWritableBridge.readString(38, __dbResults);
    this.SAMPLE_TYPE = JdbcWritableBridge.readString(39, __dbResults);
    this.PROJECT = JdbcWritableBridge.readString(40, __dbResults);
    this.BATCH_NAME = JdbcWritableBridge.readString(41, __dbResults);
    this.BATCH_TEMPLATE = JdbcWritableBridge.readString(42, __dbResults);
    this.STEP = JdbcWritableBridge.readString(43, __dbResults);
    this.SAMPLE_NAME = JdbcWritableBridge.readString(44, __dbResults);
    this.DESCRIPTION = JdbcWritableBridge.readString(45, __dbResults);
    this.PRIORITY = JdbcWritableBridge.readInteger(46, __dbResults);
    this.LOCATION = JdbcWritableBridge.readString(47, __dbResults);
    this.CUSTOMER = JdbcWritableBridge.readString(48, __dbResults);
    this.TEST_LIST = JdbcWritableBridge.readString(49, __dbResults);
    this.TEMPLATE = JdbcWritableBridge.readString(50, __dbResults);
    this.RECIPIENT = JdbcWritableBridge.readString(51, __dbResults);
    this.STANDARD = JdbcWritableBridge.readString(52, __dbResults);
    this.EXT_LINK = JdbcWritableBridge.readString(53, __dbResults);
    this.CONDITION = JdbcWritableBridge.readString(54, __dbResults);
    this.TIMEPOINT = JdbcWritableBridge.readString(55, __dbResults);
    this.LOT = JdbcWritableBridge.readInteger(56, __dbResults);
    this.BASE_DATE = JdbcWritableBridge.readTimestamp(57, __dbResults);
    this.AVAILABLE_DATE = JdbcWritableBridge.readTimestamp(58, __dbResults);
    this.REQUIRED_DATE = JdbcWritableBridge.readTimestamp(59, __dbResults);
    this.TARGET_DATE = JdbcWritableBridge.readTimestamp(60, __dbResults);
    this.PARTIAL_SPEC = JdbcWritableBridge.readString(61, __dbResults);
    this.SPEC_TYPE = JdbcWritableBridge.readString(62, __dbResults);
    this.STAGE = JdbcWritableBridge.readString(63, __dbResults);
    this.PRIMARY_IN_SPEC = JdbcWritableBridge.readString(64, __dbResults);
    this.BATCH = JdbcWritableBridge.readString(65, __dbResults);
    this.CHARGE_CODE = JdbcWritableBridge.readString(66, __dbResults);
    this.FORMULATION = JdbcWritableBridge.readString(67, __dbResults);
    this.PROTOCOL_LEVEL = JdbcWritableBridge.readString(68, __dbResults);
    this.RELEASED = JdbcWritableBridge.readString(69, __dbResults);
    this.RELEASED_BY = JdbcWritableBridge.readString(70, __dbResults);
    this.RELEASED_ON = JdbcWritableBridge.readTimestamp(71, __dbResults);
    this.IN_CONTROL = JdbcWritableBridge.readString(72, __dbResults);
    this.INVESTIGATION = JdbcWritableBridge.readString(73, __dbResults);
    this.INVESTIGATED = JdbcWritableBridge.readString(74, __dbResults);
    this.APPROVED = JdbcWritableBridge.readString(75, __dbResults);
    this.APPROVAL_GROUP = JdbcWritableBridge.readString(76, __dbResults);
    this.READY_FOR_APPROVAL = JdbcWritableBridge.readString(77, __dbResults);
    this.APPROVAL_ID = JdbcWritableBridge.readInteger(78, __dbResults);
    this.APPROVAL_ROUTING = JdbcWritableBridge.readString(79, __dbResults);
    this.MODIFIED_RESULTS = JdbcWritableBridge.readString(80, __dbResults);
    this.REPORT_NUMBER = JdbcWritableBridge.readInteger(81, __dbResults);
    this.COMPOSITE = JdbcWritableBridge.readString(82, __dbResults);
    this.PARENT_COMPOSITE = JdbcWritableBridge.readInteger(83, __dbResults);
    this.COMPOSITE_TEMPLATE = JdbcWritableBridge.readString(84, __dbResults);
    this.SEASON_DATE = JdbcWritableBridge.readTimestamp(85, __dbResults);
    this.PEOPLE = JdbcWritableBridge.readInteger(86, __dbResults);
    this.TEST_LOCATION = JdbcWritableBridge.readString(87, __dbResults);
    this.OWNER_LOCATION = JdbcWritableBridge.readString(88, __dbResults);
    this.CHK_ALIQUOT_STATUS = JdbcWritableBridge.readString(89, __dbResults);
    this.CHK_ALIQUOT_SPECS = JdbcWritableBridge.readString(90, __dbResults);
    this.ALIQUOT_TEMPLATE = JdbcWritableBridge.readString(91, __dbResults);
    this.CALC_GROUP = JdbcWritableBridge.readString(92, __dbResults);
    this.SAMPLE_EVENT = JdbcWritableBridge.readInteger(93, __dbResults);
    this.LABEL_ID = JdbcWritableBridge.readString(94, __dbResults);
    this.HAS_FLAGS = JdbcWritableBridge.readString(95, __dbResults);
    this.VARIATION = JdbcWritableBridge.readString(96, __dbResults);
    this.SAMPLED_BY = JdbcWritableBridge.readString(97, __dbResults);
    this.SAMPLED = JdbcWritableBridge.readString(98, __dbResults);
    this.ORDER_NUM = JdbcWritableBridge.readString(99, __dbResults);
    this.LAST_ORDER_NUM = JdbcWritableBridge.readString(100, __dbResults);
    this.STORAGE_CONDITION = JdbcWritableBridge.readString(101, __dbResults);
    this.CONTAINER_TYPE = JdbcWritableBridge.readString(102, __dbResults);
    this.NUM_CONTAINERS = JdbcWritableBridge.readInteger(103, __dbResults);
    this.IMPORTANT_MESSAGE = JdbcWritableBridge.readString(104, __dbResults);
    this.OBSERVATIONS = JdbcWritableBridge.readString(105, __dbResults);
    this.LAB = JdbcWritableBridge.readString(106, __dbResults);
    this.EXPIRATION_DATE = JdbcWritableBridge.readTimestamp(107, __dbResults);
    this.REQD_VOLUME = JdbcWritableBridge.readFloat(108, __dbResults);
    this.COLLECTION_METHOD = JdbcWritableBridge.readString(109, __dbResults);
    this.COLLECTION_OFFSET = JdbcWritableBridge.readInteger(110, __dbResults);
    this.SIGNED = JdbcWritableBridge.readString(111, __dbResults);
    this.CASE_NAME = JdbcWritableBridge.readString(112, __dbResults);
    this.CONTRACT_NUMBER = JdbcWritableBridge.readInteger(113, __dbResults);
    this.BILLING_ITEM_DESC = JdbcWritableBridge.readString(114, __dbResults);
    this.INTERPRETED = JdbcWritableBridge.readString(115, __dbResults);
    this.INTERP_TYPE = JdbcWritableBridge.readString(116, __dbResults);
    this.INSPECT_PNT_NUM = JdbcWritableBridge.readInteger(117, __dbResults);
    this.INSPECTION_LOT_NUM = JdbcWritableBridge.readString(118, __dbResults);
    this.IS_INSPECT_PNT = JdbcWritableBridge.readString(119, __dbResults);
    this.PLANT = JdbcWritableBridge.readString(120, __dbResults);
    this.USERC1_VALUE = JdbcWritableBridge.readString(121, __dbResults);
    this.USERC2_VALUE = JdbcWritableBridge.readString(122, __dbResults);
    this.USERD1_VALUE = JdbcWritableBridge.readString(123, __dbResults);
    this.USERN1_VALUE = JdbcWritableBridge.readString(124, __dbResults);
    this.USERN2_VALUE = JdbcWritableBridge.readString(125, __dbResults);
    this.USERT1_VALUE = JdbcWritableBridge.readString(126, __dbResults);
    this.SAP_SELECTED_SET = JdbcWritableBridge.readString(127, __dbResults);
    this.SAP_CODE_GROUP = JdbcWritableBridge.readString(128, __dbResults);
    this.SAP_SAMPLE_NUMBER = JdbcWritableBridge.readString(129, __dbResults);
    this.SAP_SS_PLANT = JdbcWritableBridge.readString(130, __dbResults);
    this.SAP_SAMPLE_COUNT = JdbcWritableBridge.readString(131, __dbResults);
    this.OPERATION_NUMBER = JdbcWritableBridge.readString(132, __dbResults);
    this.STORAGE_LOC_NO = JdbcWritableBridge.readInteger(133, __dbResults);
    this.EXTERNAL_LOCATION = JdbcWritableBridge.readString(134, __dbResults);
    this.FORMULATION_NAME = JdbcWritableBridge.readString(135, __dbResults);
    this.STANDARD_REAGENT = JdbcWritableBridge.readString(136, __dbResults);
    this.CONVERSION_GROUPS = JdbcWritableBridge.readString(137, __dbResults);
    this.REPORTED_RSLT_OOS = JdbcWritableBridge.readString(138, __dbResults);
    this.GROUP_NAME = JdbcWritableBridge.readString(139, __dbResults);
    this.PROCESS_UNIT = JdbcWritableBridge.readString(140, __dbResults);
    this.HAZARD = JdbcWritableBridge.readString(141, __dbResults);
    this.INSTRUMENT = JdbcWritableBridge.readString(142, __dbResults);
    this.T_SITE = JdbcWritableBridge.readString(143, __dbResults);
    this.T_PLANT = JdbcWritableBridge.readString(144, __dbResults);
    this.T_CERTIFICATE = JdbcWritableBridge.readString(145, __dbResults);
    this.T_CONTAINER = JdbcWritableBridge.readString(146, __dbResults);
    this.T_OVERDUE = JdbcWritableBridge.readString(147, __dbResults);
    this.T_PO_NUMBER = JdbcWritableBridge.readString(148, __dbResults);
    this.T_PRODUCTION_DATE = JdbcWritableBridge.readTimestamp(149, __dbResults);
    this.T_REPORT_DATE = JdbcWritableBridge.readTimestamp(150, __dbResults);
    this.T_REQUESTED_BY = JdbcWritableBridge.readString(151, __dbResults);
    this.T_LONG_NOTE = JdbcWritableBridge.readInteger(152, __dbResults);
    this.T_SHIFT_CODE = JdbcWritableBridge.readString(153, __dbResults);
    this.T_SUPP_BATCH_NO = JdbcWritableBridge.readString(154, __dbResults);
    this.T_SUPPLIER = JdbcWritableBridge.readString(155, __dbResults);
    this.T_TRUCK_VESSEL = JdbcWritableBridge.readString(156, __dbResults);
    this.T_PLANT_RECV_BY = JdbcWritableBridge.readString(157, __dbResults);
    this.T_PLANT_RECV_DATE = JdbcWritableBridge.readTimestamp(158, __dbResults);
    this.C_PRIORITY = JdbcWritableBridge.readString(159, __dbResults);
    this.STORAGE_TEMPLATE = JdbcWritableBridge.readString(160, __dbResults);
    this.ALLOW_CHLD_ALQTS = JdbcWritableBridge.readString(161, __dbResults);
    this.PHASE = JdbcWritableBridge.readString(162, __dbResults);
    this.SCHEDULE_NUMBER = JdbcWritableBridge.readInteger(163, __dbResults);
    this.T_ACTION_NUMBER = JdbcWritableBridge.readInteger(164, __dbResults);
    this.T_BATCH_NAME1 = JdbcWritableBridge.readString(165, __dbResults);
    this.T_BATCH_NAME2 = JdbcWritableBridge.readString(166, __dbResults);
    this.T_BATCH_NAME3 = JdbcWritableBridge.readString(167, __dbResults);
    this.T_BATCH_NAME4 = JdbcWritableBridge.readString(168, __dbResults);
    this.T_BATCH_NAME5 = JdbcWritableBridge.readString(169, __dbResults);
    this.T_BATCH_NAME6 = JdbcWritableBridge.readString(170, __dbResults);
    this.T_COLLECT_SCHEME = JdbcWritableBridge.readString(171, __dbResults);
    this.T_COMPOSITE_GROUP = JdbcWritableBridge.readString(172, __dbResults);
    this.T_DISTRIBUTION_BY = JdbcWritableBridge.readString(173, __dbResults);
    this.T_DISTRIBUTION_DATE = JdbcWritableBridge.readTimestamp(174, __dbResults);
    this.T_EM_PLAN = JdbcWritableBridge.readInteger(175, __dbResults);
    this.T_INCUB1_BATCH = JdbcWritableBridge.readString(176, __dbResults);
    this.T_INCUB1_END = JdbcWritableBridge.readTimestamp(177, __dbResults);
    this.T_INCUB1_START = JdbcWritableBridge.readTimestamp(178, __dbResults);
    this.T_INCUB2_BATCH = JdbcWritableBridge.readString(179, __dbResults);
    this.T_INCUB2_END = JdbcWritableBridge.readTimestamp(180, __dbResults);
    this.T_INCUB2_START = JdbcWritableBridge.readTimestamp(181, __dbResults);
    this.T_MEDIA_REFERENCE = JdbcWritableBridge.readString(182, __dbResults);
    this.T_ORIGINAL_SAMPLE = JdbcWritableBridge.readInteger(183, __dbResults);
    this.T_PERSONNEL = JdbcWritableBridge.readString(184, __dbResults);
    this.T_PERSONNEL_SET = JdbcWritableBridge.readString(185, __dbResults);
    this.T_SAMPLE_TYPE = JdbcWritableBridge.readString(186, __dbResults);
    this.T_SCHEDULE_GROUP = JdbcWritableBridge.readString(187, __dbResults);
    this.T_SUITE = JdbcWritableBridge.readString(188, __dbResults);
    this.T_TRANSIT_LOCATION = JdbcWritableBridge.readString(189, __dbResults);
    this.T_VALIDATION = JdbcWritableBridge.readString(190, __dbResults);
    this.C_REFERENCE_ID = JdbcWritableBridge.readString(191, __dbResults);
    this.C_SAMPLING_REASON = JdbcWritableBridge.readString(192, __dbResults);
    this.C_CUSTOMER_TYPE = JdbcWritableBridge.readString(193, __dbResults);
    this.C_REQUEST_TYPE = JdbcWritableBridge.readString(194, __dbResults);
    this.C_OTHER_SAMPLE_SOURCE = JdbcWritableBridge.readString(195, __dbResults);
    this.C_CUST_ID = JdbcWritableBridge.readString(196, __dbResults);
    this.C_CLIENT_TYPE = JdbcWritableBridge.readString(197, __dbResults);
    this.C_REQ_SAMP_TYPE = JdbcWritableBridge.readString(198, __dbResults);
    this.C_SAMPLE_SOURCE = JdbcWritableBridge.readString(199, __dbResults);
    this.C_DM_BARCODE = JdbcWritableBridge.readString(200, __dbResults);
    this.C_REQ_EXT_REFERENCE = JdbcWritableBridge.readString(201, __dbResults);
    this.C_EXPRESS_SERVICE = JdbcWritableBridge.readString(202, __dbResults);
    this.C_HARDCOPY_REQUIRED = JdbcWritableBridge.readString(203, __dbResults);
    this.C_REQ_REMARKS = JdbcWritableBridge.readString(204, __dbResults);
    this.C_REQ_COPIES = JdbcWritableBridge.readInteger(205, __dbResults);
    this.C_REQ_EDIT = JdbcWritableBridge.readString(206, __dbResults);
    this.C_TOTAL_SERVICE_FEE = JdbcWritableBridge.readBigDecimal(207, __dbResults);
    this.C_PRODUCT_GROUP = JdbcWritableBridge.readString(208, __dbResults);
    this.C_PRODUCT_CATEGORY = JdbcWritableBridge.readString(209, __dbResults);
    this.C_PRODUCTION_DATE = JdbcWritableBridge.readTimestamp(210, __dbResults);
    this.C_NO_OF_UNIT = JdbcWritableBridge.readInteger(211, __dbResults);
    this.C_SAMPLE_CONDITION = JdbcWritableBridge.readString(212, __dbResults);
    this.C_TEMP_REC = JdbcWritableBridge.readFloat(213, __dbResults);
    this.C_POINT_OF_SAMPLING = JdbcWritableBridge.readString(214, __dbResults);
    this.C_REQ_SAMP_COLLECTION = JdbcWritableBridge.readString(215, __dbResults);
    this.C_REQ_SAMP_BAL_RETURN = JdbcWritableBridge.readString(216, __dbResults);
    this.C_HAZARD = JdbcWritableBridge.readString(217, __dbResults);
    this.C_BATCH_NO = JdbcWritableBridge.readString(218, __dbResults);
    this.C_REQUEST_NO = JdbcWritableBridge.readString(219, __dbResults);
    this.C_BILLING_TYPE = JdbcWritableBridge.readString(220, __dbResults);
    this.C_TOTAL_TEST_CHARGE = JdbcWritableBridge.readBigDecimal(221, __dbResults);
    this.C_VOUCHER = JdbcWritableBridge.readString(222, __dbResults);
    this.C_ERAD_NO = JdbcWritableBridge.readString(223, __dbResults);
    this.C_RECEIPT = JdbcWritableBridge.readString(224, __dbResults);
    this.C_PAYMENT_DT = JdbcWritableBridge.readTimestamp(225, __dbResults);
    this.C_PAYMENT_SRC = JdbcWritableBridge.readString(226, __dbResults);
    this.C_PAYMENT_STATUS = JdbcWritableBridge.readString(227, __dbResults);
    this.C_CUST_DELIVERY_DATE = JdbcWritableBridge.readTimestamp(228, __dbResults);
    this.C_SAMPLE_OPINION = JdbcWritableBridge.readString(229, __dbResults);
    this.C_SUBCAT_ID = JdbcWritableBridge.readInteger(230, __dbResults);
    this.C_PRODCAT_ID = JdbcWritableBridge.readInteger(231, __dbResults);
    this.C_PROD_GROUP_ID = JdbcWritableBridge.readInteger(232, __dbResults);
    this.C_MSG_ID = JdbcWritableBridge.readString(233, __dbResults);
    this.C_MSG_DIGEST = JdbcWritableBridge.readString(234, __dbResults);
    this.C_REQ_SOURCE = JdbcWritableBridge.readString(235, __dbResults);
    this.C_ITEM_ID = JdbcWritableBridge.readInteger(236, __dbResults);
    this.C_SRC_REQ_ID = JdbcWritableBridge.readString(237, __dbResults);
    this.C_EXPECTED_DATE = JdbcWritableBridge.readTimestamp(238, __dbResults);
    this.C_PRODUCT_DESC = JdbcWritableBridge.readString(239, __dbResults);
    this.C_DATE_ONHOLD = JdbcWritableBridge.readTimestamp(240, __dbResults);
    this.C_DATE_OFFHOLD = JdbcWritableBridge.readTimestamp(241, __dbResults);
    this.C_ONHOLD_REASON = JdbcWritableBridge.readString(242, __dbResults);
    this.LATITUDE = JdbcWritableBridge.readString(243, __dbResults);
    this.LONGITUDE = JdbcWritableBridge.readString(244, __dbResults);
    this.C_ON_SITE_PRESERVATION = JdbcWritableBridge.readString(245, __dbResults);
    this.C_PRESERVATION_METHOD = JdbcWritableBridge.readString(246, __dbResults);
    this.C_SAMPLING_PROCEDURE = JdbcWritableBridge.readString(247, __dbResults);
    this.C_SAMPLING_APPARATUS = JdbcWritableBridge.readString(248, __dbResults);
    this.C_APPEARANCE = JdbcWritableBridge.readString(249, __dbResults);
    this.C_COLOUR = JdbcWritableBridge.readString(250, __dbResults);
    this.C_ODOUR = JdbcWritableBridge.readString(251, __dbResults);
    this.C_SAMPLING_COLLECTION_LOC = JdbcWritableBridge.readString(252, __dbResults);
    this.C_REPORT_ID = JdbcWritableBridge.readString(253, __dbResults);
    this.C_DELIVERED_BY = JdbcWritableBridge.readString(254, __dbResults);
    this.C_MAKANI_NO = JdbcWritableBridge.readString(255, __dbResults);
    this.C_COUNTRY = JdbcWritableBridge.readString(256, __dbResults);
    this.C_BUILDING_FLOOR = JdbcWritableBridge.readString(257, __dbResults);
    this.C_LOCATION_DESC = JdbcWritableBridge.readString(258, __dbResults);
    this.C_ITEM_BARCODE = JdbcWritableBridge.readString(259, __dbResults);
    this.C_ITEM_BRAND = JdbcWritableBridge.readString(260, __dbResults);
    this.C_MANUFACTURER = JdbcWritableBridge.readString(261, __dbResults);
    this.C_COUNTRY_ORIGIN = JdbcWritableBridge.readString(262, __dbResults);
    this.C_ITEM_TRADE_NAME = JdbcWritableBridge.readString(263, __dbResults);
    this.C_PROCESS_ONE = JdbcWritableBridge.readString(264, __dbResults);
    this.C_PROCESS_TWO = JdbcWritableBridge.readString(265, __dbResults);
    this.C_SHELF_LIFE = JdbcWritableBridge.readString(266, __dbResults);
    this.C_SHELF_LIFE_UNIT = JdbcWritableBridge.readString(267, __dbResults);
    this.C_STORAGE_CONDITION = JdbcWritableBridge.readString(268, __dbResults);
    this.C_WEIGHT = JdbcWritableBridge.readString(269, __dbResults);
    this.C_WEIGHT_UNIT = JdbcWritableBridge.readString(270, __dbResults);
    this.C_PACKAGING_TYPE = JdbcWritableBridge.readString(271, __dbResults);
    this.C_TEST_TYPE = JdbcWritableBridge.readString(272, __dbResults);
    this.C_EXTERNAL_REFERENCE = JdbcWritableBridge.readString(273, __dbResults);
    this.C_NOMINAL_SIZE = JdbcWritableBridge.readString(274, __dbResults);
    this.C_LAYER_MIX_TYPE = JdbcWritableBridge.readString(275, __dbResults);
    this.C_SAMPLE_UNIT = JdbcWritableBridge.readString(276, __dbResults);
    this.C_SAMP_QNTY = JdbcWritableBridge.readInteger(277, __dbResults);
    this.C_SAMPLED_BY = JdbcWritableBridge.readString(278, __dbResults);
    this.C_BITUMEN_LOCALSUPPLIER = JdbcWritableBridge.readString(279, __dbResults);
    this.C_BLOCK_TOTALBUNDLES = JdbcWritableBridge.readString(280, __dbResults);
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = JdbcWritableBridge.readString(281, __dbResults);
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = JdbcWritableBridge.readString(282, __dbResults);
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = JdbcWritableBridge.readString(283, __dbResults);
    this.C_BLOCK_BLOCKSPERBUNDLE = JdbcWritableBridge.readString(284, __dbResults);
    this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = JdbcWritableBridge.readString(285, __dbResults);
    this.C_MORTAR_WATERORCEMENTRATIO = JdbcWritableBridge.readString(286, __dbResults);
    this.C_MORTAR_TYPEOFMORTAR = JdbcWritableBridge.readString(287, __dbResults);
    this.C_THERMALINSULATION_NOMTHICKNESS = JdbcWritableBridge.readString(288, __dbResults);
    this.C_THERMALINSULATION_NOMDENSITY = JdbcWritableBridge.readString(289, __dbResults);
    this.C_THERMALINSULATION_NOMDIAMETER = JdbcWritableBridge.readString(290, __dbResults);
    this.C_THERMALINSULATION_FACINGTYPE = JdbcWritableBridge.readString(291, __dbResults);
    this.C_THERMALINSULATION_FACINGDESCRIPTION = JdbcWritableBridge.readString(292, __dbResults);
    this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = JdbcWritableBridge.readString(293, __dbResults);
    this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = JdbcWritableBridge.readString(294, __dbResults);
    this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = JdbcWritableBridge.readString(295, __dbResults);
    this.C_LUBEOIL_VISCOSITYGRADE = JdbcWritableBridge.readString(296, __dbResults);
    this.C_ASPHALT_REFGMB = JdbcWritableBridge.readString(297, __dbResults);
    this.C_ASPHALT_REFGSB = JdbcWritableBridge.readString(298, __dbResults);
    this.C_ASPHALT_REFGSE = JdbcWritableBridge.readString(299, __dbResults);
    this.C_ASPHALT_REFGB = JdbcWritableBridge.readString(300, __dbResults);
    this.C_ASPHALT_LAYINGDATE = JdbcWritableBridge.readTimestamp(301, __dbResults);
    this.C_ASPHALT_REFMARSHALLREQNO = JdbcWritableBridge.readString(302, __dbResults);
    this.C_ASPHALT_REFBITUMENREQNO = JdbcWritableBridge.readString(303, __dbResults);
    this.C_ASPHALT_REFMIX = JdbcWritableBridge.readString(304, __dbResults);
    this.C_ASPHALT_CALIBRATIONFACTOR = JdbcWritableBridge.readString(305, __dbResults);
    this.C_ASPHALT_GRADINGORBITUMENSPECS = JdbcWritableBridge.readString(306, __dbResults);
    this.C_ASPHALT_OTHERSPECS = JdbcWritableBridge.readString(307, __dbResults);
    this.C_CEMENT_CLASSOFCEMENT = JdbcWritableBridge.readString(308, __dbResults);
    this.C_CONCRETE_GRADEOFCONCRETE = JdbcWritableBridge.readString(309, __dbResults);
    this.C_CONCRETE_CEMENTCONTENT = JdbcWritableBridge.readString(310, __dbResults);
    this.C_CONCRETE_TESTINGAGEOFSAMPLE = JdbcWritableBridge.readString(311, __dbResults);
    this.C_CONCRETE_ESTIMATEDTESTDATE = JdbcWritableBridge.readTimestamp(312, __dbResults);
    this.C_CONCRETE_TRUCKNUMBER = JdbcWritableBridge.readString(313, __dbResults);
    this.C_CONCRETE_PLACEOFMAKINGCUBES = JdbcWritableBridge.readString(314, __dbResults);
    this.C_CONCRETE_EQUIPMENTTYPEUSED = JdbcWritableBridge.readString(315, __dbResults);
    this.C_CONCRETE_CURINGORSTORAGECONDITIONS = JdbcWritableBridge.readString(316, __dbResults);
    this.C_CONCRETE_METHODOFCOMPACTION = JdbcWritableBridge.readString(317, __dbResults);
    this.C_CONCRETE_CONDITIONOFSAMPLE = JdbcWritableBridge.readString(318, __dbResults);
    this.C_FRESHCONCRETE_CEMENT = JdbcWritableBridge.readString(319, __dbResults);
    this.C_FRESHCONCRETE_CEMENTTYPE = JdbcWritableBridge.readString(320, __dbResults);
    this.C_FRESHCONCRETE_ADMIXTURE = JdbcWritableBridge.readString(321, __dbResults);
    this.C_FRESHCONCRETE_ADMIXTURETYPE = JdbcWritableBridge.readString(322, __dbResults);
    this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = JdbcWritableBridge.readString(323, __dbResults);
    this.C_FRESHCONCRETE_AGGREGATE_20MM = JdbcWritableBridge.readString(324, __dbResults);
    this.C_FRESHCONCRETE_AGGREGATE_10MM = JdbcWritableBridge.readString(325, __dbResults);
    this.C_FRESHCONCRETE_AGGREGATE_1MM = JdbcWritableBridge.readString(326, __dbResults);
    this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = JdbcWritableBridge.readString(327, __dbResults);
    this.C_SOIL_MDD = JdbcWritableBridge.readString(328, __dbResults);
    this.C_SOIL_OMC = JdbcWritableBridge.readString(329, __dbResults);
    this.C_SOIL_MDD_OMC_REF = JdbcWritableBridge.readString(330, __dbResults);
    this.C_SOIL_BFRL = JdbcWritableBridge.readString(331, __dbResults);
    this.C_SOIL_LAYER_THICKNESSMM = JdbcWritableBridge.readString(332, __dbResults);
    this.C_SOIL_SOURCE_MINERAL_AGG = JdbcWritableBridge.readString(333, __dbResults);
    this.C_STEEL_MANUFACTURER_CERT_NO = JdbcWritableBridge.readString(334, __dbResults);
    this.C_STEEL_GRADE_STEEL = JdbcWritableBridge.readString(335, __dbResults);
    this.C_STEEL_LOCAL_SUPPLIER = JdbcWritableBridge.readString(336, __dbResults);
    this.C_STEEL_HEAT_NUMBER = JdbcWritableBridge.readString(337, __dbResults);
    this.C_PRODUCT_TEST_SERV = JdbcWritableBridge.readString(338, __dbResults);
    this.C_SAMPLING_METHOD = JdbcWritableBridge.readString(339, __dbResults);
    this.C_SAMPLE_DESC = JdbcWritableBridge.readString(340, __dbResults);
    this.C_BATCH_SIZE = JdbcWritableBridge.readString(341, __dbResults);
    this.C_UNITNO = JdbcWritableBridge.readString(342, __dbResults);
    this.C_UNITSIZE = JdbcWritableBridge.readString(343, __dbResults);
    this.C_NO_INCREMENT = JdbcWritableBridge.readString(344, __dbResults);
    this.C_MORE_SAMPLE_NOTE = JdbcWritableBridge.readInteger(345, __dbResults);
    this.C_STAGES = JdbcWritableBridge.readString(346, __dbResults);
    this.C_RETURN_NOTE = JdbcWritableBridge.readString(347, __dbResults);
    this.C_DISCARD = JdbcWritableBridge.readString(348, __dbResults);
    this.C_DISCARD_DATE = JdbcWritableBridge.readTimestamp(349, __dbResults);
    this.C_DISCARD_BY = JdbcWritableBridge.readString(350, __dbResults);
    this.C_TRAVEL_CALCULATED = JdbcWritableBridge.readString(351, __dbResults);
    this.C_PHYSICAL_OBSERVATION = JdbcWritableBridge.readString(352, __dbResults);
    this.C_SENDER_NO = JdbcWritableBridge.readString(353, __dbResults);
    this.C_REF_SENDER_NO = JdbcWritableBridge.readString(354, __dbResults);
    this.C_TESTLAB = JdbcWritableBridge.readString(355, __dbResults);
    this.C_PRIMARY_RESULT = JdbcWritableBridge.readString(356, __dbResults);
    this.C_PRIMARY_REPORT_NO = JdbcWritableBridge.readString(357, __dbResults);
    this.C_REF_RESULT = JdbcWritableBridge.readString(358, __dbResults);
    this.C_REF_REPORT_NO = JdbcWritableBridge.readString(359, __dbResults);
    this.C_DETERMINATION = JdbcWritableBridge.readString(360, __dbResults);
    this.C_EQUIPMENT_TYPE = JdbcWritableBridge.readString(361, __dbResults);
    this.C_EQUIPMENT_CLASS = JdbcWritableBridge.readString(362, __dbResults);
    this.C_CAPACITY = JdbcWritableBridge.readString(363, __dbResults);
    this.C_NO_OF_MEASUREMENTS = JdbcWritableBridge.readString(364, __dbResults);
    this.C_REQ_DATE_CALIB = JdbcWritableBridge.readTimestamp(365, __dbResults);
    this.C_CALIB_SITE = JdbcWritableBridge.readString(366, __dbResults);
    this.C_CALIB_METHOD = JdbcWritableBridge.readString(367, __dbResults);
    this.C_ASSET_NAME = JdbcWritableBridge.readString(368, __dbResults);
    this.C_MODEL_NO = JdbcWritableBridge.readString(369, __dbResults);
    this.C_PURCHASE_DATE = JdbcWritableBridge.readTimestamp(370, __dbResults);
    this.C_PURCHASE_PRICE = JdbcWritableBridge.readBigDecimal(371, __dbResults);
    this.C_DELIVERY_RECD = JdbcWritableBridge.readTimestamp(372, __dbResults);
    this.C_DATE_OF_INSTALL = JdbcWritableBridge.readTimestamp(373, __dbResults);
    this.C_TAG_NO = JdbcWritableBridge.readInteger(374, __dbResults);
    this.C_SERIAL_NO = JdbcWritableBridge.readInteger(375, __dbResults);
    this.C_NO_OF_ACCESSORIES = JdbcWritableBridge.readInteger(376, __dbResults);
    this.C_ACCESSORY_DETAIL = JdbcWritableBridge.readString(377, __dbResults);
    this.C_ADDR_ROOM_NO = JdbcWritableBridge.readString(378, __dbResults);
    this.C_WARRANTY_EXP_DATE = JdbcWritableBridge.readTimestamp(379, __dbResults);
    this.C_UNDER_CONTRACT = JdbcWritableBridge.readString(380, __dbResults);
    this.C_CONTRACT_NO = JdbcWritableBridge.readString(381, __dbResults);
    this.C_CONTRACT_COMP = JdbcWritableBridge.readString(382, __dbResults);
    this.C_CONTRACT_START = JdbcWritableBridge.readTimestamp(383, __dbResults);
    this.C_CONTRACT_END = JdbcWritableBridge.readTimestamp(384, __dbResults);
    this.C_CALIB_TYPE = JdbcWritableBridge.readString(385, __dbResults);
    this.C_AGE_GROUP_LABEL = JdbcWritableBridge.readString(386, __dbResults);
    this.C_AGE_GROUP_TEST = JdbcWritableBridge.readString(387, __dbResults);
    this.C_TOYS_DIMENSION = JdbcWritableBridge.readString(388, __dbResults);
    this.C_TOYS_FEATURES = JdbcWritableBridge.readString(389, __dbResults);
    this.C_TOYS_LABEL_DETAILS = JdbcWritableBridge.readString(390, __dbResults);
    this.C_TEXTILE_CLASS = JdbcWritableBridge.readString(391, __dbResults);
    this.C_TEXTILE_TYPE = JdbcWritableBridge.readString(392, __dbResults);
    this.C_MONTAJI_REGISTERED = JdbcWritableBridge.readString(393, __dbResults);
    this.C_MONTAJI_REF = JdbcWritableBridge.readString(394, __dbResults);
    this.C_SEALING_PACK = JdbcWritableBridge.readString(395, __dbResults);
    this.C_TYPE = JdbcWritableBridge.readString(396, __dbResults);
    this.C_FORM = JdbcWritableBridge.readString(397, __dbResults);
    this.C_FORM_TYPE = JdbcWritableBridge.readString(398, __dbResults);
    this.C_FINENESS = JdbcWritableBridge.readString(399, __dbResults);
    this.C_SHAPE = JdbcWritableBridge.readString(400, __dbResults);
    this.C_LABORATORY = JdbcWritableBridge.readString(401, __dbResults);
    this.C_CEMARK = JdbcWritableBridge.readString(402, __dbResults);
    this.C_AGE = JdbcWritableBridge.readInteger(403, __dbResults);
    this.C_GENDER = JdbcWritableBridge.readString(404, __dbResults);
    this.C_OWNER_NAME = JdbcWritableBridge.readString(405, __dbResults);
    this.C_CONSIGNMENT_NO = JdbcWritableBridge.readString(406, __dbResults);
    this.C_SAMPLE_ORIGIN = JdbcWritableBridge.readString(407, __dbResults);
    this.C_MEAT_REQ_TYP = JdbcWritableBridge.readString(408, __dbResults);
    this.C_PURPOSE_TEST = JdbcWritableBridge.readString(409, __dbResults);
    this.C_COLL_CLARITY = JdbcWritableBridge.readString(410, __dbResults);
    this.C_COLL_DESC = JdbcWritableBridge.readString(411, __dbResults);
    this.C_COLL_ISCOLLSAMPLE = JdbcWritableBridge.readString(412, __dbResults);
    this.C_COLL_NAME = JdbcWritableBridge.readString(413, __dbResults);
    this.C_COLL_EMIRATEID = JdbcWritableBridge.readString(414, __dbResults);
    this.C_DCL_USERID = JdbcWritableBridge.readString(415, __dbResults);
    this.C_FAILURE_DESC = JdbcWritableBridge.readString(416, __dbResults);
    this.C_FAILURE_COMP = JdbcWritableBridge.readString(417, __dbResults);
    this.C_WORK_FAIL = JdbcWritableBridge.readString(418, __dbResults);
    this.C_PURCHASE_REF = JdbcWritableBridge.readString(419, __dbResults);
    this.C_PURCHASE_TYPE = JdbcWritableBridge.readString(420, __dbResults);
    this.C_PEARL_FIELD = JdbcWritableBridge.readString(421, __dbResults);
    this.C_POBOX = JdbcWritableBridge.readString(422, __dbResults);
    this.C_PRODUCT_DILUENT = JdbcWritableBridge.readString(423, __dbResults);
    this.C_ACTIVE_SUBSTANCE = JdbcWritableBridge.readString(424, __dbResults);
    this.C_EDIT_ASSET = JdbcWritableBridge.readString(425, __dbResults);
    this.C_PH = JdbcWritableBridge.readBigDecimal(426, __dbResults);
    this.C_NATUREOFACTIVITY = JdbcWritableBridge.readString(427, __dbResults);
    this.C_CHLORINELEVEL = JdbcWritableBridge.readBigDecimal(428, __dbResults);
    this.C_RISK_ASSESSMENT = JdbcWritableBridge.readString(429, __dbResults);
    this.C_SPECIMEN = JdbcWritableBridge.readInteger(430, __dbResults);
  }
  public void readFields0(ResultSet __dbResults) throws SQLException {
    this.SAMPLE_NUMBER = JdbcWritableBridge.readInteger(1, __dbResults);
    this.TEXT_ID = JdbcWritableBridge.readString(2, __dbResults);
    this.STATUS = JdbcWritableBridge.readString(3, __dbResults);
    this.OLD_STATUS = JdbcWritableBridge.readString(4, __dbResults);
    this.DISP_FLDS = JdbcWritableBridge.readString(5, __dbResults);
    this.LABEL_MASK = JdbcWritableBridge.readString(6, __dbResults);
    this.IN_SPEC = JdbcWritableBridge.readString(7, __dbResults);
    this.IN_CAL = JdbcWritableBridge.readString(8, __dbResults);
    this.CHANGED_ON = JdbcWritableBridge.readTimestamp(9, __dbResults);
    this.RE_SAMPLE = JdbcWritableBridge.readString(10, __dbResults);
    this.ALIQUOT = JdbcWritableBridge.readString(11, __dbResults);
    this.ORIGINAL_SAMPLE = JdbcWritableBridge.readInteger(12, __dbResults);
    this.PARENT_SAMPLE = JdbcWritableBridge.readInteger(13, __dbResults);
    this.PARENT_ALIQUOT = JdbcWritableBridge.readInteger(14, __dbResults);
    this.ALIQUOT_GROUP = JdbcWritableBridge.readString(15, __dbResults);
    this.SAMPLE_VOLUME = JdbcWritableBridge.readFloat(16, __dbResults);
    this.SAMPLE_UNITS = JdbcWritableBridge.readString(17, __dbResults);
    this.LOGIN_DATE = JdbcWritableBridge.readTimestamp(18, __dbResults);
    this.LOGIN_BY = JdbcWritableBridge.readString(19, __dbResults);
    this.SAMPLED_DATE = JdbcWritableBridge.readTimestamp(20, __dbResults);
    this.RECD_DATE = JdbcWritableBridge.readTimestamp(21, __dbResults);
    this.RECEIVED_BY = JdbcWritableBridge.readString(22, __dbResults);
    this.DATE_STARTED = JdbcWritableBridge.readTimestamp(23, __dbResults);
    this.STARTED = JdbcWritableBridge.readString(24, __dbResults);
    this.ASSIGNED_OPERATOR = JdbcWritableBridge.readString(25, __dbResults);
    this.DUE_DATE = JdbcWritableBridge.readTimestamp(26, __dbResults);
    this.DATE_COMPLETED = JdbcWritableBridge.readTimestamp(27, __dbResults);
    this.DATE_REVIEWED = JdbcWritableBridge.readTimestamp(28, __dbResults);
    this.PREP = JdbcWritableBridge.readString(29, __dbResults);
    this.PREP_DATE = JdbcWritableBridge.readTimestamp(30, __dbResults);
    this.PREP_BY = JdbcWritableBridge.readString(31, __dbResults);
    this.REVIEWER = JdbcWritableBridge.readString(32, __dbResults);
    this.REVIEW_NOTE = JdbcWritableBridge.readString(33, __dbResults);
    this.PRODUCT_CODE = JdbcWritableBridge.readString(34, __dbResults);
    this.PRODUCT = JdbcWritableBridge.readString(35, __dbResults);
    this.PRODUCT_VERSION = JdbcWritableBridge.readInteger(36, __dbResults);
    this.PRODUCT_GRADE = JdbcWritableBridge.readString(37, __dbResults);
    this.SAMPLING_POINT = JdbcWritableBridge.readString(38, __dbResults);
    this.SAMPLE_TYPE = JdbcWritableBridge.readString(39, __dbResults);
    this.PROJECT = JdbcWritableBridge.readString(40, __dbResults);
    this.BATCH_NAME = JdbcWritableBridge.readString(41, __dbResults);
    this.BATCH_TEMPLATE = JdbcWritableBridge.readString(42, __dbResults);
    this.STEP = JdbcWritableBridge.readString(43, __dbResults);
    this.SAMPLE_NAME = JdbcWritableBridge.readString(44, __dbResults);
    this.DESCRIPTION = JdbcWritableBridge.readString(45, __dbResults);
    this.PRIORITY = JdbcWritableBridge.readInteger(46, __dbResults);
    this.LOCATION = JdbcWritableBridge.readString(47, __dbResults);
    this.CUSTOMER = JdbcWritableBridge.readString(48, __dbResults);
    this.TEST_LIST = JdbcWritableBridge.readString(49, __dbResults);
    this.TEMPLATE = JdbcWritableBridge.readString(50, __dbResults);
    this.RECIPIENT = JdbcWritableBridge.readString(51, __dbResults);
    this.STANDARD = JdbcWritableBridge.readString(52, __dbResults);
    this.EXT_LINK = JdbcWritableBridge.readString(53, __dbResults);
    this.CONDITION = JdbcWritableBridge.readString(54, __dbResults);
    this.TIMEPOINT = JdbcWritableBridge.readString(55, __dbResults);
    this.LOT = JdbcWritableBridge.readInteger(56, __dbResults);
    this.BASE_DATE = JdbcWritableBridge.readTimestamp(57, __dbResults);
    this.AVAILABLE_DATE = JdbcWritableBridge.readTimestamp(58, __dbResults);
    this.REQUIRED_DATE = JdbcWritableBridge.readTimestamp(59, __dbResults);
    this.TARGET_DATE = JdbcWritableBridge.readTimestamp(60, __dbResults);
    this.PARTIAL_SPEC = JdbcWritableBridge.readString(61, __dbResults);
    this.SPEC_TYPE = JdbcWritableBridge.readString(62, __dbResults);
    this.STAGE = JdbcWritableBridge.readString(63, __dbResults);
    this.PRIMARY_IN_SPEC = JdbcWritableBridge.readString(64, __dbResults);
    this.BATCH = JdbcWritableBridge.readString(65, __dbResults);
    this.CHARGE_CODE = JdbcWritableBridge.readString(66, __dbResults);
    this.FORMULATION = JdbcWritableBridge.readString(67, __dbResults);
    this.PROTOCOL_LEVEL = JdbcWritableBridge.readString(68, __dbResults);
    this.RELEASED = JdbcWritableBridge.readString(69, __dbResults);
    this.RELEASED_BY = JdbcWritableBridge.readString(70, __dbResults);
    this.RELEASED_ON = JdbcWritableBridge.readTimestamp(71, __dbResults);
    this.IN_CONTROL = JdbcWritableBridge.readString(72, __dbResults);
    this.INVESTIGATION = JdbcWritableBridge.readString(73, __dbResults);
    this.INVESTIGATED = JdbcWritableBridge.readString(74, __dbResults);
    this.APPROVED = JdbcWritableBridge.readString(75, __dbResults);
    this.APPROVAL_GROUP = JdbcWritableBridge.readString(76, __dbResults);
    this.READY_FOR_APPROVAL = JdbcWritableBridge.readString(77, __dbResults);
    this.APPROVAL_ID = JdbcWritableBridge.readInteger(78, __dbResults);
    this.APPROVAL_ROUTING = JdbcWritableBridge.readString(79, __dbResults);
    this.MODIFIED_RESULTS = JdbcWritableBridge.readString(80, __dbResults);
    this.REPORT_NUMBER = JdbcWritableBridge.readInteger(81, __dbResults);
    this.COMPOSITE = JdbcWritableBridge.readString(82, __dbResults);
    this.PARENT_COMPOSITE = JdbcWritableBridge.readInteger(83, __dbResults);
    this.COMPOSITE_TEMPLATE = JdbcWritableBridge.readString(84, __dbResults);
    this.SEASON_DATE = JdbcWritableBridge.readTimestamp(85, __dbResults);
    this.PEOPLE = JdbcWritableBridge.readInteger(86, __dbResults);
    this.TEST_LOCATION = JdbcWritableBridge.readString(87, __dbResults);
    this.OWNER_LOCATION = JdbcWritableBridge.readString(88, __dbResults);
    this.CHK_ALIQUOT_STATUS = JdbcWritableBridge.readString(89, __dbResults);
    this.CHK_ALIQUOT_SPECS = JdbcWritableBridge.readString(90, __dbResults);
    this.ALIQUOT_TEMPLATE = JdbcWritableBridge.readString(91, __dbResults);
    this.CALC_GROUP = JdbcWritableBridge.readString(92, __dbResults);
    this.SAMPLE_EVENT = JdbcWritableBridge.readInteger(93, __dbResults);
    this.LABEL_ID = JdbcWritableBridge.readString(94, __dbResults);
    this.HAS_FLAGS = JdbcWritableBridge.readString(95, __dbResults);
    this.VARIATION = JdbcWritableBridge.readString(96, __dbResults);
    this.SAMPLED_BY = JdbcWritableBridge.readString(97, __dbResults);
    this.SAMPLED = JdbcWritableBridge.readString(98, __dbResults);
    this.ORDER_NUM = JdbcWritableBridge.readString(99, __dbResults);
    this.LAST_ORDER_NUM = JdbcWritableBridge.readString(100, __dbResults);
    this.STORAGE_CONDITION = JdbcWritableBridge.readString(101, __dbResults);
    this.CONTAINER_TYPE = JdbcWritableBridge.readString(102, __dbResults);
    this.NUM_CONTAINERS = JdbcWritableBridge.readInteger(103, __dbResults);
    this.IMPORTANT_MESSAGE = JdbcWritableBridge.readString(104, __dbResults);
    this.OBSERVATIONS = JdbcWritableBridge.readString(105, __dbResults);
    this.LAB = JdbcWritableBridge.readString(106, __dbResults);
    this.EXPIRATION_DATE = JdbcWritableBridge.readTimestamp(107, __dbResults);
    this.REQD_VOLUME = JdbcWritableBridge.readFloat(108, __dbResults);
    this.COLLECTION_METHOD = JdbcWritableBridge.readString(109, __dbResults);
    this.COLLECTION_OFFSET = JdbcWritableBridge.readInteger(110, __dbResults);
    this.SIGNED = JdbcWritableBridge.readString(111, __dbResults);
    this.CASE_NAME = JdbcWritableBridge.readString(112, __dbResults);
    this.CONTRACT_NUMBER = JdbcWritableBridge.readInteger(113, __dbResults);
    this.BILLING_ITEM_DESC = JdbcWritableBridge.readString(114, __dbResults);
    this.INTERPRETED = JdbcWritableBridge.readString(115, __dbResults);
    this.INTERP_TYPE = JdbcWritableBridge.readString(116, __dbResults);
    this.INSPECT_PNT_NUM = JdbcWritableBridge.readInteger(117, __dbResults);
    this.INSPECTION_LOT_NUM = JdbcWritableBridge.readString(118, __dbResults);
    this.IS_INSPECT_PNT = JdbcWritableBridge.readString(119, __dbResults);
    this.PLANT = JdbcWritableBridge.readString(120, __dbResults);
    this.USERC1_VALUE = JdbcWritableBridge.readString(121, __dbResults);
    this.USERC2_VALUE = JdbcWritableBridge.readString(122, __dbResults);
    this.USERD1_VALUE = JdbcWritableBridge.readString(123, __dbResults);
    this.USERN1_VALUE = JdbcWritableBridge.readString(124, __dbResults);
    this.USERN2_VALUE = JdbcWritableBridge.readString(125, __dbResults);
    this.USERT1_VALUE = JdbcWritableBridge.readString(126, __dbResults);
    this.SAP_SELECTED_SET = JdbcWritableBridge.readString(127, __dbResults);
    this.SAP_CODE_GROUP = JdbcWritableBridge.readString(128, __dbResults);
    this.SAP_SAMPLE_NUMBER = JdbcWritableBridge.readString(129, __dbResults);
    this.SAP_SS_PLANT = JdbcWritableBridge.readString(130, __dbResults);
    this.SAP_SAMPLE_COUNT = JdbcWritableBridge.readString(131, __dbResults);
    this.OPERATION_NUMBER = JdbcWritableBridge.readString(132, __dbResults);
    this.STORAGE_LOC_NO = JdbcWritableBridge.readInteger(133, __dbResults);
    this.EXTERNAL_LOCATION = JdbcWritableBridge.readString(134, __dbResults);
    this.FORMULATION_NAME = JdbcWritableBridge.readString(135, __dbResults);
    this.STANDARD_REAGENT = JdbcWritableBridge.readString(136, __dbResults);
    this.CONVERSION_GROUPS = JdbcWritableBridge.readString(137, __dbResults);
    this.REPORTED_RSLT_OOS = JdbcWritableBridge.readString(138, __dbResults);
    this.GROUP_NAME = JdbcWritableBridge.readString(139, __dbResults);
    this.PROCESS_UNIT = JdbcWritableBridge.readString(140, __dbResults);
    this.HAZARD = JdbcWritableBridge.readString(141, __dbResults);
    this.INSTRUMENT = JdbcWritableBridge.readString(142, __dbResults);
    this.T_SITE = JdbcWritableBridge.readString(143, __dbResults);
    this.T_PLANT = JdbcWritableBridge.readString(144, __dbResults);
    this.T_CERTIFICATE = JdbcWritableBridge.readString(145, __dbResults);
    this.T_CONTAINER = JdbcWritableBridge.readString(146, __dbResults);
    this.T_OVERDUE = JdbcWritableBridge.readString(147, __dbResults);
    this.T_PO_NUMBER = JdbcWritableBridge.readString(148, __dbResults);
    this.T_PRODUCTION_DATE = JdbcWritableBridge.readTimestamp(149, __dbResults);
    this.T_REPORT_DATE = JdbcWritableBridge.readTimestamp(150, __dbResults);
    this.T_REQUESTED_BY = JdbcWritableBridge.readString(151, __dbResults);
    this.T_LONG_NOTE = JdbcWritableBridge.readInteger(152, __dbResults);
    this.T_SHIFT_CODE = JdbcWritableBridge.readString(153, __dbResults);
    this.T_SUPP_BATCH_NO = JdbcWritableBridge.readString(154, __dbResults);
    this.T_SUPPLIER = JdbcWritableBridge.readString(155, __dbResults);
    this.T_TRUCK_VESSEL = JdbcWritableBridge.readString(156, __dbResults);
    this.T_PLANT_RECV_BY = JdbcWritableBridge.readString(157, __dbResults);
    this.T_PLANT_RECV_DATE = JdbcWritableBridge.readTimestamp(158, __dbResults);
    this.C_PRIORITY = JdbcWritableBridge.readString(159, __dbResults);
    this.STORAGE_TEMPLATE = JdbcWritableBridge.readString(160, __dbResults);
    this.ALLOW_CHLD_ALQTS = JdbcWritableBridge.readString(161, __dbResults);
    this.PHASE = JdbcWritableBridge.readString(162, __dbResults);
    this.SCHEDULE_NUMBER = JdbcWritableBridge.readInteger(163, __dbResults);
    this.T_ACTION_NUMBER = JdbcWritableBridge.readInteger(164, __dbResults);
    this.T_BATCH_NAME1 = JdbcWritableBridge.readString(165, __dbResults);
    this.T_BATCH_NAME2 = JdbcWritableBridge.readString(166, __dbResults);
    this.T_BATCH_NAME3 = JdbcWritableBridge.readString(167, __dbResults);
    this.T_BATCH_NAME4 = JdbcWritableBridge.readString(168, __dbResults);
    this.T_BATCH_NAME5 = JdbcWritableBridge.readString(169, __dbResults);
    this.T_BATCH_NAME6 = JdbcWritableBridge.readString(170, __dbResults);
    this.T_COLLECT_SCHEME = JdbcWritableBridge.readString(171, __dbResults);
    this.T_COMPOSITE_GROUP = JdbcWritableBridge.readString(172, __dbResults);
    this.T_DISTRIBUTION_BY = JdbcWritableBridge.readString(173, __dbResults);
    this.T_DISTRIBUTION_DATE = JdbcWritableBridge.readTimestamp(174, __dbResults);
    this.T_EM_PLAN = JdbcWritableBridge.readInteger(175, __dbResults);
    this.T_INCUB1_BATCH = JdbcWritableBridge.readString(176, __dbResults);
    this.T_INCUB1_END = JdbcWritableBridge.readTimestamp(177, __dbResults);
    this.T_INCUB1_START = JdbcWritableBridge.readTimestamp(178, __dbResults);
    this.T_INCUB2_BATCH = JdbcWritableBridge.readString(179, __dbResults);
    this.T_INCUB2_END = JdbcWritableBridge.readTimestamp(180, __dbResults);
    this.T_INCUB2_START = JdbcWritableBridge.readTimestamp(181, __dbResults);
    this.T_MEDIA_REFERENCE = JdbcWritableBridge.readString(182, __dbResults);
    this.T_ORIGINAL_SAMPLE = JdbcWritableBridge.readInteger(183, __dbResults);
    this.T_PERSONNEL = JdbcWritableBridge.readString(184, __dbResults);
    this.T_PERSONNEL_SET = JdbcWritableBridge.readString(185, __dbResults);
    this.T_SAMPLE_TYPE = JdbcWritableBridge.readString(186, __dbResults);
    this.T_SCHEDULE_GROUP = JdbcWritableBridge.readString(187, __dbResults);
    this.T_SUITE = JdbcWritableBridge.readString(188, __dbResults);
    this.T_TRANSIT_LOCATION = JdbcWritableBridge.readString(189, __dbResults);
    this.T_VALIDATION = JdbcWritableBridge.readString(190, __dbResults);
    this.C_REFERENCE_ID = JdbcWritableBridge.readString(191, __dbResults);
    this.C_SAMPLING_REASON = JdbcWritableBridge.readString(192, __dbResults);
    this.C_CUSTOMER_TYPE = JdbcWritableBridge.readString(193, __dbResults);
    this.C_REQUEST_TYPE = JdbcWritableBridge.readString(194, __dbResults);
    this.C_OTHER_SAMPLE_SOURCE = JdbcWritableBridge.readString(195, __dbResults);
    this.C_CUST_ID = JdbcWritableBridge.readString(196, __dbResults);
    this.C_CLIENT_TYPE = JdbcWritableBridge.readString(197, __dbResults);
    this.C_REQ_SAMP_TYPE = JdbcWritableBridge.readString(198, __dbResults);
    this.C_SAMPLE_SOURCE = JdbcWritableBridge.readString(199, __dbResults);
    this.C_DM_BARCODE = JdbcWritableBridge.readString(200, __dbResults);
    this.C_REQ_EXT_REFERENCE = JdbcWritableBridge.readString(201, __dbResults);
    this.C_EXPRESS_SERVICE = JdbcWritableBridge.readString(202, __dbResults);
    this.C_HARDCOPY_REQUIRED = JdbcWritableBridge.readString(203, __dbResults);
    this.C_REQ_REMARKS = JdbcWritableBridge.readString(204, __dbResults);
    this.C_REQ_COPIES = JdbcWritableBridge.readInteger(205, __dbResults);
    this.C_REQ_EDIT = JdbcWritableBridge.readString(206, __dbResults);
    this.C_TOTAL_SERVICE_FEE = JdbcWritableBridge.readBigDecimal(207, __dbResults);
    this.C_PRODUCT_GROUP = JdbcWritableBridge.readString(208, __dbResults);
    this.C_PRODUCT_CATEGORY = JdbcWritableBridge.readString(209, __dbResults);
    this.C_PRODUCTION_DATE = JdbcWritableBridge.readTimestamp(210, __dbResults);
    this.C_NO_OF_UNIT = JdbcWritableBridge.readInteger(211, __dbResults);
    this.C_SAMPLE_CONDITION = JdbcWritableBridge.readString(212, __dbResults);
    this.C_TEMP_REC = JdbcWritableBridge.readFloat(213, __dbResults);
    this.C_POINT_OF_SAMPLING = JdbcWritableBridge.readString(214, __dbResults);
    this.C_REQ_SAMP_COLLECTION = JdbcWritableBridge.readString(215, __dbResults);
    this.C_REQ_SAMP_BAL_RETURN = JdbcWritableBridge.readString(216, __dbResults);
    this.C_HAZARD = JdbcWritableBridge.readString(217, __dbResults);
    this.C_BATCH_NO = JdbcWritableBridge.readString(218, __dbResults);
    this.C_REQUEST_NO = JdbcWritableBridge.readString(219, __dbResults);
    this.C_BILLING_TYPE = JdbcWritableBridge.readString(220, __dbResults);
    this.C_TOTAL_TEST_CHARGE = JdbcWritableBridge.readBigDecimal(221, __dbResults);
    this.C_VOUCHER = JdbcWritableBridge.readString(222, __dbResults);
    this.C_ERAD_NO = JdbcWritableBridge.readString(223, __dbResults);
    this.C_RECEIPT = JdbcWritableBridge.readString(224, __dbResults);
    this.C_PAYMENT_DT = JdbcWritableBridge.readTimestamp(225, __dbResults);
    this.C_PAYMENT_SRC = JdbcWritableBridge.readString(226, __dbResults);
    this.C_PAYMENT_STATUS = JdbcWritableBridge.readString(227, __dbResults);
    this.C_CUST_DELIVERY_DATE = JdbcWritableBridge.readTimestamp(228, __dbResults);
    this.C_SAMPLE_OPINION = JdbcWritableBridge.readString(229, __dbResults);
    this.C_SUBCAT_ID = JdbcWritableBridge.readInteger(230, __dbResults);
    this.C_PRODCAT_ID = JdbcWritableBridge.readInteger(231, __dbResults);
    this.C_PROD_GROUP_ID = JdbcWritableBridge.readInteger(232, __dbResults);
    this.C_MSG_ID = JdbcWritableBridge.readString(233, __dbResults);
    this.C_MSG_DIGEST = JdbcWritableBridge.readString(234, __dbResults);
    this.C_REQ_SOURCE = JdbcWritableBridge.readString(235, __dbResults);
    this.C_ITEM_ID = JdbcWritableBridge.readInteger(236, __dbResults);
    this.C_SRC_REQ_ID = JdbcWritableBridge.readString(237, __dbResults);
    this.C_EXPECTED_DATE = JdbcWritableBridge.readTimestamp(238, __dbResults);
    this.C_PRODUCT_DESC = JdbcWritableBridge.readString(239, __dbResults);
    this.C_DATE_ONHOLD = JdbcWritableBridge.readTimestamp(240, __dbResults);
    this.C_DATE_OFFHOLD = JdbcWritableBridge.readTimestamp(241, __dbResults);
    this.C_ONHOLD_REASON = JdbcWritableBridge.readString(242, __dbResults);
    this.LATITUDE = JdbcWritableBridge.readString(243, __dbResults);
    this.LONGITUDE = JdbcWritableBridge.readString(244, __dbResults);
    this.C_ON_SITE_PRESERVATION = JdbcWritableBridge.readString(245, __dbResults);
    this.C_PRESERVATION_METHOD = JdbcWritableBridge.readString(246, __dbResults);
    this.C_SAMPLING_PROCEDURE = JdbcWritableBridge.readString(247, __dbResults);
    this.C_SAMPLING_APPARATUS = JdbcWritableBridge.readString(248, __dbResults);
    this.C_APPEARANCE = JdbcWritableBridge.readString(249, __dbResults);
    this.C_COLOUR = JdbcWritableBridge.readString(250, __dbResults);
    this.C_ODOUR = JdbcWritableBridge.readString(251, __dbResults);
    this.C_SAMPLING_COLLECTION_LOC = JdbcWritableBridge.readString(252, __dbResults);
    this.C_REPORT_ID = JdbcWritableBridge.readString(253, __dbResults);
    this.C_DELIVERED_BY = JdbcWritableBridge.readString(254, __dbResults);
    this.C_MAKANI_NO = JdbcWritableBridge.readString(255, __dbResults);
    this.C_COUNTRY = JdbcWritableBridge.readString(256, __dbResults);
    this.C_BUILDING_FLOOR = JdbcWritableBridge.readString(257, __dbResults);
    this.C_LOCATION_DESC = JdbcWritableBridge.readString(258, __dbResults);
    this.C_ITEM_BARCODE = JdbcWritableBridge.readString(259, __dbResults);
    this.C_ITEM_BRAND = JdbcWritableBridge.readString(260, __dbResults);
    this.C_MANUFACTURER = JdbcWritableBridge.readString(261, __dbResults);
    this.C_COUNTRY_ORIGIN = JdbcWritableBridge.readString(262, __dbResults);
    this.C_ITEM_TRADE_NAME = JdbcWritableBridge.readString(263, __dbResults);
    this.C_PROCESS_ONE = JdbcWritableBridge.readString(264, __dbResults);
    this.C_PROCESS_TWO = JdbcWritableBridge.readString(265, __dbResults);
    this.C_SHELF_LIFE = JdbcWritableBridge.readString(266, __dbResults);
    this.C_SHELF_LIFE_UNIT = JdbcWritableBridge.readString(267, __dbResults);
    this.C_STORAGE_CONDITION = JdbcWritableBridge.readString(268, __dbResults);
    this.C_WEIGHT = JdbcWritableBridge.readString(269, __dbResults);
    this.C_WEIGHT_UNIT = JdbcWritableBridge.readString(270, __dbResults);
    this.C_PACKAGING_TYPE = JdbcWritableBridge.readString(271, __dbResults);
    this.C_TEST_TYPE = JdbcWritableBridge.readString(272, __dbResults);
    this.C_EXTERNAL_REFERENCE = JdbcWritableBridge.readString(273, __dbResults);
    this.C_NOMINAL_SIZE = JdbcWritableBridge.readString(274, __dbResults);
    this.C_LAYER_MIX_TYPE = JdbcWritableBridge.readString(275, __dbResults);
    this.C_SAMPLE_UNIT = JdbcWritableBridge.readString(276, __dbResults);
    this.C_SAMP_QNTY = JdbcWritableBridge.readInteger(277, __dbResults);
    this.C_SAMPLED_BY = JdbcWritableBridge.readString(278, __dbResults);
    this.C_BITUMEN_LOCALSUPPLIER = JdbcWritableBridge.readString(279, __dbResults);
    this.C_BLOCK_TOTALBUNDLES = JdbcWritableBridge.readString(280, __dbResults);
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = JdbcWritableBridge.readString(281, __dbResults);
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = JdbcWritableBridge.readString(282, __dbResults);
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = JdbcWritableBridge.readString(283, __dbResults);
    this.C_BLOCK_BLOCKSPERBUNDLE = JdbcWritableBridge.readString(284, __dbResults);
    this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = JdbcWritableBridge.readString(285, __dbResults);
    this.C_MORTAR_WATERORCEMENTRATIO = JdbcWritableBridge.readString(286, __dbResults);
    this.C_MORTAR_TYPEOFMORTAR = JdbcWritableBridge.readString(287, __dbResults);
    this.C_THERMALINSULATION_NOMTHICKNESS = JdbcWritableBridge.readString(288, __dbResults);
    this.C_THERMALINSULATION_NOMDENSITY = JdbcWritableBridge.readString(289, __dbResults);
    this.C_THERMALINSULATION_NOMDIAMETER = JdbcWritableBridge.readString(290, __dbResults);
    this.C_THERMALINSULATION_FACINGTYPE = JdbcWritableBridge.readString(291, __dbResults);
    this.C_THERMALINSULATION_FACINGDESCRIPTION = JdbcWritableBridge.readString(292, __dbResults);
    this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = JdbcWritableBridge.readString(293, __dbResults);
    this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = JdbcWritableBridge.readString(294, __dbResults);
    this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = JdbcWritableBridge.readString(295, __dbResults);
    this.C_LUBEOIL_VISCOSITYGRADE = JdbcWritableBridge.readString(296, __dbResults);
    this.C_ASPHALT_REFGMB = JdbcWritableBridge.readString(297, __dbResults);
    this.C_ASPHALT_REFGSB = JdbcWritableBridge.readString(298, __dbResults);
    this.C_ASPHALT_REFGSE = JdbcWritableBridge.readString(299, __dbResults);
    this.C_ASPHALT_REFGB = JdbcWritableBridge.readString(300, __dbResults);
    this.C_ASPHALT_LAYINGDATE = JdbcWritableBridge.readTimestamp(301, __dbResults);
    this.C_ASPHALT_REFMARSHALLREQNO = JdbcWritableBridge.readString(302, __dbResults);
    this.C_ASPHALT_REFBITUMENREQNO = JdbcWritableBridge.readString(303, __dbResults);
    this.C_ASPHALT_REFMIX = JdbcWritableBridge.readString(304, __dbResults);
    this.C_ASPHALT_CALIBRATIONFACTOR = JdbcWritableBridge.readString(305, __dbResults);
    this.C_ASPHALT_GRADINGORBITUMENSPECS = JdbcWritableBridge.readString(306, __dbResults);
    this.C_ASPHALT_OTHERSPECS = JdbcWritableBridge.readString(307, __dbResults);
    this.C_CEMENT_CLASSOFCEMENT = JdbcWritableBridge.readString(308, __dbResults);
    this.C_CONCRETE_GRADEOFCONCRETE = JdbcWritableBridge.readString(309, __dbResults);
    this.C_CONCRETE_CEMENTCONTENT = JdbcWritableBridge.readString(310, __dbResults);
    this.C_CONCRETE_TESTINGAGEOFSAMPLE = JdbcWritableBridge.readString(311, __dbResults);
    this.C_CONCRETE_ESTIMATEDTESTDATE = JdbcWritableBridge.readTimestamp(312, __dbResults);
    this.C_CONCRETE_TRUCKNUMBER = JdbcWritableBridge.readString(313, __dbResults);
    this.C_CONCRETE_PLACEOFMAKINGCUBES = JdbcWritableBridge.readString(314, __dbResults);
    this.C_CONCRETE_EQUIPMENTTYPEUSED = JdbcWritableBridge.readString(315, __dbResults);
    this.C_CONCRETE_CURINGORSTORAGECONDITIONS = JdbcWritableBridge.readString(316, __dbResults);
    this.C_CONCRETE_METHODOFCOMPACTION = JdbcWritableBridge.readString(317, __dbResults);
    this.C_CONCRETE_CONDITIONOFSAMPLE = JdbcWritableBridge.readString(318, __dbResults);
    this.C_FRESHCONCRETE_CEMENT = JdbcWritableBridge.readString(319, __dbResults);
    this.C_FRESHCONCRETE_CEMENTTYPE = JdbcWritableBridge.readString(320, __dbResults);
    this.C_FRESHCONCRETE_ADMIXTURE = JdbcWritableBridge.readString(321, __dbResults);
    this.C_FRESHCONCRETE_ADMIXTURETYPE = JdbcWritableBridge.readString(322, __dbResults);
    this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = JdbcWritableBridge.readString(323, __dbResults);
    this.C_FRESHCONCRETE_AGGREGATE_20MM = JdbcWritableBridge.readString(324, __dbResults);
    this.C_FRESHCONCRETE_AGGREGATE_10MM = JdbcWritableBridge.readString(325, __dbResults);
    this.C_FRESHCONCRETE_AGGREGATE_1MM = JdbcWritableBridge.readString(326, __dbResults);
    this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = JdbcWritableBridge.readString(327, __dbResults);
    this.C_SOIL_MDD = JdbcWritableBridge.readString(328, __dbResults);
    this.C_SOIL_OMC = JdbcWritableBridge.readString(329, __dbResults);
    this.C_SOIL_MDD_OMC_REF = JdbcWritableBridge.readString(330, __dbResults);
    this.C_SOIL_BFRL = JdbcWritableBridge.readString(331, __dbResults);
    this.C_SOIL_LAYER_THICKNESSMM = JdbcWritableBridge.readString(332, __dbResults);
    this.C_SOIL_SOURCE_MINERAL_AGG = JdbcWritableBridge.readString(333, __dbResults);
    this.C_STEEL_MANUFACTURER_CERT_NO = JdbcWritableBridge.readString(334, __dbResults);
    this.C_STEEL_GRADE_STEEL = JdbcWritableBridge.readString(335, __dbResults);
    this.C_STEEL_LOCAL_SUPPLIER = JdbcWritableBridge.readString(336, __dbResults);
    this.C_STEEL_HEAT_NUMBER = JdbcWritableBridge.readString(337, __dbResults);
    this.C_PRODUCT_TEST_SERV = JdbcWritableBridge.readString(338, __dbResults);
    this.C_SAMPLING_METHOD = JdbcWritableBridge.readString(339, __dbResults);
    this.C_SAMPLE_DESC = JdbcWritableBridge.readString(340, __dbResults);
    this.C_BATCH_SIZE = JdbcWritableBridge.readString(341, __dbResults);
    this.C_UNITNO = JdbcWritableBridge.readString(342, __dbResults);
    this.C_UNITSIZE = JdbcWritableBridge.readString(343, __dbResults);
    this.C_NO_INCREMENT = JdbcWritableBridge.readString(344, __dbResults);
    this.C_MORE_SAMPLE_NOTE = JdbcWritableBridge.readInteger(345, __dbResults);
    this.C_STAGES = JdbcWritableBridge.readString(346, __dbResults);
    this.C_RETURN_NOTE = JdbcWritableBridge.readString(347, __dbResults);
    this.C_DISCARD = JdbcWritableBridge.readString(348, __dbResults);
    this.C_DISCARD_DATE = JdbcWritableBridge.readTimestamp(349, __dbResults);
    this.C_DISCARD_BY = JdbcWritableBridge.readString(350, __dbResults);
    this.C_TRAVEL_CALCULATED = JdbcWritableBridge.readString(351, __dbResults);
    this.C_PHYSICAL_OBSERVATION = JdbcWritableBridge.readString(352, __dbResults);
    this.C_SENDER_NO = JdbcWritableBridge.readString(353, __dbResults);
    this.C_REF_SENDER_NO = JdbcWritableBridge.readString(354, __dbResults);
    this.C_TESTLAB = JdbcWritableBridge.readString(355, __dbResults);
    this.C_PRIMARY_RESULT = JdbcWritableBridge.readString(356, __dbResults);
    this.C_PRIMARY_REPORT_NO = JdbcWritableBridge.readString(357, __dbResults);
    this.C_REF_RESULT = JdbcWritableBridge.readString(358, __dbResults);
    this.C_REF_REPORT_NO = JdbcWritableBridge.readString(359, __dbResults);
    this.C_DETERMINATION = JdbcWritableBridge.readString(360, __dbResults);
    this.C_EQUIPMENT_TYPE = JdbcWritableBridge.readString(361, __dbResults);
    this.C_EQUIPMENT_CLASS = JdbcWritableBridge.readString(362, __dbResults);
    this.C_CAPACITY = JdbcWritableBridge.readString(363, __dbResults);
    this.C_NO_OF_MEASUREMENTS = JdbcWritableBridge.readString(364, __dbResults);
    this.C_REQ_DATE_CALIB = JdbcWritableBridge.readTimestamp(365, __dbResults);
    this.C_CALIB_SITE = JdbcWritableBridge.readString(366, __dbResults);
    this.C_CALIB_METHOD = JdbcWritableBridge.readString(367, __dbResults);
    this.C_ASSET_NAME = JdbcWritableBridge.readString(368, __dbResults);
    this.C_MODEL_NO = JdbcWritableBridge.readString(369, __dbResults);
    this.C_PURCHASE_DATE = JdbcWritableBridge.readTimestamp(370, __dbResults);
    this.C_PURCHASE_PRICE = JdbcWritableBridge.readBigDecimal(371, __dbResults);
    this.C_DELIVERY_RECD = JdbcWritableBridge.readTimestamp(372, __dbResults);
    this.C_DATE_OF_INSTALL = JdbcWritableBridge.readTimestamp(373, __dbResults);
    this.C_TAG_NO = JdbcWritableBridge.readInteger(374, __dbResults);
    this.C_SERIAL_NO = JdbcWritableBridge.readInteger(375, __dbResults);
    this.C_NO_OF_ACCESSORIES = JdbcWritableBridge.readInteger(376, __dbResults);
    this.C_ACCESSORY_DETAIL = JdbcWritableBridge.readString(377, __dbResults);
    this.C_ADDR_ROOM_NO = JdbcWritableBridge.readString(378, __dbResults);
    this.C_WARRANTY_EXP_DATE = JdbcWritableBridge.readTimestamp(379, __dbResults);
    this.C_UNDER_CONTRACT = JdbcWritableBridge.readString(380, __dbResults);
    this.C_CONTRACT_NO = JdbcWritableBridge.readString(381, __dbResults);
    this.C_CONTRACT_COMP = JdbcWritableBridge.readString(382, __dbResults);
    this.C_CONTRACT_START = JdbcWritableBridge.readTimestamp(383, __dbResults);
    this.C_CONTRACT_END = JdbcWritableBridge.readTimestamp(384, __dbResults);
    this.C_CALIB_TYPE = JdbcWritableBridge.readString(385, __dbResults);
    this.C_AGE_GROUP_LABEL = JdbcWritableBridge.readString(386, __dbResults);
    this.C_AGE_GROUP_TEST = JdbcWritableBridge.readString(387, __dbResults);
    this.C_TOYS_DIMENSION = JdbcWritableBridge.readString(388, __dbResults);
    this.C_TOYS_FEATURES = JdbcWritableBridge.readString(389, __dbResults);
    this.C_TOYS_LABEL_DETAILS = JdbcWritableBridge.readString(390, __dbResults);
    this.C_TEXTILE_CLASS = JdbcWritableBridge.readString(391, __dbResults);
    this.C_TEXTILE_TYPE = JdbcWritableBridge.readString(392, __dbResults);
    this.C_MONTAJI_REGISTERED = JdbcWritableBridge.readString(393, __dbResults);
    this.C_MONTAJI_REF = JdbcWritableBridge.readString(394, __dbResults);
    this.C_SEALING_PACK = JdbcWritableBridge.readString(395, __dbResults);
    this.C_TYPE = JdbcWritableBridge.readString(396, __dbResults);
    this.C_FORM = JdbcWritableBridge.readString(397, __dbResults);
    this.C_FORM_TYPE = JdbcWritableBridge.readString(398, __dbResults);
    this.C_FINENESS = JdbcWritableBridge.readString(399, __dbResults);
    this.C_SHAPE = JdbcWritableBridge.readString(400, __dbResults);
    this.C_LABORATORY = JdbcWritableBridge.readString(401, __dbResults);
    this.C_CEMARK = JdbcWritableBridge.readString(402, __dbResults);
    this.C_AGE = JdbcWritableBridge.readInteger(403, __dbResults);
    this.C_GENDER = JdbcWritableBridge.readString(404, __dbResults);
    this.C_OWNER_NAME = JdbcWritableBridge.readString(405, __dbResults);
    this.C_CONSIGNMENT_NO = JdbcWritableBridge.readString(406, __dbResults);
    this.C_SAMPLE_ORIGIN = JdbcWritableBridge.readString(407, __dbResults);
    this.C_MEAT_REQ_TYP = JdbcWritableBridge.readString(408, __dbResults);
    this.C_PURPOSE_TEST = JdbcWritableBridge.readString(409, __dbResults);
    this.C_COLL_CLARITY = JdbcWritableBridge.readString(410, __dbResults);
    this.C_COLL_DESC = JdbcWritableBridge.readString(411, __dbResults);
    this.C_COLL_ISCOLLSAMPLE = JdbcWritableBridge.readString(412, __dbResults);
    this.C_COLL_NAME = JdbcWritableBridge.readString(413, __dbResults);
    this.C_COLL_EMIRATEID = JdbcWritableBridge.readString(414, __dbResults);
    this.C_DCL_USERID = JdbcWritableBridge.readString(415, __dbResults);
    this.C_FAILURE_DESC = JdbcWritableBridge.readString(416, __dbResults);
    this.C_FAILURE_COMP = JdbcWritableBridge.readString(417, __dbResults);
    this.C_WORK_FAIL = JdbcWritableBridge.readString(418, __dbResults);
    this.C_PURCHASE_REF = JdbcWritableBridge.readString(419, __dbResults);
    this.C_PURCHASE_TYPE = JdbcWritableBridge.readString(420, __dbResults);
    this.C_PEARL_FIELD = JdbcWritableBridge.readString(421, __dbResults);
    this.C_POBOX = JdbcWritableBridge.readString(422, __dbResults);
    this.C_PRODUCT_DILUENT = JdbcWritableBridge.readString(423, __dbResults);
    this.C_ACTIVE_SUBSTANCE = JdbcWritableBridge.readString(424, __dbResults);
    this.C_EDIT_ASSET = JdbcWritableBridge.readString(425, __dbResults);
    this.C_PH = JdbcWritableBridge.readBigDecimal(426, __dbResults);
    this.C_NATUREOFACTIVITY = JdbcWritableBridge.readString(427, __dbResults);
    this.C_CHLORINELEVEL = JdbcWritableBridge.readBigDecimal(428, __dbResults);
    this.C_RISK_ASSESSMENT = JdbcWritableBridge.readString(429, __dbResults);
    this.C_SPECIMEN = JdbcWritableBridge.readInteger(430, __dbResults);
  }
  public void loadLargeObjects(LargeObjectLoader __loader)
      throws SQLException, IOException, InterruptedException {
  }
  public void loadLargeObjects0(LargeObjectLoader __loader)
      throws SQLException, IOException, InterruptedException {
  }
  public void write(PreparedStatement __dbStmt) throws SQLException {
    write(__dbStmt, 0);
  }

  public int write(PreparedStatement __dbStmt, int __off) throws SQLException {
    JdbcWritableBridge.writeInteger(SAMPLE_NUMBER, 1 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(TEXT_ID, 2 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STATUS, 3 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OLD_STATUS, 4 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(DISP_FLDS, 5 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LABEL_MASK, 6 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(IN_SPEC, 7 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(IN_CAL, 8 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(CHANGED_ON, 9 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(RE_SAMPLE, 10 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ALIQUOT, 11 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(ORIGINAL_SAMPLE, 12 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(PARENT_SAMPLE, 13 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(PARENT_ALIQUOT, 14 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(ALIQUOT_GROUP, 15 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeFloat(SAMPLE_VOLUME, 16 + __off, 7, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLE_UNITS, 17 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(LOGIN_DATE, 18 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(LOGIN_BY, 19 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(SAMPLED_DATE, 20 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(RECD_DATE, 21 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(RECEIVED_BY, 22 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DATE_STARTED, 23 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(STARTED, 24 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ASSIGNED_OPERATOR, 25 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DUE_DATE, 26 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DATE_COMPLETED, 27 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DATE_REVIEWED, 28 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(PREP, 29 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(PREP_DATE, 30 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(PREP_BY, 31 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(REVIEWER, 32 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(REVIEW_NOTE, 33 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PRODUCT_CODE, 34 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PRODUCT, 35 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(PRODUCT_VERSION, 36 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(PRODUCT_GRADE, 37 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLING_POINT, 38 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLE_TYPE, 39 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PROJECT, 40 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(BATCH_NAME, 41 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(BATCH_TEMPLATE, 42 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STEP, 43 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLE_NAME, 44 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(DESCRIPTION, 45 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(PRIORITY, 46 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(LOCATION, 47 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CUSTOMER, 48 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(TEST_LIST, 49 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(TEMPLATE, 50 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(RECIPIENT, 51 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STANDARD, 52 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(EXT_LINK, 53 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CONDITION, 54 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(TIMEPOINT, 55 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(LOT, 56 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeTimestamp(BASE_DATE, 57 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(AVAILABLE_DATE, 58 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(REQUIRED_DATE, 59 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(TARGET_DATE, 60 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(PARTIAL_SPEC, 61 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SPEC_TYPE, 62 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STAGE, 63 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PRIMARY_IN_SPEC, 64 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(BATCH, 65 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CHARGE_CODE, 66 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(FORMULATION, 67 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PROTOCOL_LEVEL, 68 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(RELEASED, 69 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(RELEASED_BY, 70 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(RELEASED_ON, 71 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(IN_CONTROL, 72 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INVESTIGATION, 73 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INVESTIGATED, 74 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(APPROVED, 75 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(APPROVAL_GROUP, 76 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(READY_FOR_APPROVAL, 77 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(APPROVAL_ID, 78 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(APPROVAL_ROUTING, 79 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(MODIFIED_RESULTS, 80 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(REPORT_NUMBER, 81 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(COMPOSITE, 82 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(PARENT_COMPOSITE, 83 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(COMPOSITE_TEMPLATE, 84 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(SEASON_DATE, 85 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(PEOPLE, 86 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(TEST_LOCATION, 87 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OWNER_LOCATION, 88 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CHK_ALIQUOT_STATUS, 89 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CHK_ALIQUOT_SPECS, 90 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ALIQUOT_TEMPLATE, 91 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CALC_GROUP, 92 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(SAMPLE_EVENT, 93 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(LABEL_ID, 94 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(HAS_FLAGS, 95 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(VARIATION, 96 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLED_BY, 97 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLED, 98 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ORDER_NUM, 99 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LAST_ORDER_NUM, 100 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STORAGE_CONDITION, 101 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CONTAINER_TYPE, 102 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(NUM_CONTAINERS, 103 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(IMPORTANT_MESSAGE, 104 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OBSERVATIONS, 105 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LAB, 106 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(EXPIRATION_DATE, 107 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeFloat(REQD_VOLUME, 108 + __off, 7, __dbStmt);
    JdbcWritableBridge.writeString(COLLECTION_METHOD, 109 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(COLLECTION_OFFSET, 110 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(SIGNED, 111 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CASE_NAME, 112 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(CONTRACT_NUMBER, 113 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(BILLING_ITEM_DESC, 114 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INTERPRETED, 115 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INTERP_TYPE, 116 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(INSPECT_PNT_NUM, 117 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(INSPECTION_LOT_NUM, 118 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(IS_INSPECT_PNT, 119 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PLANT, 120 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERC1_VALUE, 121 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERC2_VALUE, 122 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERD1_VALUE, 123 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERN1_VALUE, 124 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERN2_VALUE, 125 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERT1_VALUE, 126 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SELECTED_SET, 127 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_CODE_GROUP, 128 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SAMPLE_NUMBER, 129 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SS_PLANT, 130 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SAMPLE_COUNT, 131 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OPERATION_NUMBER, 132 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(STORAGE_LOC_NO, 133 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(EXTERNAL_LOCATION, 134 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(FORMULATION_NAME, 135 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STANDARD_REAGENT, 136 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CONVERSION_GROUPS, 137 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(REPORTED_RSLT_OOS, 138 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(GROUP_NAME, 139 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PROCESS_UNIT, 140 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(HAZARD, 141 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INSTRUMENT, 142 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SITE, 143 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PLANT, 144 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_CERTIFICATE, 145 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_CONTAINER, 146 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_OVERDUE, 147 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PO_NUMBER, 148 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_PRODUCTION_DATE, 149 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_REPORT_DATE, 150 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(T_REQUESTED_BY, 151 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(T_LONG_NOTE, 152 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_SHIFT_CODE, 153 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SUPP_BATCH_NO, 154 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SUPPLIER, 155 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_TRUCK_VESSEL, 156 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PLANT_RECV_BY, 157 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_PLANT_RECV_DATE, 158 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_PRIORITY, 159 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STORAGE_TEMPLATE, 160 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ALLOW_CHLD_ALQTS, 161 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PHASE, 162 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(SCHEDULE_NUMBER, 163 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(T_ACTION_NUMBER, 164 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME1, 165 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME2, 166 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME3, 167 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME4, 168 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME5, 169 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME6, 170 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_COLLECT_SCHEME, 171 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_COMPOSITE_GROUP, 172 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_DISTRIBUTION_BY, 173 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_DISTRIBUTION_DATE, 174 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(T_EM_PLAN, 175 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_INCUB1_BATCH, 176 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB1_END, 177 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB1_START, 178 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(T_INCUB2_BATCH, 179 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB2_END, 180 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB2_START, 181 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(T_MEDIA_REFERENCE, 182 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(T_ORIGINAL_SAMPLE, 183 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_PERSONNEL, 184 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PERSONNEL_SET, 185 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SAMPLE_TYPE, 186 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SCHEDULE_GROUP, 187 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SUITE, 188 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_TRANSIT_LOCATION, 189 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_VALIDATION, 190 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REFERENCE_ID, 191 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_REASON, 192 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CUSTOMER_TYPE, 193 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQUEST_TYPE, 194 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_OTHER_SAMPLE_SOURCE, 195 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CUST_ID, 196 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CLIENT_TYPE, 197 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SAMP_TYPE, 198 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_SOURCE, 199 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_DM_BARCODE, 200 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_EXT_REFERENCE, 201 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_EXPRESS_SERVICE, 202 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_HARDCOPY_REQUIRED, 203 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_REMARKS, 204 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_REQ_COPIES, 205 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_EDIT, 206 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_TOTAL_SERVICE_FEE, 207 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_GROUP, 208 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_CATEGORY, 209 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_PRODUCTION_DATE, 210 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(C_NO_OF_UNIT, 211 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_CONDITION, 212 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeFloat(C_TEMP_REC, 213 + __off, 7, __dbStmt);
    JdbcWritableBridge.writeString(C_POINT_OF_SAMPLING, 214 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SAMP_COLLECTION, 215 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SAMP_BAL_RETURN, 216 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_HAZARD, 217 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BATCH_NO, 218 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQUEST_NO, 219 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BILLING_TYPE, 220 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_TOTAL_TEST_CHARGE, 221 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_VOUCHER, 222 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ERAD_NO, 223 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_RECEIPT, 224 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_PAYMENT_DT, 225 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_PAYMENT_SRC, 226 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PAYMENT_STATUS, 227 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CUST_DELIVERY_DATE, 228 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_OPINION, 229 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SUBCAT_ID, 230 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_PRODCAT_ID, 231 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_PROD_GROUP_ID, 232 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_MSG_ID, 233 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MSG_DIGEST, 234 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SOURCE, 235 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_ITEM_ID, 236 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_SRC_REQ_ID, 237 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_EXPECTED_DATE, 238 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_DESC, 239 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DATE_ONHOLD, 240 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DATE_OFFHOLD, 241 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_ONHOLD_REASON, 242 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LATITUDE, 243 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LONGITUDE, 244 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ON_SITE_PRESERVATION, 245 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PRESERVATION_METHOD, 246 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_PROCEDURE, 247 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_APPARATUS, 248 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_APPEARANCE, 249 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLOUR, 250 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ODOUR, 251 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_COLLECTION_LOC, 252 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REPORT_ID, 253 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_DELIVERED_BY, 254 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MAKANI_NO, 255 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_COUNTRY, 256 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BUILDING_FLOOR, 257 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_LOCATION_DESC, 258 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ITEM_BARCODE, 259 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ITEM_BRAND, 260 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MANUFACTURER, 261 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_COUNTRY_ORIGIN, 262 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ITEM_TRADE_NAME, 263 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PROCESS_ONE, 264 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PROCESS_TWO, 265 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SHELF_LIFE, 266 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SHELF_LIFE_UNIT, 267 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STORAGE_CONDITION, 268 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_WEIGHT, 269 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_WEIGHT_UNIT, 270 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PACKAGING_TYPE, 271 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_TEST_TYPE, 272 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EXTERNAL_REFERENCE, 273 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_NOMINAL_SIZE, 274 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_LAYER_MIX_TYPE, 275 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_UNIT, 276 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SAMP_QNTY, 277 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLED_BY, 278 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BITUMEN_LOCALSUPPLIER, 279 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_TOTALBUNDLES, 280 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX, 281 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY, 282 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ, 283 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_BLOCKSPERBUNDLE, 284 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_RELATEDCERTIFICATIONREQUESTID, 285 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MORTAR_WATERORCEMENTRATIO, 286 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MORTAR_TYPEOFMORTAR, 287 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_NOMTHICKNESS, 288 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_NOMDENSITY, 289 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_NOMDIAMETER, 290 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_FACINGTYPE, 291 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_FACINGDESCRIPTION, 292 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_TESTTEMPORHUMIDITY, 293 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY, 294 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_AGEOFSAMPLEDAYS, 295 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_LUBEOIL_VISCOSITYGRADE, 296 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGMB, 297 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGSB, 298 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGSE, 299 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGB, 300 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_ASPHALT_LAYINGDATE, 301 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFMARSHALLREQNO, 302 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFBITUMENREQNO, 303 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFMIX, 304 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_CALIBRATIONFACTOR, 305 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_GRADINGORBITUMENSPECS, 306 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_OTHERSPECS, 307 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CEMENT_CLASSOFCEMENT, 308 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_GRADEOFCONCRETE, 309 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_CEMENTCONTENT, 310 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_TESTINGAGEOFSAMPLE, 311 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CONCRETE_ESTIMATEDTESTDATE, 312 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_TRUCKNUMBER, 313 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_PLACEOFMAKINGCUBES, 314 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_EQUIPMENTTYPEUSED, 315 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_CURINGORSTORAGECONDITIONS, 316 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_METHODOFCOMPACTION, 317 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_CONDITIONOFSAMPLE, 318 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_CEMENT, 319 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_CEMENTTYPE, 320 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_ADMIXTURE, 321 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_ADMIXTURETYPE, 322 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE, 323 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_AGGREGATE_20MM, 324 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_AGGREGATE_10MM, 325 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_AGGREGATE_1MM, 326 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_CONCRETE_CLASS_GRADE, 327 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_MDD, 328 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_OMC, 329 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_MDD_OMC_REF, 330 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_BFRL, 331 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_LAYER_THICKNESSMM, 332 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_SOURCE_MINERAL_AGG, 333 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_MANUFACTURER_CERT_NO, 334 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_GRADE_STEEL, 335 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_LOCAL_SUPPLIER, 336 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_HEAT_NUMBER, 337 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_TEST_SERV, 338 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_METHOD, 339 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_DESC, 340 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BATCH_SIZE, 341 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_UNITNO, 342 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_UNITSIZE, 343 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_NO_INCREMENT, 344 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_MORE_SAMPLE_NOTE, 345 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_STAGES, 346 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_RETURN_NOTE, 347 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_DISCARD, 348 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DISCARD_DATE, 349 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_DISCARD_BY, 350 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TRAVEL_CALCULATED, 351 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PHYSICAL_OBSERVATION, 352 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SENDER_NO, 353 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REF_SENDER_NO, 354 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TESTLAB, 355 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PRIMARY_RESULT, 356 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PRIMARY_REPORT_NO, 357 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REF_RESULT, 358 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REF_REPORT_NO, 359 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_DETERMINATION, 360 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EQUIPMENT_TYPE, 361 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EQUIPMENT_CLASS, 362 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CAPACITY, 363 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_NO_OF_MEASUREMENTS, 364 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_REQ_DATE_CALIB, 365 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_CALIB_SITE, 366 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CALIB_METHOD, 367 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ASSET_NAME, 368 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_MODEL_NO, 369 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_PURCHASE_DATE, 370 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_PURCHASE_PRICE, 371 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DELIVERY_RECD, 372 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DATE_OF_INSTALL, 373 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(C_TAG_NO, 374 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SERIAL_NO, 375 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_NO_OF_ACCESSORIES, 376 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_ACCESSORY_DETAIL, 377 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ADDR_ROOM_NO, 378 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_WARRANTY_EXP_DATE, 379 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_UNDER_CONTRACT, 380 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CONTRACT_NO, 381 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CONTRACT_COMP, 382 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CONTRACT_START, 383 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CONTRACT_END, 384 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_CALIB_TYPE, 385 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_AGE_GROUP_LABEL, 386 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_AGE_GROUP_TEST, 387 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TOYS_DIMENSION, 388 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TOYS_FEATURES, 389 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TOYS_LABEL_DETAILS, 390 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TEXTILE_CLASS, 391 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TEXTILE_TYPE, 392 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_MONTAJI_REGISTERED, 393 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_MONTAJI_REF, 394 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SEALING_PACK, 395 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TYPE, 396 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FORM, 397 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FORM_TYPE, 398 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FINENESS, 399 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SHAPE, 400 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_LABORATORY, 401 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CEMARK, 402 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_AGE, 403 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_GENDER, 404 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_OWNER_NAME, 405 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONSIGNMENT_NO, 406 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_ORIGIN, 407 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MEAT_REQ_TYP, 408 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PURPOSE_TEST, 409 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_CLARITY, 410 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_DESC, 411 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_ISCOLLSAMPLE, 412 + __off, 1, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_NAME, 413 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_EMIRATEID, 414 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_DCL_USERID, 415 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FAILURE_DESC, 416 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FAILURE_COMP, 417 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_WORK_FAIL, 418 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PURCHASE_REF, 419 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PURCHASE_TYPE, 420 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PEARL_FIELD, 421 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_POBOX, 422 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_DILUENT, 423 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ACTIVE_SUBSTANCE, 424 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EDIT_ASSET, 425 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_PH, 426 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_NATUREOFACTIVITY, 427 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_CHLORINELEVEL, 428 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_RISK_ASSESSMENT, 429 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SPECIMEN, 430 + __off, 4, __dbStmt);
    return 430;
  }
  public void write0(PreparedStatement __dbStmt, int __off) throws SQLException {
    JdbcWritableBridge.writeInteger(SAMPLE_NUMBER, 1 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(TEXT_ID, 2 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STATUS, 3 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OLD_STATUS, 4 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(DISP_FLDS, 5 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LABEL_MASK, 6 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(IN_SPEC, 7 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(IN_CAL, 8 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(CHANGED_ON, 9 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(RE_SAMPLE, 10 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ALIQUOT, 11 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(ORIGINAL_SAMPLE, 12 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(PARENT_SAMPLE, 13 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(PARENT_ALIQUOT, 14 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(ALIQUOT_GROUP, 15 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeFloat(SAMPLE_VOLUME, 16 + __off, 7, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLE_UNITS, 17 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(LOGIN_DATE, 18 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(LOGIN_BY, 19 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(SAMPLED_DATE, 20 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(RECD_DATE, 21 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(RECEIVED_BY, 22 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DATE_STARTED, 23 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(STARTED, 24 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ASSIGNED_OPERATOR, 25 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DUE_DATE, 26 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DATE_COMPLETED, 27 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(DATE_REVIEWED, 28 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(PREP, 29 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(PREP_DATE, 30 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(PREP_BY, 31 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(REVIEWER, 32 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(REVIEW_NOTE, 33 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PRODUCT_CODE, 34 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PRODUCT, 35 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(PRODUCT_VERSION, 36 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(PRODUCT_GRADE, 37 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLING_POINT, 38 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLE_TYPE, 39 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PROJECT, 40 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(BATCH_NAME, 41 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(BATCH_TEMPLATE, 42 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STEP, 43 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLE_NAME, 44 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(DESCRIPTION, 45 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(PRIORITY, 46 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(LOCATION, 47 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CUSTOMER, 48 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(TEST_LIST, 49 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(TEMPLATE, 50 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(RECIPIENT, 51 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STANDARD, 52 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(EXT_LINK, 53 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CONDITION, 54 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(TIMEPOINT, 55 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(LOT, 56 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeTimestamp(BASE_DATE, 57 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(AVAILABLE_DATE, 58 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(REQUIRED_DATE, 59 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(TARGET_DATE, 60 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(PARTIAL_SPEC, 61 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SPEC_TYPE, 62 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STAGE, 63 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PRIMARY_IN_SPEC, 64 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(BATCH, 65 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CHARGE_CODE, 66 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(FORMULATION, 67 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PROTOCOL_LEVEL, 68 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(RELEASED, 69 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(RELEASED_BY, 70 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(RELEASED_ON, 71 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(IN_CONTROL, 72 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INVESTIGATION, 73 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INVESTIGATED, 74 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(APPROVED, 75 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(APPROVAL_GROUP, 76 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(READY_FOR_APPROVAL, 77 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(APPROVAL_ID, 78 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(APPROVAL_ROUTING, 79 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(MODIFIED_RESULTS, 80 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(REPORT_NUMBER, 81 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(COMPOSITE, 82 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(PARENT_COMPOSITE, 83 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(COMPOSITE_TEMPLATE, 84 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(SEASON_DATE, 85 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(PEOPLE, 86 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(TEST_LOCATION, 87 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OWNER_LOCATION, 88 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CHK_ALIQUOT_STATUS, 89 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CHK_ALIQUOT_SPECS, 90 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ALIQUOT_TEMPLATE, 91 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CALC_GROUP, 92 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(SAMPLE_EVENT, 93 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(LABEL_ID, 94 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(HAS_FLAGS, 95 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(VARIATION, 96 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLED_BY, 97 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAMPLED, 98 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ORDER_NUM, 99 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LAST_ORDER_NUM, 100 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STORAGE_CONDITION, 101 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CONTAINER_TYPE, 102 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(NUM_CONTAINERS, 103 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(IMPORTANT_MESSAGE, 104 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OBSERVATIONS, 105 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LAB, 106 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(EXPIRATION_DATE, 107 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeFloat(REQD_VOLUME, 108 + __off, 7, __dbStmt);
    JdbcWritableBridge.writeString(COLLECTION_METHOD, 109 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(COLLECTION_OFFSET, 110 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(SIGNED, 111 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CASE_NAME, 112 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(CONTRACT_NUMBER, 113 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(BILLING_ITEM_DESC, 114 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INTERPRETED, 115 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INTERP_TYPE, 116 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(INSPECT_PNT_NUM, 117 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(INSPECTION_LOT_NUM, 118 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(IS_INSPECT_PNT, 119 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PLANT, 120 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERC1_VALUE, 121 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERC2_VALUE, 122 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERD1_VALUE, 123 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERN1_VALUE, 124 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERN2_VALUE, 125 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(USERT1_VALUE, 126 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SELECTED_SET, 127 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_CODE_GROUP, 128 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SAMPLE_NUMBER, 129 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SS_PLANT, 130 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SAP_SAMPLE_COUNT, 131 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OPERATION_NUMBER, 132 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(STORAGE_LOC_NO, 133 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(EXTERNAL_LOCATION, 134 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(FORMULATION_NAME, 135 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STANDARD_REAGENT, 136 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(CONVERSION_GROUPS, 137 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(REPORTED_RSLT_OOS, 138 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(GROUP_NAME, 139 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PROCESS_UNIT, 140 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(HAZARD, 141 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(INSTRUMENT, 142 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SITE, 143 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PLANT, 144 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_CERTIFICATE, 145 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_CONTAINER, 146 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_OVERDUE, 147 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PO_NUMBER, 148 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_PRODUCTION_DATE, 149 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_REPORT_DATE, 150 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(T_REQUESTED_BY, 151 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(T_LONG_NOTE, 152 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_SHIFT_CODE, 153 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SUPP_BATCH_NO, 154 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SUPPLIER, 155 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_TRUCK_VESSEL, 156 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PLANT_RECV_BY, 157 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_PLANT_RECV_DATE, 158 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_PRIORITY, 159 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(STORAGE_TEMPLATE, 160 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ALLOW_CHLD_ALQTS, 161 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(PHASE, 162 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(SCHEDULE_NUMBER, 163 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(T_ACTION_NUMBER, 164 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME1, 165 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME2, 166 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME3, 167 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME4, 168 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME5, 169 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_BATCH_NAME6, 170 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_COLLECT_SCHEME, 171 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_COMPOSITE_GROUP, 172 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_DISTRIBUTION_BY, 173 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_DISTRIBUTION_DATE, 174 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(T_EM_PLAN, 175 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_INCUB1_BATCH, 176 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB1_END, 177 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB1_START, 178 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(T_INCUB2_BATCH, 179 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB2_END, 180 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(T_INCUB2_START, 181 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(T_MEDIA_REFERENCE, 182 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(T_ORIGINAL_SAMPLE, 183 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(T_PERSONNEL, 184 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_PERSONNEL_SET, 185 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SAMPLE_TYPE, 186 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SCHEDULE_GROUP, 187 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_SUITE, 188 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_TRANSIT_LOCATION, 189 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(T_VALIDATION, 190 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REFERENCE_ID, 191 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_REASON, 192 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CUSTOMER_TYPE, 193 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQUEST_TYPE, 194 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_OTHER_SAMPLE_SOURCE, 195 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CUST_ID, 196 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CLIENT_TYPE, 197 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SAMP_TYPE, 198 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_SOURCE, 199 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_DM_BARCODE, 200 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_EXT_REFERENCE, 201 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_EXPRESS_SERVICE, 202 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_HARDCOPY_REQUIRED, 203 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_REMARKS, 204 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_REQ_COPIES, 205 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_EDIT, 206 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_TOTAL_SERVICE_FEE, 207 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_GROUP, 208 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_CATEGORY, 209 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_PRODUCTION_DATE, 210 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(C_NO_OF_UNIT, 211 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_CONDITION, 212 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeFloat(C_TEMP_REC, 213 + __off, 7, __dbStmt);
    JdbcWritableBridge.writeString(C_POINT_OF_SAMPLING, 214 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SAMP_COLLECTION, 215 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SAMP_BAL_RETURN, 216 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_HAZARD, 217 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BATCH_NO, 218 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQUEST_NO, 219 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BILLING_TYPE, 220 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_TOTAL_TEST_CHARGE, 221 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_VOUCHER, 222 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ERAD_NO, 223 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_RECEIPT, 224 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_PAYMENT_DT, 225 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_PAYMENT_SRC, 226 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PAYMENT_STATUS, 227 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CUST_DELIVERY_DATE, 228 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_OPINION, 229 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SUBCAT_ID, 230 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_PRODCAT_ID, 231 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_PROD_GROUP_ID, 232 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_MSG_ID, 233 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MSG_DIGEST, 234 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_REQ_SOURCE, 235 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_ITEM_ID, 236 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_SRC_REQ_ID, 237 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_EXPECTED_DATE, 238 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_DESC, 239 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DATE_ONHOLD, 240 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DATE_OFFHOLD, 241 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_ONHOLD_REASON, 242 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LATITUDE, 243 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(LONGITUDE, 244 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ON_SITE_PRESERVATION, 245 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PRESERVATION_METHOD, 246 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_PROCEDURE, 247 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_APPARATUS, 248 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_APPEARANCE, 249 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLOUR, 250 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ODOUR, 251 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_COLLECTION_LOC, 252 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REPORT_ID, 253 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_DELIVERED_BY, 254 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MAKANI_NO, 255 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_COUNTRY, 256 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BUILDING_FLOOR, 257 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_LOCATION_DESC, 258 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ITEM_BARCODE, 259 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ITEM_BRAND, 260 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MANUFACTURER, 261 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_COUNTRY_ORIGIN, 262 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ITEM_TRADE_NAME, 263 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PROCESS_ONE, 264 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PROCESS_TWO, 265 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SHELF_LIFE, 266 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SHELF_LIFE_UNIT, 267 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STORAGE_CONDITION, 268 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_WEIGHT, 269 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_WEIGHT_UNIT, 270 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PACKAGING_TYPE, 271 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_TEST_TYPE, 272 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EXTERNAL_REFERENCE, 273 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_NOMINAL_SIZE, 274 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_LAYER_MIX_TYPE, 275 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_UNIT, 276 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SAMP_QNTY, 277 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLED_BY, 278 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BITUMEN_LOCALSUPPLIER, 279 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_TOTALBUNDLES, 280 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX, 281 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY, 282 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ, 283 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_BLOCKSPERBUNDLE, 284 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BLOCK_RELATEDCERTIFICATIONREQUESTID, 285 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MORTAR_WATERORCEMENTRATIO, 286 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MORTAR_TYPEOFMORTAR, 287 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_NOMTHICKNESS, 288 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_NOMDENSITY, 289 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_NOMDIAMETER, 290 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_FACINGTYPE, 291 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_FACINGDESCRIPTION, 292 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_TESTTEMPORHUMIDITY, 293 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY, 294 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_THERMALINSULATION_AGEOFSAMPLEDAYS, 295 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_LUBEOIL_VISCOSITYGRADE, 296 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGMB, 297 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGSB, 298 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGSE, 299 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFGB, 300 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_ASPHALT_LAYINGDATE, 301 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFMARSHALLREQNO, 302 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFBITUMENREQNO, 303 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_REFMIX, 304 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_CALIBRATIONFACTOR, 305 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_GRADINGORBITUMENSPECS, 306 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_ASPHALT_OTHERSPECS, 307 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CEMENT_CLASSOFCEMENT, 308 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_GRADEOFCONCRETE, 309 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_CEMENTCONTENT, 310 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_TESTINGAGEOFSAMPLE, 311 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CONCRETE_ESTIMATEDTESTDATE, 312 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_TRUCKNUMBER, 313 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_PLACEOFMAKINGCUBES, 314 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_EQUIPMENTTYPEUSED, 315 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_CURINGORSTORAGECONDITIONS, 316 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_METHODOFCOMPACTION, 317 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONCRETE_CONDITIONOFSAMPLE, 318 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_CEMENT, 319 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_CEMENTTYPE, 320 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_ADMIXTURE, 321 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_ADMIXTURETYPE, 322 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE, 323 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_AGGREGATE_20MM, 324 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_AGGREGATE_10MM, 325 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_AGGREGATE_1MM, 326 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FRESHCONCRETE_CONCRETE_CLASS_GRADE, 327 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_MDD, 328 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_OMC, 329 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_MDD_OMC_REF, 330 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_BFRL, 331 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_LAYER_THICKNESSMM, 332 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SOIL_SOURCE_MINERAL_AGG, 333 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_MANUFACTURER_CERT_NO, 334 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_GRADE_STEEL, 335 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_LOCAL_SUPPLIER, 336 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_STEEL_HEAT_NUMBER, 337 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_TEST_SERV, 338 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLING_METHOD, 339 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_DESC, 340 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_BATCH_SIZE, 341 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_UNITNO, 342 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_UNITSIZE, 343 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_NO_INCREMENT, 344 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_MORE_SAMPLE_NOTE, 345 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_STAGES, 346 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_RETURN_NOTE, 347 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_DISCARD, 348 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DISCARD_DATE, 349 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_DISCARD_BY, 350 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TRAVEL_CALCULATED, 351 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PHYSICAL_OBSERVATION, 352 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SENDER_NO, 353 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REF_SENDER_NO, 354 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TESTLAB, 355 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PRIMARY_RESULT, 356 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PRIMARY_REPORT_NO, 357 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REF_RESULT, 358 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_REF_REPORT_NO, 359 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_DETERMINATION, 360 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EQUIPMENT_TYPE, 361 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EQUIPMENT_CLASS, 362 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CAPACITY, 363 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_NO_OF_MEASUREMENTS, 364 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_REQ_DATE_CALIB, 365 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_CALIB_SITE, 366 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CALIB_METHOD, 367 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ASSET_NAME, 368 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_MODEL_NO, 369 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_PURCHASE_DATE, 370 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_PURCHASE_PRICE, 371 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DELIVERY_RECD, 372 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_DATE_OF_INSTALL, 373 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeInteger(C_TAG_NO, 374 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SERIAL_NO, 375 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(C_NO_OF_ACCESSORIES, 376 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_ACCESSORY_DETAIL, 377 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ADDR_ROOM_NO, 378 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_WARRANTY_EXP_DATE, 379 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_UNDER_CONTRACT, 380 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CONTRACT_NO, 381 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CONTRACT_COMP, 382 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CONTRACT_START, 383 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(C_CONTRACT_END, 384 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(C_CALIB_TYPE, 385 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_AGE_GROUP_LABEL, 386 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_AGE_GROUP_TEST, 387 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TOYS_DIMENSION, 388 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TOYS_FEATURES, 389 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TOYS_LABEL_DETAILS, 390 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TEXTILE_CLASS, 391 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TEXTILE_TYPE, 392 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_MONTAJI_REGISTERED, 393 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_MONTAJI_REF, 394 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SEALING_PACK, 395 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_TYPE, 396 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FORM, 397 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FORM_TYPE, 398 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FINENESS, 399 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_SHAPE, 400 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_LABORATORY, 401 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_CEMARK, 402 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeInteger(C_AGE, 403 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(C_GENDER, 404 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_OWNER_NAME, 405 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_CONSIGNMENT_NO, 406 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_SAMPLE_ORIGIN, 407 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_MEAT_REQ_TYP, 408 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_PURPOSE_TEST, 409 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_CLARITY, 410 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_DESC, 411 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_ISCOLLSAMPLE, 412 + __off, 1, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_NAME, 413 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_COLL_EMIRATEID, 414 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_DCL_USERID, 415 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeString(C_FAILURE_DESC, 416 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_FAILURE_COMP, 417 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_WORK_FAIL, 418 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PURCHASE_REF, 419 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PURCHASE_TYPE, 420 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PEARL_FIELD, 421 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_POBOX, 422 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_PRODUCT_DILUENT, 423 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_ACTIVE_SUBSTANCE, 424 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(C_EDIT_ASSET, 425 + __off, -9, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_PH, 426 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_NATUREOFACTIVITY, 427 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeBigDecimal(C_CHLORINELEVEL, 428 + __off, 2, __dbStmt);
    JdbcWritableBridge.writeString(C_RISK_ASSESSMENT, 429 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(C_SPECIMEN, 430 + __off, 4, __dbStmt);
  }
  public void readFields(DataInput __dataIn) throws IOException {
this.readFields0(__dataIn);  }
  public void readFields0(DataInput __dataIn) throws IOException {
    if (__dataIn.readBoolean()) { 
        this.SAMPLE_NUMBER = null;
    } else {
    this.SAMPLE_NUMBER = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.TEXT_ID = null;
    } else {
    this.TEXT_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STATUS = null;
    } else {
    this.STATUS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.OLD_STATUS = null;
    } else {
    this.OLD_STATUS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.DISP_FLDS = null;
    } else {
    this.DISP_FLDS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LABEL_MASK = null;
    } else {
    this.LABEL_MASK = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.IN_SPEC = null;
    } else {
    this.IN_SPEC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.IN_CAL = null;
    } else {
    this.IN_CAL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CHANGED_ON = null;
    } else {
    this.CHANGED_ON = new Timestamp(__dataIn.readLong());
    this.CHANGED_ON.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.RE_SAMPLE = null;
    } else {
    this.RE_SAMPLE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ALIQUOT = null;
    } else {
    this.ALIQUOT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ORIGINAL_SAMPLE = null;
    } else {
    this.ORIGINAL_SAMPLE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PARENT_SAMPLE = null;
    } else {
    this.PARENT_SAMPLE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PARENT_ALIQUOT = null;
    } else {
    this.PARENT_ALIQUOT = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.ALIQUOT_GROUP = null;
    } else {
    this.ALIQUOT_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLE_VOLUME = null;
    } else {
    this.SAMPLE_VOLUME = Float.valueOf(__dataIn.readFloat());
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLE_UNITS = null;
    } else {
    this.SAMPLE_UNITS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LOGIN_DATE = null;
    } else {
    this.LOGIN_DATE = new Timestamp(__dataIn.readLong());
    this.LOGIN_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.LOGIN_BY = null;
    } else {
    this.LOGIN_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLED_DATE = null;
    } else {
    this.SAMPLED_DATE = new Timestamp(__dataIn.readLong());
    this.SAMPLED_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.RECD_DATE = null;
    } else {
    this.RECD_DATE = new Timestamp(__dataIn.readLong());
    this.RECD_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.RECEIVED_BY = null;
    } else {
    this.RECEIVED_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.DATE_STARTED = null;
    } else {
    this.DATE_STARTED = new Timestamp(__dataIn.readLong());
    this.DATE_STARTED.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.STARTED = null;
    } else {
    this.STARTED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ASSIGNED_OPERATOR = null;
    } else {
    this.ASSIGNED_OPERATOR = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.DUE_DATE = null;
    } else {
    this.DUE_DATE = new Timestamp(__dataIn.readLong());
    this.DUE_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.DATE_COMPLETED = null;
    } else {
    this.DATE_COMPLETED = new Timestamp(__dataIn.readLong());
    this.DATE_COMPLETED.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.DATE_REVIEWED = null;
    } else {
    this.DATE_REVIEWED = new Timestamp(__dataIn.readLong());
    this.DATE_REVIEWED.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PREP = null;
    } else {
    this.PREP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PREP_DATE = null;
    } else {
    this.PREP_DATE = new Timestamp(__dataIn.readLong());
    this.PREP_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PREP_BY = null;
    } else {
    this.PREP_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.REVIEWER = null;
    } else {
    this.REVIEWER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.REVIEW_NOTE = null;
    } else {
    this.REVIEW_NOTE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PRODUCT_CODE = null;
    } else {
    this.PRODUCT_CODE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PRODUCT = null;
    } else {
    this.PRODUCT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PRODUCT_VERSION = null;
    } else {
    this.PRODUCT_VERSION = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PRODUCT_GRADE = null;
    } else {
    this.PRODUCT_GRADE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLING_POINT = null;
    } else {
    this.SAMPLING_POINT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLE_TYPE = null;
    } else {
    this.SAMPLE_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PROJECT = null;
    } else {
    this.PROJECT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.BATCH_NAME = null;
    } else {
    this.BATCH_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.BATCH_TEMPLATE = null;
    } else {
    this.BATCH_TEMPLATE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STEP = null;
    } else {
    this.STEP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLE_NAME = null;
    } else {
    this.SAMPLE_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.DESCRIPTION = null;
    } else {
    this.DESCRIPTION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PRIORITY = null;
    } else {
    this.PRIORITY = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.LOCATION = null;
    } else {
    this.LOCATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CUSTOMER = null;
    } else {
    this.CUSTOMER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.TEST_LIST = null;
    } else {
    this.TEST_LIST = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.TEMPLATE = null;
    } else {
    this.TEMPLATE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.RECIPIENT = null;
    } else {
    this.RECIPIENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STANDARD = null;
    } else {
    this.STANDARD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.EXT_LINK = null;
    } else {
    this.EXT_LINK = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CONDITION = null;
    } else {
    this.CONDITION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.TIMEPOINT = null;
    } else {
    this.TIMEPOINT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LOT = null;
    } else {
    this.LOT = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.BASE_DATE = null;
    } else {
    this.BASE_DATE = new Timestamp(__dataIn.readLong());
    this.BASE_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.AVAILABLE_DATE = null;
    } else {
    this.AVAILABLE_DATE = new Timestamp(__dataIn.readLong());
    this.AVAILABLE_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.REQUIRED_DATE = null;
    } else {
    this.REQUIRED_DATE = new Timestamp(__dataIn.readLong());
    this.REQUIRED_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.TARGET_DATE = null;
    } else {
    this.TARGET_DATE = new Timestamp(__dataIn.readLong());
    this.TARGET_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PARTIAL_SPEC = null;
    } else {
    this.PARTIAL_SPEC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SPEC_TYPE = null;
    } else {
    this.SPEC_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STAGE = null;
    } else {
    this.STAGE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PRIMARY_IN_SPEC = null;
    } else {
    this.PRIMARY_IN_SPEC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.BATCH = null;
    } else {
    this.BATCH = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CHARGE_CODE = null;
    } else {
    this.CHARGE_CODE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.FORMULATION = null;
    } else {
    this.FORMULATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PROTOCOL_LEVEL = null;
    } else {
    this.PROTOCOL_LEVEL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.RELEASED = null;
    } else {
    this.RELEASED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.RELEASED_BY = null;
    } else {
    this.RELEASED_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.RELEASED_ON = null;
    } else {
    this.RELEASED_ON = new Timestamp(__dataIn.readLong());
    this.RELEASED_ON.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.IN_CONTROL = null;
    } else {
    this.IN_CONTROL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.INVESTIGATION = null;
    } else {
    this.INVESTIGATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.INVESTIGATED = null;
    } else {
    this.INVESTIGATED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.APPROVED = null;
    } else {
    this.APPROVED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.APPROVAL_GROUP = null;
    } else {
    this.APPROVAL_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.READY_FOR_APPROVAL = null;
    } else {
    this.READY_FOR_APPROVAL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.APPROVAL_ID = null;
    } else {
    this.APPROVAL_ID = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.APPROVAL_ROUTING = null;
    } else {
    this.APPROVAL_ROUTING = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.MODIFIED_RESULTS = null;
    } else {
    this.MODIFIED_RESULTS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.REPORT_NUMBER = null;
    } else {
    this.REPORT_NUMBER = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.COMPOSITE = null;
    } else {
    this.COMPOSITE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PARENT_COMPOSITE = null;
    } else {
    this.PARENT_COMPOSITE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.COMPOSITE_TEMPLATE = null;
    } else {
    this.COMPOSITE_TEMPLATE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SEASON_DATE = null;
    } else {
    this.SEASON_DATE = new Timestamp(__dataIn.readLong());
    this.SEASON_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.PEOPLE = null;
    } else {
    this.PEOPLE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.TEST_LOCATION = null;
    } else {
    this.TEST_LOCATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.OWNER_LOCATION = null;
    } else {
    this.OWNER_LOCATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CHK_ALIQUOT_STATUS = null;
    } else {
    this.CHK_ALIQUOT_STATUS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CHK_ALIQUOT_SPECS = null;
    } else {
    this.CHK_ALIQUOT_SPECS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ALIQUOT_TEMPLATE = null;
    } else {
    this.ALIQUOT_TEMPLATE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CALC_GROUP = null;
    } else {
    this.CALC_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLE_EVENT = null;
    } else {
    this.SAMPLE_EVENT = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.LABEL_ID = null;
    } else {
    this.LABEL_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.HAS_FLAGS = null;
    } else {
    this.HAS_FLAGS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.VARIATION = null;
    } else {
    this.VARIATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLED_BY = null;
    } else {
    this.SAMPLED_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAMPLED = null;
    } else {
    this.SAMPLED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ORDER_NUM = null;
    } else {
    this.ORDER_NUM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LAST_ORDER_NUM = null;
    } else {
    this.LAST_ORDER_NUM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STORAGE_CONDITION = null;
    } else {
    this.STORAGE_CONDITION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CONTAINER_TYPE = null;
    } else {
    this.CONTAINER_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.NUM_CONTAINERS = null;
    } else {
    this.NUM_CONTAINERS = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.IMPORTANT_MESSAGE = null;
    } else {
    this.IMPORTANT_MESSAGE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.OBSERVATIONS = null;
    } else {
    this.OBSERVATIONS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LAB = null;
    } else {
    this.LAB = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.EXPIRATION_DATE = null;
    } else {
    this.EXPIRATION_DATE = new Timestamp(__dataIn.readLong());
    this.EXPIRATION_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.REQD_VOLUME = null;
    } else {
    this.REQD_VOLUME = Float.valueOf(__dataIn.readFloat());
    }
    if (__dataIn.readBoolean()) { 
        this.COLLECTION_METHOD = null;
    } else {
    this.COLLECTION_METHOD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.COLLECTION_OFFSET = null;
    } else {
    this.COLLECTION_OFFSET = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.SIGNED = null;
    } else {
    this.SIGNED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CASE_NAME = null;
    } else {
    this.CASE_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CONTRACT_NUMBER = null;
    } else {
    this.CONTRACT_NUMBER = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.BILLING_ITEM_DESC = null;
    } else {
    this.BILLING_ITEM_DESC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.INTERPRETED = null;
    } else {
    this.INTERPRETED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.INTERP_TYPE = null;
    } else {
    this.INTERP_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.INSPECT_PNT_NUM = null;
    } else {
    this.INSPECT_PNT_NUM = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.INSPECTION_LOT_NUM = null;
    } else {
    this.INSPECTION_LOT_NUM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.IS_INSPECT_PNT = null;
    } else {
    this.IS_INSPECT_PNT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PLANT = null;
    } else {
    this.PLANT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.USERC1_VALUE = null;
    } else {
    this.USERC1_VALUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.USERC2_VALUE = null;
    } else {
    this.USERC2_VALUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.USERD1_VALUE = null;
    } else {
    this.USERD1_VALUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.USERN1_VALUE = null;
    } else {
    this.USERN1_VALUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.USERN2_VALUE = null;
    } else {
    this.USERN2_VALUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.USERT1_VALUE = null;
    } else {
    this.USERT1_VALUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAP_SELECTED_SET = null;
    } else {
    this.SAP_SELECTED_SET = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAP_CODE_GROUP = null;
    } else {
    this.SAP_CODE_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAP_SAMPLE_NUMBER = null;
    } else {
    this.SAP_SAMPLE_NUMBER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAP_SS_PLANT = null;
    } else {
    this.SAP_SS_PLANT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SAP_SAMPLE_COUNT = null;
    } else {
    this.SAP_SAMPLE_COUNT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.OPERATION_NUMBER = null;
    } else {
    this.OPERATION_NUMBER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STORAGE_LOC_NO = null;
    } else {
    this.STORAGE_LOC_NO = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.EXTERNAL_LOCATION = null;
    } else {
    this.EXTERNAL_LOCATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.FORMULATION_NAME = null;
    } else {
    this.FORMULATION_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STANDARD_REAGENT = null;
    } else {
    this.STANDARD_REAGENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.CONVERSION_GROUPS = null;
    } else {
    this.CONVERSION_GROUPS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.REPORTED_RSLT_OOS = null;
    } else {
    this.REPORTED_RSLT_OOS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.GROUP_NAME = null;
    } else {
    this.GROUP_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PROCESS_UNIT = null;
    } else {
    this.PROCESS_UNIT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.HAZARD = null;
    } else {
    this.HAZARD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.INSTRUMENT = null;
    } else {
    this.INSTRUMENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_SITE = null;
    } else {
    this.T_SITE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_PLANT = null;
    } else {
    this.T_PLANT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_CERTIFICATE = null;
    } else {
    this.T_CERTIFICATE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_CONTAINER = null;
    } else {
    this.T_CONTAINER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_OVERDUE = null;
    } else {
    this.T_OVERDUE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_PO_NUMBER = null;
    } else {
    this.T_PO_NUMBER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_PRODUCTION_DATE = null;
    } else {
    this.T_PRODUCTION_DATE = new Timestamp(__dataIn.readLong());
    this.T_PRODUCTION_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_REPORT_DATE = null;
    } else {
    this.T_REPORT_DATE = new Timestamp(__dataIn.readLong());
    this.T_REPORT_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_REQUESTED_BY = null;
    } else {
    this.T_REQUESTED_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_LONG_NOTE = null;
    } else {
    this.T_LONG_NOTE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_SHIFT_CODE = null;
    } else {
    this.T_SHIFT_CODE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_SUPP_BATCH_NO = null;
    } else {
    this.T_SUPP_BATCH_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_SUPPLIER = null;
    } else {
    this.T_SUPPLIER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_TRUCK_VESSEL = null;
    } else {
    this.T_TRUCK_VESSEL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_PLANT_RECV_BY = null;
    } else {
    this.T_PLANT_RECV_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_PLANT_RECV_DATE = null;
    } else {
    this.T_PLANT_RECV_DATE = new Timestamp(__dataIn.readLong());
    this.T_PLANT_RECV_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRIORITY = null;
    } else {
    this.C_PRIORITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.STORAGE_TEMPLATE = null;
    } else {
    this.STORAGE_TEMPLATE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ALLOW_CHLD_ALQTS = null;
    } else {
    this.ALLOW_CHLD_ALQTS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.PHASE = null;
    } else {
    this.PHASE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SCHEDULE_NUMBER = null;
    } else {
    this.SCHEDULE_NUMBER = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_ACTION_NUMBER = null;
    } else {
    this.T_ACTION_NUMBER = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_BATCH_NAME1 = null;
    } else {
    this.T_BATCH_NAME1 = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_BATCH_NAME2 = null;
    } else {
    this.T_BATCH_NAME2 = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_BATCH_NAME3 = null;
    } else {
    this.T_BATCH_NAME3 = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_BATCH_NAME4 = null;
    } else {
    this.T_BATCH_NAME4 = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_BATCH_NAME5 = null;
    } else {
    this.T_BATCH_NAME5 = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_BATCH_NAME6 = null;
    } else {
    this.T_BATCH_NAME6 = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_COLLECT_SCHEME = null;
    } else {
    this.T_COLLECT_SCHEME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_COMPOSITE_GROUP = null;
    } else {
    this.T_COMPOSITE_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_DISTRIBUTION_BY = null;
    } else {
    this.T_DISTRIBUTION_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_DISTRIBUTION_DATE = null;
    } else {
    this.T_DISTRIBUTION_DATE = new Timestamp(__dataIn.readLong());
    this.T_DISTRIBUTION_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_EM_PLAN = null;
    } else {
    this.T_EM_PLAN = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_INCUB1_BATCH = null;
    } else {
    this.T_INCUB1_BATCH = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_INCUB1_END = null;
    } else {
    this.T_INCUB1_END = new Timestamp(__dataIn.readLong());
    this.T_INCUB1_END.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_INCUB1_START = null;
    } else {
    this.T_INCUB1_START = new Timestamp(__dataIn.readLong());
    this.T_INCUB1_START.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_INCUB2_BATCH = null;
    } else {
    this.T_INCUB2_BATCH = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_INCUB2_END = null;
    } else {
    this.T_INCUB2_END = new Timestamp(__dataIn.readLong());
    this.T_INCUB2_END.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_INCUB2_START = null;
    } else {
    this.T_INCUB2_START = new Timestamp(__dataIn.readLong());
    this.T_INCUB2_START.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_MEDIA_REFERENCE = null;
    } else {
    this.T_MEDIA_REFERENCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_ORIGINAL_SAMPLE = null;
    } else {
    this.T_ORIGINAL_SAMPLE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.T_PERSONNEL = null;
    } else {
    this.T_PERSONNEL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_PERSONNEL_SET = null;
    } else {
    this.T_PERSONNEL_SET = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_SAMPLE_TYPE = null;
    } else {
    this.T_SAMPLE_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_SCHEDULE_GROUP = null;
    } else {
    this.T_SCHEDULE_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_SUITE = null;
    } else {
    this.T_SUITE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_TRANSIT_LOCATION = null;
    } else {
    this.T_TRANSIT_LOCATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.T_VALIDATION = null;
    } else {
    this.T_VALIDATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REFERENCE_ID = null;
    } else {
    this.C_REFERENCE_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLING_REASON = null;
    } else {
    this.C_SAMPLING_REASON = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CUSTOMER_TYPE = null;
    } else {
    this.C_CUSTOMER_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQUEST_TYPE = null;
    } else {
    this.C_REQUEST_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_OTHER_SAMPLE_SOURCE = null;
    } else {
    this.C_OTHER_SAMPLE_SOURCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CUST_ID = null;
    } else {
    this.C_CUST_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CLIENT_TYPE = null;
    } else {
    this.C_CLIENT_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_SAMP_TYPE = null;
    } else {
    this.C_REQ_SAMP_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLE_SOURCE = null;
    } else {
    this.C_SAMPLE_SOURCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DM_BARCODE = null;
    } else {
    this.C_DM_BARCODE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_EXT_REFERENCE = null;
    } else {
    this.C_REQ_EXT_REFERENCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_EXPRESS_SERVICE = null;
    } else {
    this.C_EXPRESS_SERVICE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_HARDCOPY_REQUIRED = null;
    } else {
    this.C_HARDCOPY_REQUIRED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_REMARKS = null;
    } else {
    this.C_REQ_REMARKS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_COPIES = null;
    } else {
    this.C_REQ_COPIES = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_EDIT = null;
    } else {
    this.C_REQ_EDIT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TOTAL_SERVICE_FEE = null;
    } else {
    this.C_TOTAL_SERVICE_FEE = org.apache.sqoop.lib.BigDecimalSerializer.readFields(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODUCT_GROUP = null;
    } else {
    this.C_PRODUCT_GROUP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODUCT_CATEGORY = null;
    } else {
    this.C_PRODUCT_CATEGORY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODUCTION_DATE = null;
    } else {
    this.C_PRODUCTION_DATE = new Timestamp(__dataIn.readLong());
    this.C_PRODUCTION_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_NO_OF_UNIT = null;
    } else {
    this.C_NO_OF_UNIT = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLE_CONDITION = null;
    } else {
    this.C_SAMPLE_CONDITION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TEMP_REC = null;
    } else {
    this.C_TEMP_REC = Float.valueOf(__dataIn.readFloat());
    }
    if (__dataIn.readBoolean()) { 
        this.C_POINT_OF_SAMPLING = null;
    } else {
    this.C_POINT_OF_SAMPLING = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_SAMP_COLLECTION = null;
    } else {
    this.C_REQ_SAMP_COLLECTION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_SAMP_BAL_RETURN = null;
    } else {
    this.C_REQ_SAMP_BAL_RETURN = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_HAZARD = null;
    } else {
    this.C_HAZARD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BATCH_NO = null;
    } else {
    this.C_BATCH_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQUEST_NO = null;
    } else {
    this.C_REQUEST_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BILLING_TYPE = null;
    } else {
    this.C_BILLING_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TOTAL_TEST_CHARGE = null;
    } else {
    this.C_TOTAL_TEST_CHARGE = org.apache.sqoop.lib.BigDecimalSerializer.readFields(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_VOUCHER = null;
    } else {
    this.C_VOUCHER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ERAD_NO = null;
    } else {
    this.C_ERAD_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_RECEIPT = null;
    } else {
    this.C_RECEIPT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PAYMENT_DT = null;
    } else {
    this.C_PAYMENT_DT = new Timestamp(__dataIn.readLong());
    this.C_PAYMENT_DT.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_PAYMENT_SRC = null;
    } else {
    this.C_PAYMENT_SRC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PAYMENT_STATUS = null;
    } else {
    this.C_PAYMENT_STATUS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CUST_DELIVERY_DATE = null;
    } else {
    this.C_CUST_DELIVERY_DATE = new Timestamp(__dataIn.readLong());
    this.C_CUST_DELIVERY_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLE_OPINION = null;
    } else {
    this.C_SAMPLE_OPINION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SUBCAT_ID = null;
    } else {
    this.C_SUBCAT_ID = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODCAT_ID = null;
    } else {
    this.C_PRODCAT_ID = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_PROD_GROUP_ID = null;
    } else {
    this.C_PROD_GROUP_ID = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_MSG_ID = null;
    } else {
    this.C_MSG_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MSG_DIGEST = null;
    } else {
    this.C_MSG_DIGEST = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_SOURCE = null;
    } else {
    this.C_REQ_SOURCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ITEM_ID = null;
    } else {
    this.C_ITEM_ID = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_SRC_REQ_ID = null;
    } else {
    this.C_SRC_REQ_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_EXPECTED_DATE = null;
    } else {
    this.C_EXPECTED_DATE = new Timestamp(__dataIn.readLong());
    this.C_EXPECTED_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODUCT_DESC = null;
    } else {
    this.C_PRODUCT_DESC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DATE_ONHOLD = null;
    } else {
    this.C_DATE_ONHOLD = new Timestamp(__dataIn.readLong());
    this.C_DATE_ONHOLD.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_DATE_OFFHOLD = null;
    } else {
    this.C_DATE_OFFHOLD = new Timestamp(__dataIn.readLong());
    this.C_DATE_OFFHOLD.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_ONHOLD_REASON = null;
    } else {
    this.C_ONHOLD_REASON = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LATITUDE = null;
    } else {
    this.LATITUDE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.LONGITUDE = null;
    } else {
    this.LONGITUDE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ON_SITE_PRESERVATION = null;
    } else {
    this.C_ON_SITE_PRESERVATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRESERVATION_METHOD = null;
    } else {
    this.C_PRESERVATION_METHOD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLING_PROCEDURE = null;
    } else {
    this.C_SAMPLING_PROCEDURE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLING_APPARATUS = null;
    } else {
    this.C_SAMPLING_APPARATUS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_APPEARANCE = null;
    } else {
    this.C_APPEARANCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COLOUR = null;
    } else {
    this.C_COLOUR = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ODOUR = null;
    } else {
    this.C_ODOUR = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLING_COLLECTION_LOC = null;
    } else {
    this.C_SAMPLING_COLLECTION_LOC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REPORT_ID = null;
    } else {
    this.C_REPORT_ID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DELIVERED_BY = null;
    } else {
    this.C_DELIVERED_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MAKANI_NO = null;
    } else {
    this.C_MAKANI_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COUNTRY = null;
    } else {
    this.C_COUNTRY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BUILDING_FLOOR = null;
    } else {
    this.C_BUILDING_FLOOR = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_LOCATION_DESC = null;
    } else {
    this.C_LOCATION_DESC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ITEM_BARCODE = null;
    } else {
    this.C_ITEM_BARCODE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ITEM_BRAND = null;
    } else {
    this.C_ITEM_BRAND = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MANUFACTURER = null;
    } else {
    this.C_MANUFACTURER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COUNTRY_ORIGIN = null;
    } else {
    this.C_COUNTRY_ORIGIN = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ITEM_TRADE_NAME = null;
    } else {
    this.C_ITEM_TRADE_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PROCESS_ONE = null;
    } else {
    this.C_PROCESS_ONE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PROCESS_TWO = null;
    } else {
    this.C_PROCESS_TWO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SHELF_LIFE = null;
    } else {
    this.C_SHELF_LIFE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SHELF_LIFE_UNIT = null;
    } else {
    this.C_SHELF_LIFE_UNIT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_STORAGE_CONDITION = null;
    } else {
    this.C_STORAGE_CONDITION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_WEIGHT = null;
    } else {
    this.C_WEIGHT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_WEIGHT_UNIT = null;
    } else {
    this.C_WEIGHT_UNIT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PACKAGING_TYPE = null;
    } else {
    this.C_PACKAGING_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TEST_TYPE = null;
    } else {
    this.C_TEST_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_EXTERNAL_REFERENCE = null;
    } else {
    this.C_EXTERNAL_REFERENCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_NOMINAL_SIZE = null;
    } else {
    this.C_NOMINAL_SIZE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_LAYER_MIX_TYPE = null;
    } else {
    this.C_LAYER_MIX_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLE_UNIT = null;
    } else {
    this.C_SAMPLE_UNIT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMP_QNTY = null;
    } else {
    this.C_SAMP_QNTY = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLED_BY = null;
    } else {
    this.C_SAMPLED_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BITUMEN_LOCALSUPPLIER = null;
    } else {
    this.C_BITUMEN_LOCALSUPPLIER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BLOCK_TOTALBUNDLES = null;
    } else {
    this.C_BLOCK_TOTALBUNDLES = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = null;
    } else {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = null;
    } else {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = null;
    } else {
    this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BLOCK_BLOCKSPERBUNDLE = null;
    } else {
    this.C_BLOCK_BLOCKSPERBUNDLE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = null;
    } else {
    this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MORTAR_WATERORCEMENTRATIO = null;
    } else {
    this.C_MORTAR_WATERORCEMENTRATIO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MORTAR_TYPEOFMORTAR = null;
    } else {
    this.C_MORTAR_TYPEOFMORTAR = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_NOMTHICKNESS = null;
    } else {
    this.C_THERMALINSULATION_NOMTHICKNESS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_NOMDENSITY = null;
    } else {
    this.C_THERMALINSULATION_NOMDENSITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_NOMDIAMETER = null;
    } else {
    this.C_THERMALINSULATION_NOMDIAMETER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_FACINGTYPE = null;
    } else {
    this.C_THERMALINSULATION_FACINGTYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_FACINGDESCRIPTION = null;
    } else {
    this.C_THERMALINSULATION_FACINGDESCRIPTION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = null;
    } else {
    this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = null;
    } else {
    this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = null;
    } else {
    this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_LUBEOIL_VISCOSITYGRADE = null;
    } else {
    this.C_LUBEOIL_VISCOSITYGRADE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFGMB = null;
    } else {
    this.C_ASPHALT_REFGMB = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFGSB = null;
    } else {
    this.C_ASPHALT_REFGSB = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFGSE = null;
    } else {
    this.C_ASPHALT_REFGSE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFGB = null;
    } else {
    this.C_ASPHALT_REFGB = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_LAYINGDATE = null;
    } else {
    this.C_ASPHALT_LAYINGDATE = new Timestamp(__dataIn.readLong());
    this.C_ASPHALT_LAYINGDATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFMARSHALLREQNO = null;
    } else {
    this.C_ASPHALT_REFMARSHALLREQNO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFBITUMENREQNO = null;
    } else {
    this.C_ASPHALT_REFBITUMENREQNO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_REFMIX = null;
    } else {
    this.C_ASPHALT_REFMIX = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_CALIBRATIONFACTOR = null;
    } else {
    this.C_ASPHALT_CALIBRATIONFACTOR = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_GRADINGORBITUMENSPECS = null;
    } else {
    this.C_ASPHALT_GRADINGORBITUMENSPECS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASPHALT_OTHERSPECS = null;
    } else {
    this.C_ASPHALT_OTHERSPECS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CEMENT_CLASSOFCEMENT = null;
    } else {
    this.C_CEMENT_CLASSOFCEMENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_GRADEOFCONCRETE = null;
    } else {
    this.C_CONCRETE_GRADEOFCONCRETE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_CEMENTCONTENT = null;
    } else {
    this.C_CONCRETE_CEMENTCONTENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_TESTINGAGEOFSAMPLE = null;
    } else {
    this.C_CONCRETE_TESTINGAGEOFSAMPLE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_ESTIMATEDTESTDATE = null;
    } else {
    this.C_CONCRETE_ESTIMATEDTESTDATE = new Timestamp(__dataIn.readLong());
    this.C_CONCRETE_ESTIMATEDTESTDATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_TRUCKNUMBER = null;
    } else {
    this.C_CONCRETE_TRUCKNUMBER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_PLACEOFMAKINGCUBES = null;
    } else {
    this.C_CONCRETE_PLACEOFMAKINGCUBES = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_EQUIPMENTTYPEUSED = null;
    } else {
    this.C_CONCRETE_EQUIPMENTTYPEUSED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_CURINGORSTORAGECONDITIONS = null;
    } else {
    this.C_CONCRETE_CURINGORSTORAGECONDITIONS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_METHODOFCOMPACTION = null;
    } else {
    this.C_CONCRETE_METHODOFCOMPACTION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONCRETE_CONDITIONOFSAMPLE = null;
    } else {
    this.C_CONCRETE_CONDITIONOFSAMPLE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_CEMENT = null;
    } else {
    this.C_FRESHCONCRETE_CEMENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_CEMENTTYPE = null;
    } else {
    this.C_FRESHCONCRETE_CEMENTTYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_ADMIXTURE = null;
    } else {
    this.C_FRESHCONCRETE_ADMIXTURE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_ADMIXTURETYPE = null;
    } else {
    this.C_FRESHCONCRETE_ADMIXTURETYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = null;
    } else {
    this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_AGGREGATE_20MM = null;
    } else {
    this.C_FRESHCONCRETE_AGGREGATE_20MM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_AGGREGATE_10MM = null;
    } else {
    this.C_FRESHCONCRETE_AGGREGATE_10MM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_AGGREGATE_1MM = null;
    } else {
    this.C_FRESHCONCRETE_AGGREGATE_1MM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = null;
    } else {
    this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SOIL_MDD = null;
    } else {
    this.C_SOIL_MDD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SOIL_OMC = null;
    } else {
    this.C_SOIL_OMC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SOIL_MDD_OMC_REF = null;
    } else {
    this.C_SOIL_MDD_OMC_REF = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SOIL_BFRL = null;
    } else {
    this.C_SOIL_BFRL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SOIL_LAYER_THICKNESSMM = null;
    } else {
    this.C_SOIL_LAYER_THICKNESSMM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SOIL_SOURCE_MINERAL_AGG = null;
    } else {
    this.C_SOIL_SOURCE_MINERAL_AGG = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_STEEL_MANUFACTURER_CERT_NO = null;
    } else {
    this.C_STEEL_MANUFACTURER_CERT_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_STEEL_GRADE_STEEL = null;
    } else {
    this.C_STEEL_GRADE_STEEL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_STEEL_LOCAL_SUPPLIER = null;
    } else {
    this.C_STEEL_LOCAL_SUPPLIER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_STEEL_HEAT_NUMBER = null;
    } else {
    this.C_STEEL_HEAT_NUMBER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODUCT_TEST_SERV = null;
    } else {
    this.C_PRODUCT_TEST_SERV = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLING_METHOD = null;
    } else {
    this.C_SAMPLING_METHOD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLE_DESC = null;
    } else {
    this.C_SAMPLE_DESC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_BATCH_SIZE = null;
    } else {
    this.C_BATCH_SIZE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_UNITNO = null;
    } else {
    this.C_UNITNO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_UNITSIZE = null;
    } else {
    this.C_UNITSIZE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_NO_INCREMENT = null;
    } else {
    this.C_NO_INCREMENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MORE_SAMPLE_NOTE = null;
    } else {
    this.C_MORE_SAMPLE_NOTE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_STAGES = null;
    } else {
    this.C_STAGES = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_RETURN_NOTE = null;
    } else {
    this.C_RETURN_NOTE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DISCARD = null;
    } else {
    this.C_DISCARD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DISCARD_DATE = null;
    } else {
    this.C_DISCARD_DATE = new Timestamp(__dataIn.readLong());
    this.C_DISCARD_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_DISCARD_BY = null;
    } else {
    this.C_DISCARD_BY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TRAVEL_CALCULATED = null;
    } else {
    this.C_TRAVEL_CALCULATED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PHYSICAL_OBSERVATION = null;
    } else {
    this.C_PHYSICAL_OBSERVATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SENDER_NO = null;
    } else {
    this.C_SENDER_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REF_SENDER_NO = null;
    } else {
    this.C_REF_SENDER_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TESTLAB = null;
    } else {
    this.C_TESTLAB = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRIMARY_RESULT = null;
    } else {
    this.C_PRIMARY_RESULT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRIMARY_REPORT_NO = null;
    } else {
    this.C_PRIMARY_REPORT_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REF_RESULT = null;
    } else {
    this.C_REF_RESULT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REF_REPORT_NO = null;
    } else {
    this.C_REF_REPORT_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DETERMINATION = null;
    } else {
    this.C_DETERMINATION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_EQUIPMENT_TYPE = null;
    } else {
    this.C_EQUIPMENT_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_EQUIPMENT_CLASS = null;
    } else {
    this.C_EQUIPMENT_CLASS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CAPACITY = null;
    } else {
    this.C_CAPACITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_NO_OF_MEASUREMENTS = null;
    } else {
    this.C_NO_OF_MEASUREMENTS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_REQ_DATE_CALIB = null;
    } else {
    this.C_REQ_DATE_CALIB = new Timestamp(__dataIn.readLong());
    this.C_REQ_DATE_CALIB.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_CALIB_SITE = null;
    } else {
    this.C_CALIB_SITE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CALIB_METHOD = null;
    } else {
    this.C_CALIB_METHOD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ASSET_NAME = null;
    } else {
    this.C_ASSET_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MODEL_NO = null;
    } else {
    this.C_MODEL_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PURCHASE_DATE = null;
    } else {
    this.C_PURCHASE_DATE = new Timestamp(__dataIn.readLong());
    this.C_PURCHASE_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_PURCHASE_PRICE = null;
    } else {
    this.C_PURCHASE_PRICE = org.apache.sqoop.lib.BigDecimalSerializer.readFields(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DELIVERY_RECD = null;
    } else {
    this.C_DELIVERY_RECD = new Timestamp(__dataIn.readLong());
    this.C_DELIVERY_RECD.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_DATE_OF_INSTALL = null;
    } else {
    this.C_DATE_OF_INSTALL = new Timestamp(__dataIn.readLong());
    this.C_DATE_OF_INSTALL.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_TAG_NO = null;
    } else {
    this.C_TAG_NO = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_SERIAL_NO = null;
    } else {
    this.C_SERIAL_NO = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_NO_OF_ACCESSORIES = null;
    } else {
    this.C_NO_OF_ACCESSORIES = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_ACCESSORY_DETAIL = null;
    } else {
    this.C_ACCESSORY_DETAIL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ADDR_ROOM_NO = null;
    } else {
    this.C_ADDR_ROOM_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_WARRANTY_EXP_DATE = null;
    } else {
    this.C_WARRANTY_EXP_DATE = new Timestamp(__dataIn.readLong());
    this.C_WARRANTY_EXP_DATE.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_UNDER_CONTRACT = null;
    } else {
    this.C_UNDER_CONTRACT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONTRACT_NO = null;
    } else {
    this.C_CONTRACT_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONTRACT_COMP = null;
    } else {
    this.C_CONTRACT_COMP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONTRACT_START = null;
    } else {
    this.C_CONTRACT_START = new Timestamp(__dataIn.readLong());
    this.C_CONTRACT_START.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONTRACT_END = null;
    } else {
    this.C_CONTRACT_END = new Timestamp(__dataIn.readLong());
    this.C_CONTRACT_END.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_CALIB_TYPE = null;
    } else {
    this.C_CALIB_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_AGE_GROUP_LABEL = null;
    } else {
    this.C_AGE_GROUP_LABEL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_AGE_GROUP_TEST = null;
    } else {
    this.C_AGE_GROUP_TEST = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TOYS_DIMENSION = null;
    } else {
    this.C_TOYS_DIMENSION = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TOYS_FEATURES = null;
    } else {
    this.C_TOYS_FEATURES = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TOYS_LABEL_DETAILS = null;
    } else {
    this.C_TOYS_LABEL_DETAILS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TEXTILE_CLASS = null;
    } else {
    this.C_TEXTILE_CLASS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TEXTILE_TYPE = null;
    } else {
    this.C_TEXTILE_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MONTAJI_REGISTERED = null;
    } else {
    this.C_MONTAJI_REGISTERED = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MONTAJI_REF = null;
    } else {
    this.C_MONTAJI_REF = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SEALING_PACK = null;
    } else {
    this.C_SEALING_PACK = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_TYPE = null;
    } else {
    this.C_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FORM = null;
    } else {
    this.C_FORM = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FORM_TYPE = null;
    } else {
    this.C_FORM_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FINENESS = null;
    } else {
    this.C_FINENESS = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SHAPE = null;
    } else {
    this.C_SHAPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_LABORATORY = null;
    } else {
    this.C_LABORATORY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CEMARK = null;
    } else {
    this.C_CEMARK = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_AGE = null;
    } else {
    this.C_AGE = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.C_GENDER = null;
    } else {
    this.C_GENDER = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_OWNER_NAME = null;
    } else {
    this.C_OWNER_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CONSIGNMENT_NO = null;
    } else {
    this.C_CONSIGNMENT_NO = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SAMPLE_ORIGIN = null;
    } else {
    this.C_SAMPLE_ORIGIN = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_MEAT_REQ_TYP = null;
    } else {
    this.C_MEAT_REQ_TYP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PURPOSE_TEST = null;
    } else {
    this.C_PURPOSE_TEST = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COLL_CLARITY = null;
    } else {
    this.C_COLL_CLARITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COLL_DESC = null;
    } else {
    this.C_COLL_DESC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COLL_ISCOLLSAMPLE = null;
    } else {
    this.C_COLL_ISCOLLSAMPLE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COLL_NAME = null;
    } else {
    this.C_COLL_NAME = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_COLL_EMIRATEID = null;
    } else {
    this.C_COLL_EMIRATEID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_DCL_USERID = null;
    } else {
    this.C_DCL_USERID = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FAILURE_DESC = null;
    } else {
    this.C_FAILURE_DESC = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_FAILURE_COMP = null;
    } else {
    this.C_FAILURE_COMP = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_WORK_FAIL = null;
    } else {
    this.C_WORK_FAIL = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PURCHASE_REF = null;
    } else {
    this.C_PURCHASE_REF = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PURCHASE_TYPE = null;
    } else {
    this.C_PURCHASE_TYPE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PEARL_FIELD = null;
    } else {
    this.C_PEARL_FIELD = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_POBOX = null;
    } else {
    this.C_POBOX = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PRODUCT_DILUENT = null;
    } else {
    this.C_PRODUCT_DILUENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_ACTIVE_SUBSTANCE = null;
    } else {
    this.C_ACTIVE_SUBSTANCE = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_EDIT_ASSET = null;
    } else {
    this.C_EDIT_ASSET = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_PH = null;
    } else {
    this.C_PH = org.apache.sqoop.lib.BigDecimalSerializer.readFields(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_NATUREOFACTIVITY = null;
    } else {
    this.C_NATUREOFACTIVITY = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_CHLORINELEVEL = null;
    } else {
    this.C_CHLORINELEVEL = org.apache.sqoop.lib.BigDecimalSerializer.readFields(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_RISK_ASSESSMENT = null;
    } else {
    this.C_RISK_ASSESSMENT = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.C_SPECIMEN = null;
    } else {
    this.C_SPECIMEN = Integer.valueOf(__dataIn.readInt());
    }
  }
  public void write(DataOutput __dataOut) throws IOException {
    if (null == this.SAMPLE_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.SAMPLE_NUMBER);
    }
    if (null == this.TEXT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEXT_ID);
    }
    if (null == this.STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STATUS);
    }
    if (null == this.OLD_STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OLD_STATUS);
    }
    if (null == this.DISP_FLDS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, DISP_FLDS);
    }
    if (null == this.LABEL_MASK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LABEL_MASK);
    }
    if (null == this.IN_SPEC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IN_SPEC);
    }
    if (null == this.IN_CAL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IN_CAL);
    }
    if (null == this.CHANGED_ON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.CHANGED_ON.getTime());
    __dataOut.writeInt(this.CHANGED_ON.getNanos());
    }
    if (null == this.RE_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RE_SAMPLE);
    }
    if (null == this.ALIQUOT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALIQUOT);
    }
    if (null == this.ORIGINAL_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.ORIGINAL_SAMPLE);
    }
    if (null == this.PARENT_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PARENT_SAMPLE);
    }
    if (null == this.PARENT_ALIQUOT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PARENT_ALIQUOT);
    }
    if (null == this.ALIQUOT_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALIQUOT_GROUP);
    }
    if (null == this.SAMPLE_VOLUME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeFloat(this.SAMPLE_VOLUME);
    }
    if (null == this.SAMPLE_UNITS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLE_UNITS);
    }
    if (null == this.LOGIN_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.LOGIN_DATE.getTime());
    __dataOut.writeInt(this.LOGIN_DATE.getNanos());
    }
    if (null == this.LOGIN_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LOGIN_BY);
    }
    if (null == this.SAMPLED_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.SAMPLED_DATE.getTime());
    __dataOut.writeInt(this.SAMPLED_DATE.getNanos());
    }
    if (null == this.RECD_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.RECD_DATE.getTime());
    __dataOut.writeInt(this.RECD_DATE.getNanos());
    }
    if (null == this.RECEIVED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RECEIVED_BY);
    }
    if (null == this.DATE_STARTED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DATE_STARTED.getTime());
    __dataOut.writeInt(this.DATE_STARTED.getNanos());
    }
    if (null == this.STARTED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STARTED);
    }
    if (null == this.ASSIGNED_OPERATOR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ASSIGNED_OPERATOR);
    }
    if (null == this.DUE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DUE_DATE.getTime());
    __dataOut.writeInt(this.DUE_DATE.getNanos());
    }
    if (null == this.DATE_COMPLETED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DATE_COMPLETED.getTime());
    __dataOut.writeInt(this.DATE_COMPLETED.getNanos());
    }
    if (null == this.DATE_REVIEWED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DATE_REVIEWED.getTime());
    __dataOut.writeInt(this.DATE_REVIEWED.getNanos());
    }
    if (null == this.PREP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PREP);
    }
    if (null == this.PREP_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.PREP_DATE.getTime());
    __dataOut.writeInt(this.PREP_DATE.getNanos());
    }
    if (null == this.PREP_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PREP_BY);
    }
    if (null == this.REVIEWER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, REVIEWER);
    }
    if (null == this.REVIEW_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, REVIEW_NOTE);
    }
    if (null == this.PRODUCT_CODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRODUCT_CODE);
    }
    if (null == this.PRODUCT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRODUCT);
    }
    if (null == this.PRODUCT_VERSION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PRODUCT_VERSION);
    }
    if (null == this.PRODUCT_GRADE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRODUCT_GRADE);
    }
    if (null == this.SAMPLING_POINT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLING_POINT);
    }
    if (null == this.SAMPLE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLE_TYPE);
    }
    if (null == this.PROJECT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PROJECT);
    }
    if (null == this.BATCH_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BATCH_NAME);
    }
    if (null == this.BATCH_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BATCH_TEMPLATE);
    }
    if (null == this.STEP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STEP);
    }
    if (null == this.SAMPLE_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLE_NAME);
    }
    if (null == this.DESCRIPTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, DESCRIPTION);
    }
    if (null == this.PRIORITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PRIORITY);
    }
    if (null == this.LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LOCATION);
    }
    if (null == this.CUSTOMER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CUSTOMER);
    }
    if (null == this.TEST_LIST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEST_LIST);
    }
    if (null == this.TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEMPLATE);
    }
    if (null == this.RECIPIENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RECIPIENT);
    }
    if (null == this.STANDARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STANDARD);
    }
    if (null == this.EXT_LINK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, EXT_LINK);
    }
    if (null == this.CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CONDITION);
    }
    if (null == this.TIMEPOINT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TIMEPOINT);
    }
    if (null == this.LOT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.LOT);
    }
    if (null == this.BASE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.BASE_DATE.getTime());
    __dataOut.writeInt(this.BASE_DATE.getNanos());
    }
    if (null == this.AVAILABLE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.AVAILABLE_DATE.getTime());
    __dataOut.writeInt(this.AVAILABLE_DATE.getNanos());
    }
    if (null == this.REQUIRED_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.REQUIRED_DATE.getTime());
    __dataOut.writeInt(this.REQUIRED_DATE.getNanos());
    }
    if (null == this.TARGET_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.TARGET_DATE.getTime());
    __dataOut.writeInt(this.TARGET_DATE.getNanos());
    }
    if (null == this.PARTIAL_SPEC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PARTIAL_SPEC);
    }
    if (null == this.SPEC_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SPEC_TYPE);
    }
    if (null == this.STAGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STAGE);
    }
    if (null == this.PRIMARY_IN_SPEC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRIMARY_IN_SPEC);
    }
    if (null == this.BATCH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BATCH);
    }
    if (null == this.CHARGE_CODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CHARGE_CODE);
    }
    if (null == this.FORMULATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, FORMULATION);
    }
    if (null == this.PROTOCOL_LEVEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PROTOCOL_LEVEL);
    }
    if (null == this.RELEASED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RELEASED);
    }
    if (null == this.RELEASED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RELEASED_BY);
    }
    if (null == this.RELEASED_ON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.RELEASED_ON.getTime());
    __dataOut.writeInt(this.RELEASED_ON.getNanos());
    }
    if (null == this.IN_CONTROL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IN_CONTROL);
    }
    if (null == this.INVESTIGATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INVESTIGATION);
    }
    if (null == this.INVESTIGATED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INVESTIGATED);
    }
    if (null == this.APPROVED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, APPROVED);
    }
    if (null == this.APPROVAL_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, APPROVAL_GROUP);
    }
    if (null == this.READY_FOR_APPROVAL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, READY_FOR_APPROVAL);
    }
    if (null == this.APPROVAL_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.APPROVAL_ID);
    }
    if (null == this.APPROVAL_ROUTING) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, APPROVAL_ROUTING);
    }
    if (null == this.MODIFIED_RESULTS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, MODIFIED_RESULTS);
    }
    if (null == this.REPORT_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.REPORT_NUMBER);
    }
    if (null == this.COMPOSITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, COMPOSITE);
    }
    if (null == this.PARENT_COMPOSITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PARENT_COMPOSITE);
    }
    if (null == this.COMPOSITE_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, COMPOSITE_TEMPLATE);
    }
    if (null == this.SEASON_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.SEASON_DATE.getTime());
    __dataOut.writeInt(this.SEASON_DATE.getNanos());
    }
    if (null == this.PEOPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PEOPLE);
    }
    if (null == this.TEST_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEST_LOCATION);
    }
    if (null == this.OWNER_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OWNER_LOCATION);
    }
    if (null == this.CHK_ALIQUOT_STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CHK_ALIQUOT_STATUS);
    }
    if (null == this.CHK_ALIQUOT_SPECS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CHK_ALIQUOT_SPECS);
    }
    if (null == this.ALIQUOT_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALIQUOT_TEMPLATE);
    }
    if (null == this.CALC_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CALC_GROUP);
    }
    if (null == this.SAMPLE_EVENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.SAMPLE_EVENT);
    }
    if (null == this.LABEL_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LABEL_ID);
    }
    if (null == this.HAS_FLAGS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, HAS_FLAGS);
    }
    if (null == this.VARIATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, VARIATION);
    }
    if (null == this.SAMPLED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLED_BY);
    }
    if (null == this.SAMPLED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLED);
    }
    if (null == this.ORDER_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ORDER_NUM);
    }
    if (null == this.LAST_ORDER_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LAST_ORDER_NUM);
    }
    if (null == this.STORAGE_CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STORAGE_CONDITION);
    }
    if (null == this.CONTAINER_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CONTAINER_TYPE);
    }
    if (null == this.NUM_CONTAINERS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.NUM_CONTAINERS);
    }
    if (null == this.IMPORTANT_MESSAGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IMPORTANT_MESSAGE);
    }
    if (null == this.OBSERVATIONS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OBSERVATIONS);
    }
    if (null == this.LAB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LAB);
    }
    if (null == this.EXPIRATION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.EXPIRATION_DATE.getTime());
    __dataOut.writeInt(this.EXPIRATION_DATE.getNanos());
    }
    if (null == this.REQD_VOLUME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeFloat(this.REQD_VOLUME);
    }
    if (null == this.COLLECTION_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, COLLECTION_METHOD);
    }
    if (null == this.COLLECTION_OFFSET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.COLLECTION_OFFSET);
    }
    if (null == this.SIGNED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SIGNED);
    }
    if (null == this.CASE_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CASE_NAME);
    }
    if (null == this.CONTRACT_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.CONTRACT_NUMBER);
    }
    if (null == this.BILLING_ITEM_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BILLING_ITEM_DESC);
    }
    if (null == this.INTERPRETED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INTERPRETED);
    }
    if (null == this.INTERP_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INTERP_TYPE);
    }
    if (null == this.INSPECT_PNT_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.INSPECT_PNT_NUM);
    }
    if (null == this.INSPECTION_LOT_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INSPECTION_LOT_NUM);
    }
    if (null == this.IS_INSPECT_PNT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IS_INSPECT_PNT);
    }
    if (null == this.PLANT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PLANT);
    }
    if (null == this.USERC1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERC1_VALUE);
    }
    if (null == this.USERC2_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERC2_VALUE);
    }
    if (null == this.USERD1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERD1_VALUE);
    }
    if (null == this.USERN1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERN1_VALUE);
    }
    if (null == this.USERN2_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERN2_VALUE);
    }
    if (null == this.USERT1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERT1_VALUE);
    }
    if (null == this.SAP_SELECTED_SET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SELECTED_SET);
    }
    if (null == this.SAP_CODE_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_CODE_GROUP);
    }
    if (null == this.SAP_SAMPLE_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SAMPLE_NUMBER);
    }
    if (null == this.SAP_SS_PLANT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SS_PLANT);
    }
    if (null == this.SAP_SAMPLE_COUNT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SAMPLE_COUNT);
    }
    if (null == this.OPERATION_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OPERATION_NUMBER);
    }
    if (null == this.STORAGE_LOC_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.STORAGE_LOC_NO);
    }
    if (null == this.EXTERNAL_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, EXTERNAL_LOCATION);
    }
    if (null == this.FORMULATION_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, FORMULATION_NAME);
    }
    if (null == this.STANDARD_REAGENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STANDARD_REAGENT);
    }
    if (null == this.CONVERSION_GROUPS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CONVERSION_GROUPS);
    }
    if (null == this.REPORTED_RSLT_OOS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, REPORTED_RSLT_OOS);
    }
    if (null == this.GROUP_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, GROUP_NAME);
    }
    if (null == this.PROCESS_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PROCESS_UNIT);
    }
    if (null == this.HAZARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, HAZARD);
    }
    if (null == this.INSTRUMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INSTRUMENT);
    }
    if (null == this.T_SITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SITE);
    }
    if (null == this.T_PLANT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PLANT);
    }
    if (null == this.T_CERTIFICATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_CERTIFICATE);
    }
    if (null == this.T_CONTAINER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_CONTAINER);
    }
    if (null == this.T_OVERDUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_OVERDUE);
    }
    if (null == this.T_PO_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PO_NUMBER);
    }
    if (null == this.T_PRODUCTION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_PRODUCTION_DATE.getTime());
    __dataOut.writeInt(this.T_PRODUCTION_DATE.getNanos());
    }
    if (null == this.T_REPORT_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_REPORT_DATE.getTime());
    __dataOut.writeInt(this.T_REPORT_DATE.getNanos());
    }
    if (null == this.T_REQUESTED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_REQUESTED_BY);
    }
    if (null == this.T_LONG_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_LONG_NOTE);
    }
    if (null == this.T_SHIFT_CODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SHIFT_CODE);
    }
    if (null == this.T_SUPP_BATCH_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SUPP_BATCH_NO);
    }
    if (null == this.T_SUPPLIER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SUPPLIER);
    }
    if (null == this.T_TRUCK_VESSEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_TRUCK_VESSEL);
    }
    if (null == this.T_PLANT_RECV_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PLANT_RECV_BY);
    }
    if (null == this.T_PLANT_RECV_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_PLANT_RECV_DATE.getTime());
    __dataOut.writeInt(this.T_PLANT_RECV_DATE.getNanos());
    }
    if (null == this.C_PRIORITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRIORITY);
    }
    if (null == this.STORAGE_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STORAGE_TEMPLATE);
    }
    if (null == this.ALLOW_CHLD_ALQTS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALLOW_CHLD_ALQTS);
    }
    if (null == this.PHASE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PHASE);
    }
    if (null == this.SCHEDULE_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.SCHEDULE_NUMBER);
    }
    if (null == this.T_ACTION_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_ACTION_NUMBER);
    }
    if (null == this.T_BATCH_NAME1) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME1);
    }
    if (null == this.T_BATCH_NAME2) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME2);
    }
    if (null == this.T_BATCH_NAME3) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME3);
    }
    if (null == this.T_BATCH_NAME4) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME4);
    }
    if (null == this.T_BATCH_NAME5) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME5);
    }
    if (null == this.T_BATCH_NAME6) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME6);
    }
    if (null == this.T_COLLECT_SCHEME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_COLLECT_SCHEME);
    }
    if (null == this.T_COMPOSITE_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_COMPOSITE_GROUP);
    }
    if (null == this.T_DISTRIBUTION_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_DISTRIBUTION_BY);
    }
    if (null == this.T_DISTRIBUTION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_DISTRIBUTION_DATE.getTime());
    __dataOut.writeInt(this.T_DISTRIBUTION_DATE.getNanos());
    }
    if (null == this.T_EM_PLAN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_EM_PLAN);
    }
    if (null == this.T_INCUB1_BATCH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_INCUB1_BATCH);
    }
    if (null == this.T_INCUB1_END) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB1_END.getTime());
    __dataOut.writeInt(this.T_INCUB1_END.getNanos());
    }
    if (null == this.T_INCUB1_START) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB1_START.getTime());
    __dataOut.writeInt(this.T_INCUB1_START.getNanos());
    }
    if (null == this.T_INCUB2_BATCH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_INCUB2_BATCH);
    }
    if (null == this.T_INCUB2_END) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB2_END.getTime());
    __dataOut.writeInt(this.T_INCUB2_END.getNanos());
    }
    if (null == this.T_INCUB2_START) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB2_START.getTime());
    __dataOut.writeInt(this.T_INCUB2_START.getNanos());
    }
    if (null == this.T_MEDIA_REFERENCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_MEDIA_REFERENCE);
    }
    if (null == this.T_ORIGINAL_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_ORIGINAL_SAMPLE);
    }
    if (null == this.T_PERSONNEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PERSONNEL);
    }
    if (null == this.T_PERSONNEL_SET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PERSONNEL_SET);
    }
    if (null == this.T_SAMPLE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SAMPLE_TYPE);
    }
    if (null == this.T_SCHEDULE_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SCHEDULE_GROUP);
    }
    if (null == this.T_SUITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SUITE);
    }
    if (null == this.T_TRANSIT_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_TRANSIT_LOCATION);
    }
    if (null == this.T_VALIDATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_VALIDATION);
    }
    if (null == this.C_REFERENCE_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REFERENCE_ID);
    }
    if (null == this.C_SAMPLING_REASON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_REASON);
    }
    if (null == this.C_CUSTOMER_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CUSTOMER_TYPE);
    }
    if (null == this.C_REQUEST_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQUEST_TYPE);
    }
    if (null == this.C_OTHER_SAMPLE_SOURCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_OTHER_SAMPLE_SOURCE);
    }
    if (null == this.C_CUST_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CUST_ID);
    }
    if (null == this.C_CLIENT_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CLIENT_TYPE);
    }
    if (null == this.C_REQ_SAMP_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SAMP_TYPE);
    }
    if (null == this.C_SAMPLE_SOURCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_SOURCE);
    }
    if (null == this.C_DM_BARCODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DM_BARCODE);
    }
    if (null == this.C_REQ_EXT_REFERENCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_EXT_REFERENCE);
    }
    if (null == this.C_EXPRESS_SERVICE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EXPRESS_SERVICE);
    }
    if (null == this.C_HARDCOPY_REQUIRED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_HARDCOPY_REQUIRED);
    }
    if (null == this.C_REQ_REMARKS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_REMARKS);
    }
    if (null == this.C_REQ_COPIES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_REQ_COPIES);
    }
    if (null == this.C_REQ_EDIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_EDIT);
    }
    if (null == this.C_TOTAL_SERVICE_FEE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_TOTAL_SERVICE_FEE, __dataOut);
    }
    if (null == this.C_PRODUCT_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_GROUP);
    }
    if (null == this.C_PRODUCT_CATEGORY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_CATEGORY);
    }
    if (null == this.C_PRODUCTION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_PRODUCTION_DATE.getTime());
    __dataOut.writeInt(this.C_PRODUCTION_DATE.getNanos());
    }
    if (null == this.C_NO_OF_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_NO_OF_UNIT);
    }
    if (null == this.C_SAMPLE_CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_CONDITION);
    }
    if (null == this.C_TEMP_REC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeFloat(this.C_TEMP_REC);
    }
    if (null == this.C_POINT_OF_SAMPLING) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_POINT_OF_SAMPLING);
    }
    if (null == this.C_REQ_SAMP_COLLECTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SAMP_COLLECTION);
    }
    if (null == this.C_REQ_SAMP_BAL_RETURN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SAMP_BAL_RETURN);
    }
    if (null == this.C_HAZARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_HAZARD);
    }
    if (null == this.C_BATCH_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BATCH_NO);
    }
    if (null == this.C_REQUEST_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQUEST_NO);
    }
    if (null == this.C_BILLING_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BILLING_TYPE);
    }
    if (null == this.C_TOTAL_TEST_CHARGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_TOTAL_TEST_CHARGE, __dataOut);
    }
    if (null == this.C_VOUCHER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_VOUCHER);
    }
    if (null == this.C_ERAD_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ERAD_NO);
    }
    if (null == this.C_RECEIPT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_RECEIPT);
    }
    if (null == this.C_PAYMENT_DT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_PAYMENT_DT.getTime());
    __dataOut.writeInt(this.C_PAYMENT_DT.getNanos());
    }
    if (null == this.C_PAYMENT_SRC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PAYMENT_SRC);
    }
    if (null == this.C_PAYMENT_STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PAYMENT_STATUS);
    }
    if (null == this.C_CUST_DELIVERY_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CUST_DELIVERY_DATE.getTime());
    __dataOut.writeInt(this.C_CUST_DELIVERY_DATE.getNanos());
    }
    if (null == this.C_SAMPLE_OPINION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_OPINION);
    }
    if (null == this.C_SUBCAT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SUBCAT_ID);
    }
    if (null == this.C_PRODCAT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_PRODCAT_ID);
    }
    if (null == this.C_PROD_GROUP_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_PROD_GROUP_ID);
    }
    if (null == this.C_MSG_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MSG_ID);
    }
    if (null == this.C_MSG_DIGEST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MSG_DIGEST);
    }
    if (null == this.C_REQ_SOURCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SOURCE);
    }
    if (null == this.C_ITEM_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_ITEM_ID);
    }
    if (null == this.C_SRC_REQ_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SRC_REQ_ID);
    }
    if (null == this.C_EXPECTED_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_EXPECTED_DATE.getTime());
    __dataOut.writeInt(this.C_EXPECTED_DATE.getNanos());
    }
    if (null == this.C_PRODUCT_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_DESC);
    }
    if (null == this.C_DATE_ONHOLD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DATE_ONHOLD.getTime());
    __dataOut.writeInt(this.C_DATE_ONHOLD.getNanos());
    }
    if (null == this.C_DATE_OFFHOLD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DATE_OFFHOLD.getTime());
    __dataOut.writeInt(this.C_DATE_OFFHOLD.getNanos());
    }
    if (null == this.C_ONHOLD_REASON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ONHOLD_REASON);
    }
    if (null == this.LATITUDE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LATITUDE);
    }
    if (null == this.LONGITUDE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LONGITUDE);
    }
    if (null == this.C_ON_SITE_PRESERVATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ON_SITE_PRESERVATION);
    }
    if (null == this.C_PRESERVATION_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRESERVATION_METHOD);
    }
    if (null == this.C_SAMPLING_PROCEDURE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_PROCEDURE);
    }
    if (null == this.C_SAMPLING_APPARATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_APPARATUS);
    }
    if (null == this.C_APPEARANCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_APPEARANCE);
    }
    if (null == this.C_COLOUR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLOUR);
    }
    if (null == this.C_ODOUR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ODOUR);
    }
    if (null == this.C_SAMPLING_COLLECTION_LOC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_COLLECTION_LOC);
    }
    if (null == this.C_REPORT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REPORT_ID);
    }
    if (null == this.C_DELIVERED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DELIVERED_BY);
    }
    if (null == this.C_MAKANI_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MAKANI_NO);
    }
    if (null == this.C_COUNTRY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COUNTRY);
    }
    if (null == this.C_BUILDING_FLOOR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BUILDING_FLOOR);
    }
    if (null == this.C_LOCATION_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LOCATION_DESC);
    }
    if (null == this.C_ITEM_BARCODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ITEM_BARCODE);
    }
    if (null == this.C_ITEM_BRAND) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ITEM_BRAND);
    }
    if (null == this.C_MANUFACTURER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MANUFACTURER);
    }
    if (null == this.C_COUNTRY_ORIGIN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COUNTRY_ORIGIN);
    }
    if (null == this.C_ITEM_TRADE_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ITEM_TRADE_NAME);
    }
    if (null == this.C_PROCESS_ONE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PROCESS_ONE);
    }
    if (null == this.C_PROCESS_TWO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PROCESS_TWO);
    }
    if (null == this.C_SHELF_LIFE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SHELF_LIFE);
    }
    if (null == this.C_SHELF_LIFE_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SHELF_LIFE_UNIT);
    }
    if (null == this.C_STORAGE_CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STORAGE_CONDITION);
    }
    if (null == this.C_WEIGHT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_WEIGHT);
    }
    if (null == this.C_WEIGHT_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_WEIGHT_UNIT);
    }
    if (null == this.C_PACKAGING_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PACKAGING_TYPE);
    }
    if (null == this.C_TEST_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TEST_TYPE);
    }
    if (null == this.C_EXTERNAL_REFERENCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EXTERNAL_REFERENCE);
    }
    if (null == this.C_NOMINAL_SIZE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NOMINAL_SIZE);
    }
    if (null == this.C_LAYER_MIX_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LAYER_MIX_TYPE);
    }
    if (null == this.C_SAMPLE_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_UNIT);
    }
    if (null == this.C_SAMP_QNTY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SAMP_QNTY);
    }
    if (null == this.C_SAMPLED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLED_BY);
    }
    if (null == this.C_BITUMEN_LOCALSUPPLIER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BITUMEN_LOCALSUPPLIER);
    }
    if (null == this.C_BLOCK_TOTALBUNDLES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_TOTALBUNDLES);
    }
    if (null == this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX);
    }
    if (null == this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY);
    }
    if (null == this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ);
    }
    if (null == this.C_BLOCK_BLOCKSPERBUNDLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_BLOCKSPERBUNDLE);
    }
    if (null == this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_RELATEDCERTIFICATIONREQUESTID);
    }
    if (null == this.C_MORTAR_WATERORCEMENTRATIO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MORTAR_WATERORCEMENTRATIO);
    }
    if (null == this.C_MORTAR_TYPEOFMORTAR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MORTAR_TYPEOFMORTAR);
    }
    if (null == this.C_THERMALINSULATION_NOMTHICKNESS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_NOMTHICKNESS);
    }
    if (null == this.C_THERMALINSULATION_NOMDENSITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_NOMDENSITY);
    }
    if (null == this.C_THERMALINSULATION_NOMDIAMETER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_NOMDIAMETER);
    }
    if (null == this.C_THERMALINSULATION_FACINGTYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_FACINGTYPE);
    }
    if (null == this.C_THERMALINSULATION_FACINGDESCRIPTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_FACINGDESCRIPTION);
    }
    if (null == this.C_THERMALINSULATION_TESTTEMPORHUMIDITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_TESTTEMPORHUMIDITY);
    }
    if (null == this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY);
    }
    if (null == this.C_THERMALINSULATION_AGEOFSAMPLEDAYS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_AGEOFSAMPLEDAYS);
    }
    if (null == this.C_LUBEOIL_VISCOSITYGRADE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LUBEOIL_VISCOSITYGRADE);
    }
    if (null == this.C_ASPHALT_REFGMB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGMB);
    }
    if (null == this.C_ASPHALT_REFGSB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGSB);
    }
    if (null == this.C_ASPHALT_REFGSE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGSE);
    }
    if (null == this.C_ASPHALT_REFGB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGB);
    }
    if (null == this.C_ASPHALT_LAYINGDATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_ASPHALT_LAYINGDATE.getTime());
    __dataOut.writeInt(this.C_ASPHALT_LAYINGDATE.getNanos());
    }
    if (null == this.C_ASPHALT_REFMARSHALLREQNO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFMARSHALLREQNO);
    }
    if (null == this.C_ASPHALT_REFBITUMENREQNO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFBITUMENREQNO);
    }
    if (null == this.C_ASPHALT_REFMIX) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFMIX);
    }
    if (null == this.C_ASPHALT_CALIBRATIONFACTOR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_CALIBRATIONFACTOR);
    }
    if (null == this.C_ASPHALT_GRADINGORBITUMENSPECS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_GRADINGORBITUMENSPECS);
    }
    if (null == this.C_ASPHALT_OTHERSPECS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_OTHERSPECS);
    }
    if (null == this.C_CEMENT_CLASSOFCEMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CEMENT_CLASSOFCEMENT);
    }
    if (null == this.C_CONCRETE_GRADEOFCONCRETE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_GRADEOFCONCRETE);
    }
    if (null == this.C_CONCRETE_CEMENTCONTENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_CEMENTCONTENT);
    }
    if (null == this.C_CONCRETE_TESTINGAGEOFSAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_TESTINGAGEOFSAMPLE);
    }
    if (null == this.C_CONCRETE_ESTIMATEDTESTDATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CONCRETE_ESTIMATEDTESTDATE.getTime());
    __dataOut.writeInt(this.C_CONCRETE_ESTIMATEDTESTDATE.getNanos());
    }
    if (null == this.C_CONCRETE_TRUCKNUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_TRUCKNUMBER);
    }
    if (null == this.C_CONCRETE_PLACEOFMAKINGCUBES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_PLACEOFMAKINGCUBES);
    }
    if (null == this.C_CONCRETE_EQUIPMENTTYPEUSED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_EQUIPMENTTYPEUSED);
    }
    if (null == this.C_CONCRETE_CURINGORSTORAGECONDITIONS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_CURINGORSTORAGECONDITIONS);
    }
    if (null == this.C_CONCRETE_METHODOFCOMPACTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_METHODOFCOMPACTION);
    }
    if (null == this.C_CONCRETE_CONDITIONOFSAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_CONDITIONOFSAMPLE);
    }
    if (null == this.C_FRESHCONCRETE_CEMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_CEMENT);
    }
    if (null == this.C_FRESHCONCRETE_CEMENTTYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_CEMENTTYPE);
    }
    if (null == this.C_FRESHCONCRETE_ADMIXTURE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_ADMIXTURE);
    }
    if (null == this.C_FRESHCONCRETE_ADMIXTURETYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_ADMIXTURETYPE);
    }
    if (null == this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE);
    }
    if (null == this.C_FRESHCONCRETE_AGGREGATE_20MM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_AGGREGATE_20MM);
    }
    if (null == this.C_FRESHCONCRETE_AGGREGATE_10MM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_AGGREGATE_10MM);
    }
    if (null == this.C_FRESHCONCRETE_AGGREGATE_1MM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_AGGREGATE_1MM);
    }
    if (null == this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_CONCRETE_CLASS_GRADE);
    }
    if (null == this.C_SOIL_MDD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_MDD);
    }
    if (null == this.C_SOIL_OMC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_OMC);
    }
    if (null == this.C_SOIL_MDD_OMC_REF) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_MDD_OMC_REF);
    }
    if (null == this.C_SOIL_BFRL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_BFRL);
    }
    if (null == this.C_SOIL_LAYER_THICKNESSMM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_LAYER_THICKNESSMM);
    }
    if (null == this.C_SOIL_SOURCE_MINERAL_AGG) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_SOURCE_MINERAL_AGG);
    }
    if (null == this.C_STEEL_MANUFACTURER_CERT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_MANUFACTURER_CERT_NO);
    }
    if (null == this.C_STEEL_GRADE_STEEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_GRADE_STEEL);
    }
    if (null == this.C_STEEL_LOCAL_SUPPLIER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_LOCAL_SUPPLIER);
    }
    if (null == this.C_STEEL_HEAT_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_HEAT_NUMBER);
    }
    if (null == this.C_PRODUCT_TEST_SERV) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_TEST_SERV);
    }
    if (null == this.C_SAMPLING_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_METHOD);
    }
    if (null == this.C_SAMPLE_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_DESC);
    }
    if (null == this.C_BATCH_SIZE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BATCH_SIZE);
    }
    if (null == this.C_UNITNO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_UNITNO);
    }
    if (null == this.C_UNITSIZE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_UNITSIZE);
    }
    if (null == this.C_NO_INCREMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NO_INCREMENT);
    }
    if (null == this.C_MORE_SAMPLE_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_MORE_SAMPLE_NOTE);
    }
    if (null == this.C_STAGES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STAGES);
    }
    if (null == this.C_RETURN_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_RETURN_NOTE);
    }
    if (null == this.C_DISCARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DISCARD);
    }
    if (null == this.C_DISCARD_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DISCARD_DATE.getTime());
    __dataOut.writeInt(this.C_DISCARD_DATE.getNanos());
    }
    if (null == this.C_DISCARD_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DISCARD_BY);
    }
    if (null == this.C_TRAVEL_CALCULATED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TRAVEL_CALCULATED);
    }
    if (null == this.C_PHYSICAL_OBSERVATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PHYSICAL_OBSERVATION);
    }
    if (null == this.C_SENDER_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SENDER_NO);
    }
    if (null == this.C_REF_SENDER_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REF_SENDER_NO);
    }
    if (null == this.C_TESTLAB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TESTLAB);
    }
    if (null == this.C_PRIMARY_RESULT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRIMARY_RESULT);
    }
    if (null == this.C_PRIMARY_REPORT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRIMARY_REPORT_NO);
    }
    if (null == this.C_REF_RESULT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REF_RESULT);
    }
    if (null == this.C_REF_REPORT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REF_REPORT_NO);
    }
    if (null == this.C_DETERMINATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DETERMINATION);
    }
    if (null == this.C_EQUIPMENT_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EQUIPMENT_TYPE);
    }
    if (null == this.C_EQUIPMENT_CLASS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EQUIPMENT_CLASS);
    }
    if (null == this.C_CAPACITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CAPACITY);
    }
    if (null == this.C_NO_OF_MEASUREMENTS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NO_OF_MEASUREMENTS);
    }
    if (null == this.C_REQ_DATE_CALIB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_REQ_DATE_CALIB.getTime());
    __dataOut.writeInt(this.C_REQ_DATE_CALIB.getNanos());
    }
    if (null == this.C_CALIB_SITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CALIB_SITE);
    }
    if (null == this.C_CALIB_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CALIB_METHOD);
    }
    if (null == this.C_ASSET_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASSET_NAME);
    }
    if (null == this.C_MODEL_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MODEL_NO);
    }
    if (null == this.C_PURCHASE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_PURCHASE_DATE.getTime());
    __dataOut.writeInt(this.C_PURCHASE_DATE.getNanos());
    }
    if (null == this.C_PURCHASE_PRICE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_PURCHASE_PRICE, __dataOut);
    }
    if (null == this.C_DELIVERY_RECD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DELIVERY_RECD.getTime());
    __dataOut.writeInt(this.C_DELIVERY_RECD.getNanos());
    }
    if (null == this.C_DATE_OF_INSTALL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DATE_OF_INSTALL.getTime());
    __dataOut.writeInt(this.C_DATE_OF_INSTALL.getNanos());
    }
    if (null == this.C_TAG_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_TAG_NO);
    }
    if (null == this.C_SERIAL_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SERIAL_NO);
    }
    if (null == this.C_NO_OF_ACCESSORIES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_NO_OF_ACCESSORIES);
    }
    if (null == this.C_ACCESSORY_DETAIL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ACCESSORY_DETAIL);
    }
    if (null == this.C_ADDR_ROOM_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ADDR_ROOM_NO);
    }
    if (null == this.C_WARRANTY_EXP_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_WARRANTY_EXP_DATE.getTime());
    __dataOut.writeInt(this.C_WARRANTY_EXP_DATE.getNanos());
    }
    if (null == this.C_UNDER_CONTRACT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_UNDER_CONTRACT);
    }
    if (null == this.C_CONTRACT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONTRACT_NO);
    }
    if (null == this.C_CONTRACT_COMP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONTRACT_COMP);
    }
    if (null == this.C_CONTRACT_START) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CONTRACT_START.getTime());
    __dataOut.writeInt(this.C_CONTRACT_START.getNanos());
    }
    if (null == this.C_CONTRACT_END) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CONTRACT_END.getTime());
    __dataOut.writeInt(this.C_CONTRACT_END.getNanos());
    }
    if (null == this.C_CALIB_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CALIB_TYPE);
    }
    if (null == this.C_AGE_GROUP_LABEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_AGE_GROUP_LABEL);
    }
    if (null == this.C_AGE_GROUP_TEST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_AGE_GROUP_TEST);
    }
    if (null == this.C_TOYS_DIMENSION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TOYS_DIMENSION);
    }
    if (null == this.C_TOYS_FEATURES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TOYS_FEATURES);
    }
    if (null == this.C_TOYS_LABEL_DETAILS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TOYS_LABEL_DETAILS);
    }
    if (null == this.C_TEXTILE_CLASS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TEXTILE_CLASS);
    }
    if (null == this.C_TEXTILE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TEXTILE_TYPE);
    }
    if (null == this.C_MONTAJI_REGISTERED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MONTAJI_REGISTERED);
    }
    if (null == this.C_MONTAJI_REF) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MONTAJI_REF);
    }
    if (null == this.C_SEALING_PACK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SEALING_PACK);
    }
    if (null == this.C_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TYPE);
    }
    if (null == this.C_FORM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FORM);
    }
    if (null == this.C_FORM_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FORM_TYPE);
    }
    if (null == this.C_FINENESS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FINENESS);
    }
    if (null == this.C_SHAPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SHAPE);
    }
    if (null == this.C_LABORATORY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LABORATORY);
    }
    if (null == this.C_CEMARK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CEMARK);
    }
    if (null == this.C_AGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_AGE);
    }
    if (null == this.C_GENDER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_GENDER);
    }
    if (null == this.C_OWNER_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_OWNER_NAME);
    }
    if (null == this.C_CONSIGNMENT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONSIGNMENT_NO);
    }
    if (null == this.C_SAMPLE_ORIGIN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_ORIGIN);
    }
    if (null == this.C_MEAT_REQ_TYP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MEAT_REQ_TYP);
    }
    if (null == this.C_PURPOSE_TEST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PURPOSE_TEST);
    }
    if (null == this.C_COLL_CLARITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_CLARITY);
    }
    if (null == this.C_COLL_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_DESC);
    }
    if (null == this.C_COLL_ISCOLLSAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_ISCOLLSAMPLE);
    }
    if (null == this.C_COLL_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_NAME);
    }
    if (null == this.C_COLL_EMIRATEID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_EMIRATEID);
    }
    if (null == this.C_DCL_USERID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DCL_USERID);
    }
    if (null == this.C_FAILURE_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FAILURE_DESC);
    }
    if (null == this.C_FAILURE_COMP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FAILURE_COMP);
    }
    if (null == this.C_WORK_FAIL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_WORK_FAIL);
    }
    if (null == this.C_PURCHASE_REF) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PURCHASE_REF);
    }
    if (null == this.C_PURCHASE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PURCHASE_TYPE);
    }
    if (null == this.C_PEARL_FIELD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PEARL_FIELD);
    }
    if (null == this.C_POBOX) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_POBOX);
    }
    if (null == this.C_PRODUCT_DILUENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_DILUENT);
    }
    if (null == this.C_ACTIVE_SUBSTANCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ACTIVE_SUBSTANCE);
    }
    if (null == this.C_EDIT_ASSET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EDIT_ASSET);
    }
    if (null == this.C_PH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_PH, __dataOut);
    }
    if (null == this.C_NATUREOFACTIVITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NATUREOFACTIVITY);
    }
    if (null == this.C_CHLORINELEVEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_CHLORINELEVEL, __dataOut);
    }
    if (null == this.C_RISK_ASSESSMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_RISK_ASSESSMENT);
    }
    if (null == this.C_SPECIMEN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SPECIMEN);
    }
  }
  public void write0(DataOutput __dataOut) throws IOException {
    if (null == this.SAMPLE_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.SAMPLE_NUMBER);
    }
    if (null == this.TEXT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEXT_ID);
    }
    if (null == this.STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STATUS);
    }
    if (null == this.OLD_STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OLD_STATUS);
    }
    if (null == this.DISP_FLDS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, DISP_FLDS);
    }
    if (null == this.LABEL_MASK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LABEL_MASK);
    }
    if (null == this.IN_SPEC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IN_SPEC);
    }
    if (null == this.IN_CAL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IN_CAL);
    }
    if (null == this.CHANGED_ON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.CHANGED_ON.getTime());
    __dataOut.writeInt(this.CHANGED_ON.getNanos());
    }
    if (null == this.RE_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RE_SAMPLE);
    }
    if (null == this.ALIQUOT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALIQUOT);
    }
    if (null == this.ORIGINAL_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.ORIGINAL_SAMPLE);
    }
    if (null == this.PARENT_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PARENT_SAMPLE);
    }
    if (null == this.PARENT_ALIQUOT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PARENT_ALIQUOT);
    }
    if (null == this.ALIQUOT_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALIQUOT_GROUP);
    }
    if (null == this.SAMPLE_VOLUME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeFloat(this.SAMPLE_VOLUME);
    }
    if (null == this.SAMPLE_UNITS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLE_UNITS);
    }
    if (null == this.LOGIN_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.LOGIN_DATE.getTime());
    __dataOut.writeInt(this.LOGIN_DATE.getNanos());
    }
    if (null == this.LOGIN_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LOGIN_BY);
    }
    if (null == this.SAMPLED_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.SAMPLED_DATE.getTime());
    __dataOut.writeInt(this.SAMPLED_DATE.getNanos());
    }
    if (null == this.RECD_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.RECD_DATE.getTime());
    __dataOut.writeInt(this.RECD_DATE.getNanos());
    }
    if (null == this.RECEIVED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RECEIVED_BY);
    }
    if (null == this.DATE_STARTED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DATE_STARTED.getTime());
    __dataOut.writeInt(this.DATE_STARTED.getNanos());
    }
    if (null == this.STARTED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STARTED);
    }
    if (null == this.ASSIGNED_OPERATOR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ASSIGNED_OPERATOR);
    }
    if (null == this.DUE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DUE_DATE.getTime());
    __dataOut.writeInt(this.DUE_DATE.getNanos());
    }
    if (null == this.DATE_COMPLETED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DATE_COMPLETED.getTime());
    __dataOut.writeInt(this.DATE_COMPLETED.getNanos());
    }
    if (null == this.DATE_REVIEWED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.DATE_REVIEWED.getTime());
    __dataOut.writeInt(this.DATE_REVIEWED.getNanos());
    }
    if (null == this.PREP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PREP);
    }
    if (null == this.PREP_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.PREP_DATE.getTime());
    __dataOut.writeInt(this.PREP_DATE.getNanos());
    }
    if (null == this.PREP_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PREP_BY);
    }
    if (null == this.REVIEWER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, REVIEWER);
    }
    if (null == this.REVIEW_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, REVIEW_NOTE);
    }
    if (null == this.PRODUCT_CODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRODUCT_CODE);
    }
    if (null == this.PRODUCT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRODUCT);
    }
    if (null == this.PRODUCT_VERSION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PRODUCT_VERSION);
    }
    if (null == this.PRODUCT_GRADE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRODUCT_GRADE);
    }
    if (null == this.SAMPLING_POINT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLING_POINT);
    }
    if (null == this.SAMPLE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLE_TYPE);
    }
    if (null == this.PROJECT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PROJECT);
    }
    if (null == this.BATCH_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BATCH_NAME);
    }
    if (null == this.BATCH_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BATCH_TEMPLATE);
    }
    if (null == this.STEP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STEP);
    }
    if (null == this.SAMPLE_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLE_NAME);
    }
    if (null == this.DESCRIPTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, DESCRIPTION);
    }
    if (null == this.PRIORITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PRIORITY);
    }
    if (null == this.LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LOCATION);
    }
    if (null == this.CUSTOMER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CUSTOMER);
    }
    if (null == this.TEST_LIST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEST_LIST);
    }
    if (null == this.TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEMPLATE);
    }
    if (null == this.RECIPIENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RECIPIENT);
    }
    if (null == this.STANDARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STANDARD);
    }
    if (null == this.EXT_LINK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, EXT_LINK);
    }
    if (null == this.CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CONDITION);
    }
    if (null == this.TIMEPOINT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TIMEPOINT);
    }
    if (null == this.LOT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.LOT);
    }
    if (null == this.BASE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.BASE_DATE.getTime());
    __dataOut.writeInt(this.BASE_DATE.getNanos());
    }
    if (null == this.AVAILABLE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.AVAILABLE_DATE.getTime());
    __dataOut.writeInt(this.AVAILABLE_DATE.getNanos());
    }
    if (null == this.REQUIRED_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.REQUIRED_DATE.getTime());
    __dataOut.writeInt(this.REQUIRED_DATE.getNanos());
    }
    if (null == this.TARGET_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.TARGET_DATE.getTime());
    __dataOut.writeInt(this.TARGET_DATE.getNanos());
    }
    if (null == this.PARTIAL_SPEC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PARTIAL_SPEC);
    }
    if (null == this.SPEC_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SPEC_TYPE);
    }
    if (null == this.STAGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STAGE);
    }
    if (null == this.PRIMARY_IN_SPEC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PRIMARY_IN_SPEC);
    }
    if (null == this.BATCH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BATCH);
    }
    if (null == this.CHARGE_CODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CHARGE_CODE);
    }
    if (null == this.FORMULATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, FORMULATION);
    }
    if (null == this.PROTOCOL_LEVEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PROTOCOL_LEVEL);
    }
    if (null == this.RELEASED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RELEASED);
    }
    if (null == this.RELEASED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, RELEASED_BY);
    }
    if (null == this.RELEASED_ON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.RELEASED_ON.getTime());
    __dataOut.writeInt(this.RELEASED_ON.getNanos());
    }
    if (null == this.IN_CONTROL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IN_CONTROL);
    }
    if (null == this.INVESTIGATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INVESTIGATION);
    }
    if (null == this.INVESTIGATED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INVESTIGATED);
    }
    if (null == this.APPROVED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, APPROVED);
    }
    if (null == this.APPROVAL_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, APPROVAL_GROUP);
    }
    if (null == this.READY_FOR_APPROVAL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, READY_FOR_APPROVAL);
    }
    if (null == this.APPROVAL_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.APPROVAL_ID);
    }
    if (null == this.APPROVAL_ROUTING) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, APPROVAL_ROUTING);
    }
    if (null == this.MODIFIED_RESULTS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, MODIFIED_RESULTS);
    }
    if (null == this.REPORT_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.REPORT_NUMBER);
    }
    if (null == this.COMPOSITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, COMPOSITE);
    }
    if (null == this.PARENT_COMPOSITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PARENT_COMPOSITE);
    }
    if (null == this.COMPOSITE_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, COMPOSITE_TEMPLATE);
    }
    if (null == this.SEASON_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.SEASON_DATE.getTime());
    __dataOut.writeInt(this.SEASON_DATE.getNanos());
    }
    if (null == this.PEOPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.PEOPLE);
    }
    if (null == this.TEST_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, TEST_LOCATION);
    }
    if (null == this.OWNER_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OWNER_LOCATION);
    }
    if (null == this.CHK_ALIQUOT_STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CHK_ALIQUOT_STATUS);
    }
    if (null == this.CHK_ALIQUOT_SPECS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CHK_ALIQUOT_SPECS);
    }
    if (null == this.ALIQUOT_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALIQUOT_TEMPLATE);
    }
    if (null == this.CALC_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CALC_GROUP);
    }
    if (null == this.SAMPLE_EVENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.SAMPLE_EVENT);
    }
    if (null == this.LABEL_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LABEL_ID);
    }
    if (null == this.HAS_FLAGS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, HAS_FLAGS);
    }
    if (null == this.VARIATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, VARIATION);
    }
    if (null == this.SAMPLED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLED_BY);
    }
    if (null == this.SAMPLED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAMPLED);
    }
    if (null == this.ORDER_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ORDER_NUM);
    }
    if (null == this.LAST_ORDER_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LAST_ORDER_NUM);
    }
    if (null == this.STORAGE_CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STORAGE_CONDITION);
    }
    if (null == this.CONTAINER_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CONTAINER_TYPE);
    }
    if (null == this.NUM_CONTAINERS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.NUM_CONTAINERS);
    }
    if (null == this.IMPORTANT_MESSAGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IMPORTANT_MESSAGE);
    }
    if (null == this.OBSERVATIONS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OBSERVATIONS);
    }
    if (null == this.LAB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LAB);
    }
    if (null == this.EXPIRATION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.EXPIRATION_DATE.getTime());
    __dataOut.writeInt(this.EXPIRATION_DATE.getNanos());
    }
    if (null == this.REQD_VOLUME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeFloat(this.REQD_VOLUME);
    }
    if (null == this.COLLECTION_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, COLLECTION_METHOD);
    }
    if (null == this.COLLECTION_OFFSET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.COLLECTION_OFFSET);
    }
    if (null == this.SIGNED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SIGNED);
    }
    if (null == this.CASE_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CASE_NAME);
    }
    if (null == this.CONTRACT_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.CONTRACT_NUMBER);
    }
    if (null == this.BILLING_ITEM_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, BILLING_ITEM_DESC);
    }
    if (null == this.INTERPRETED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INTERPRETED);
    }
    if (null == this.INTERP_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INTERP_TYPE);
    }
    if (null == this.INSPECT_PNT_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.INSPECT_PNT_NUM);
    }
    if (null == this.INSPECTION_LOT_NUM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INSPECTION_LOT_NUM);
    }
    if (null == this.IS_INSPECT_PNT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, IS_INSPECT_PNT);
    }
    if (null == this.PLANT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PLANT);
    }
    if (null == this.USERC1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERC1_VALUE);
    }
    if (null == this.USERC2_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERC2_VALUE);
    }
    if (null == this.USERD1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERD1_VALUE);
    }
    if (null == this.USERN1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERN1_VALUE);
    }
    if (null == this.USERN2_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERN2_VALUE);
    }
    if (null == this.USERT1_VALUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, USERT1_VALUE);
    }
    if (null == this.SAP_SELECTED_SET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SELECTED_SET);
    }
    if (null == this.SAP_CODE_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_CODE_GROUP);
    }
    if (null == this.SAP_SAMPLE_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SAMPLE_NUMBER);
    }
    if (null == this.SAP_SS_PLANT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SS_PLANT);
    }
    if (null == this.SAP_SAMPLE_COUNT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SAP_SAMPLE_COUNT);
    }
    if (null == this.OPERATION_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OPERATION_NUMBER);
    }
    if (null == this.STORAGE_LOC_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.STORAGE_LOC_NO);
    }
    if (null == this.EXTERNAL_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, EXTERNAL_LOCATION);
    }
    if (null == this.FORMULATION_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, FORMULATION_NAME);
    }
    if (null == this.STANDARD_REAGENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STANDARD_REAGENT);
    }
    if (null == this.CONVERSION_GROUPS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, CONVERSION_GROUPS);
    }
    if (null == this.REPORTED_RSLT_OOS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, REPORTED_RSLT_OOS);
    }
    if (null == this.GROUP_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, GROUP_NAME);
    }
    if (null == this.PROCESS_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PROCESS_UNIT);
    }
    if (null == this.HAZARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, HAZARD);
    }
    if (null == this.INSTRUMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, INSTRUMENT);
    }
    if (null == this.T_SITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SITE);
    }
    if (null == this.T_PLANT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PLANT);
    }
    if (null == this.T_CERTIFICATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_CERTIFICATE);
    }
    if (null == this.T_CONTAINER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_CONTAINER);
    }
    if (null == this.T_OVERDUE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_OVERDUE);
    }
    if (null == this.T_PO_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PO_NUMBER);
    }
    if (null == this.T_PRODUCTION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_PRODUCTION_DATE.getTime());
    __dataOut.writeInt(this.T_PRODUCTION_DATE.getNanos());
    }
    if (null == this.T_REPORT_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_REPORT_DATE.getTime());
    __dataOut.writeInt(this.T_REPORT_DATE.getNanos());
    }
    if (null == this.T_REQUESTED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_REQUESTED_BY);
    }
    if (null == this.T_LONG_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_LONG_NOTE);
    }
    if (null == this.T_SHIFT_CODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SHIFT_CODE);
    }
    if (null == this.T_SUPP_BATCH_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SUPP_BATCH_NO);
    }
    if (null == this.T_SUPPLIER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SUPPLIER);
    }
    if (null == this.T_TRUCK_VESSEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_TRUCK_VESSEL);
    }
    if (null == this.T_PLANT_RECV_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PLANT_RECV_BY);
    }
    if (null == this.T_PLANT_RECV_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_PLANT_RECV_DATE.getTime());
    __dataOut.writeInt(this.T_PLANT_RECV_DATE.getNanos());
    }
    if (null == this.C_PRIORITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRIORITY);
    }
    if (null == this.STORAGE_TEMPLATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, STORAGE_TEMPLATE);
    }
    if (null == this.ALLOW_CHLD_ALQTS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ALLOW_CHLD_ALQTS);
    }
    if (null == this.PHASE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, PHASE);
    }
    if (null == this.SCHEDULE_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.SCHEDULE_NUMBER);
    }
    if (null == this.T_ACTION_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_ACTION_NUMBER);
    }
    if (null == this.T_BATCH_NAME1) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME1);
    }
    if (null == this.T_BATCH_NAME2) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME2);
    }
    if (null == this.T_BATCH_NAME3) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME3);
    }
    if (null == this.T_BATCH_NAME4) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME4);
    }
    if (null == this.T_BATCH_NAME5) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME5);
    }
    if (null == this.T_BATCH_NAME6) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_BATCH_NAME6);
    }
    if (null == this.T_COLLECT_SCHEME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_COLLECT_SCHEME);
    }
    if (null == this.T_COMPOSITE_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_COMPOSITE_GROUP);
    }
    if (null == this.T_DISTRIBUTION_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_DISTRIBUTION_BY);
    }
    if (null == this.T_DISTRIBUTION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_DISTRIBUTION_DATE.getTime());
    __dataOut.writeInt(this.T_DISTRIBUTION_DATE.getNanos());
    }
    if (null == this.T_EM_PLAN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_EM_PLAN);
    }
    if (null == this.T_INCUB1_BATCH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_INCUB1_BATCH);
    }
    if (null == this.T_INCUB1_END) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB1_END.getTime());
    __dataOut.writeInt(this.T_INCUB1_END.getNanos());
    }
    if (null == this.T_INCUB1_START) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB1_START.getTime());
    __dataOut.writeInt(this.T_INCUB1_START.getNanos());
    }
    if (null == this.T_INCUB2_BATCH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_INCUB2_BATCH);
    }
    if (null == this.T_INCUB2_END) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB2_END.getTime());
    __dataOut.writeInt(this.T_INCUB2_END.getNanos());
    }
    if (null == this.T_INCUB2_START) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.T_INCUB2_START.getTime());
    __dataOut.writeInt(this.T_INCUB2_START.getNanos());
    }
    if (null == this.T_MEDIA_REFERENCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_MEDIA_REFERENCE);
    }
    if (null == this.T_ORIGINAL_SAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.T_ORIGINAL_SAMPLE);
    }
    if (null == this.T_PERSONNEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PERSONNEL);
    }
    if (null == this.T_PERSONNEL_SET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_PERSONNEL_SET);
    }
    if (null == this.T_SAMPLE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SAMPLE_TYPE);
    }
    if (null == this.T_SCHEDULE_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SCHEDULE_GROUP);
    }
    if (null == this.T_SUITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_SUITE);
    }
    if (null == this.T_TRANSIT_LOCATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_TRANSIT_LOCATION);
    }
    if (null == this.T_VALIDATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, T_VALIDATION);
    }
    if (null == this.C_REFERENCE_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REFERENCE_ID);
    }
    if (null == this.C_SAMPLING_REASON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_REASON);
    }
    if (null == this.C_CUSTOMER_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CUSTOMER_TYPE);
    }
    if (null == this.C_REQUEST_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQUEST_TYPE);
    }
    if (null == this.C_OTHER_SAMPLE_SOURCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_OTHER_SAMPLE_SOURCE);
    }
    if (null == this.C_CUST_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CUST_ID);
    }
    if (null == this.C_CLIENT_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CLIENT_TYPE);
    }
    if (null == this.C_REQ_SAMP_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SAMP_TYPE);
    }
    if (null == this.C_SAMPLE_SOURCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_SOURCE);
    }
    if (null == this.C_DM_BARCODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DM_BARCODE);
    }
    if (null == this.C_REQ_EXT_REFERENCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_EXT_REFERENCE);
    }
    if (null == this.C_EXPRESS_SERVICE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EXPRESS_SERVICE);
    }
    if (null == this.C_HARDCOPY_REQUIRED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_HARDCOPY_REQUIRED);
    }
    if (null == this.C_REQ_REMARKS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_REMARKS);
    }
    if (null == this.C_REQ_COPIES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_REQ_COPIES);
    }
    if (null == this.C_REQ_EDIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_EDIT);
    }
    if (null == this.C_TOTAL_SERVICE_FEE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_TOTAL_SERVICE_FEE, __dataOut);
    }
    if (null == this.C_PRODUCT_GROUP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_GROUP);
    }
    if (null == this.C_PRODUCT_CATEGORY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_CATEGORY);
    }
    if (null == this.C_PRODUCTION_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_PRODUCTION_DATE.getTime());
    __dataOut.writeInt(this.C_PRODUCTION_DATE.getNanos());
    }
    if (null == this.C_NO_OF_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_NO_OF_UNIT);
    }
    if (null == this.C_SAMPLE_CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_CONDITION);
    }
    if (null == this.C_TEMP_REC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeFloat(this.C_TEMP_REC);
    }
    if (null == this.C_POINT_OF_SAMPLING) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_POINT_OF_SAMPLING);
    }
    if (null == this.C_REQ_SAMP_COLLECTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SAMP_COLLECTION);
    }
    if (null == this.C_REQ_SAMP_BAL_RETURN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SAMP_BAL_RETURN);
    }
    if (null == this.C_HAZARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_HAZARD);
    }
    if (null == this.C_BATCH_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BATCH_NO);
    }
    if (null == this.C_REQUEST_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQUEST_NO);
    }
    if (null == this.C_BILLING_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BILLING_TYPE);
    }
    if (null == this.C_TOTAL_TEST_CHARGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_TOTAL_TEST_CHARGE, __dataOut);
    }
    if (null == this.C_VOUCHER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_VOUCHER);
    }
    if (null == this.C_ERAD_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ERAD_NO);
    }
    if (null == this.C_RECEIPT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_RECEIPT);
    }
    if (null == this.C_PAYMENT_DT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_PAYMENT_DT.getTime());
    __dataOut.writeInt(this.C_PAYMENT_DT.getNanos());
    }
    if (null == this.C_PAYMENT_SRC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PAYMENT_SRC);
    }
    if (null == this.C_PAYMENT_STATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PAYMENT_STATUS);
    }
    if (null == this.C_CUST_DELIVERY_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CUST_DELIVERY_DATE.getTime());
    __dataOut.writeInt(this.C_CUST_DELIVERY_DATE.getNanos());
    }
    if (null == this.C_SAMPLE_OPINION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_OPINION);
    }
    if (null == this.C_SUBCAT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SUBCAT_ID);
    }
    if (null == this.C_PRODCAT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_PRODCAT_ID);
    }
    if (null == this.C_PROD_GROUP_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_PROD_GROUP_ID);
    }
    if (null == this.C_MSG_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MSG_ID);
    }
    if (null == this.C_MSG_DIGEST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MSG_DIGEST);
    }
    if (null == this.C_REQ_SOURCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REQ_SOURCE);
    }
    if (null == this.C_ITEM_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_ITEM_ID);
    }
    if (null == this.C_SRC_REQ_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SRC_REQ_ID);
    }
    if (null == this.C_EXPECTED_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_EXPECTED_DATE.getTime());
    __dataOut.writeInt(this.C_EXPECTED_DATE.getNanos());
    }
    if (null == this.C_PRODUCT_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_DESC);
    }
    if (null == this.C_DATE_ONHOLD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DATE_ONHOLD.getTime());
    __dataOut.writeInt(this.C_DATE_ONHOLD.getNanos());
    }
    if (null == this.C_DATE_OFFHOLD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DATE_OFFHOLD.getTime());
    __dataOut.writeInt(this.C_DATE_OFFHOLD.getNanos());
    }
    if (null == this.C_ONHOLD_REASON) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ONHOLD_REASON);
    }
    if (null == this.LATITUDE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LATITUDE);
    }
    if (null == this.LONGITUDE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, LONGITUDE);
    }
    if (null == this.C_ON_SITE_PRESERVATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ON_SITE_PRESERVATION);
    }
    if (null == this.C_PRESERVATION_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRESERVATION_METHOD);
    }
    if (null == this.C_SAMPLING_PROCEDURE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_PROCEDURE);
    }
    if (null == this.C_SAMPLING_APPARATUS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_APPARATUS);
    }
    if (null == this.C_APPEARANCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_APPEARANCE);
    }
    if (null == this.C_COLOUR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLOUR);
    }
    if (null == this.C_ODOUR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ODOUR);
    }
    if (null == this.C_SAMPLING_COLLECTION_LOC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_COLLECTION_LOC);
    }
    if (null == this.C_REPORT_ID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REPORT_ID);
    }
    if (null == this.C_DELIVERED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DELIVERED_BY);
    }
    if (null == this.C_MAKANI_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MAKANI_NO);
    }
    if (null == this.C_COUNTRY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COUNTRY);
    }
    if (null == this.C_BUILDING_FLOOR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BUILDING_FLOOR);
    }
    if (null == this.C_LOCATION_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LOCATION_DESC);
    }
    if (null == this.C_ITEM_BARCODE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ITEM_BARCODE);
    }
    if (null == this.C_ITEM_BRAND) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ITEM_BRAND);
    }
    if (null == this.C_MANUFACTURER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MANUFACTURER);
    }
    if (null == this.C_COUNTRY_ORIGIN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COUNTRY_ORIGIN);
    }
    if (null == this.C_ITEM_TRADE_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ITEM_TRADE_NAME);
    }
    if (null == this.C_PROCESS_ONE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PROCESS_ONE);
    }
    if (null == this.C_PROCESS_TWO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PROCESS_TWO);
    }
    if (null == this.C_SHELF_LIFE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SHELF_LIFE);
    }
    if (null == this.C_SHELF_LIFE_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SHELF_LIFE_UNIT);
    }
    if (null == this.C_STORAGE_CONDITION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STORAGE_CONDITION);
    }
    if (null == this.C_WEIGHT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_WEIGHT);
    }
    if (null == this.C_WEIGHT_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_WEIGHT_UNIT);
    }
    if (null == this.C_PACKAGING_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PACKAGING_TYPE);
    }
    if (null == this.C_TEST_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TEST_TYPE);
    }
    if (null == this.C_EXTERNAL_REFERENCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EXTERNAL_REFERENCE);
    }
    if (null == this.C_NOMINAL_SIZE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NOMINAL_SIZE);
    }
    if (null == this.C_LAYER_MIX_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LAYER_MIX_TYPE);
    }
    if (null == this.C_SAMPLE_UNIT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_UNIT);
    }
    if (null == this.C_SAMP_QNTY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SAMP_QNTY);
    }
    if (null == this.C_SAMPLED_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLED_BY);
    }
    if (null == this.C_BITUMEN_LOCALSUPPLIER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BITUMEN_LOCALSUPPLIER);
    }
    if (null == this.C_BLOCK_TOTALBUNDLES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_TOTALBUNDLES);
    }
    if (null == this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX);
    }
    if (null == this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY);
    }
    if (null == this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ);
    }
    if (null == this.C_BLOCK_BLOCKSPERBUNDLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_BLOCKSPERBUNDLE);
    }
    if (null == this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BLOCK_RELATEDCERTIFICATIONREQUESTID);
    }
    if (null == this.C_MORTAR_WATERORCEMENTRATIO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MORTAR_WATERORCEMENTRATIO);
    }
    if (null == this.C_MORTAR_TYPEOFMORTAR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MORTAR_TYPEOFMORTAR);
    }
    if (null == this.C_THERMALINSULATION_NOMTHICKNESS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_NOMTHICKNESS);
    }
    if (null == this.C_THERMALINSULATION_NOMDENSITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_NOMDENSITY);
    }
    if (null == this.C_THERMALINSULATION_NOMDIAMETER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_NOMDIAMETER);
    }
    if (null == this.C_THERMALINSULATION_FACINGTYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_FACINGTYPE);
    }
    if (null == this.C_THERMALINSULATION_FACINGDESCRIPTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_FACINGDESCRIPTION);
    }
    if (null == this.C_THERMALINSULATION_TESTTEMPORHUMIDITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_TESTTEMPORHUMIDITY);
    }
    if (null == this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY);
    }
    if (null == this.C_THERMALINSULATION_AGEOFSAMPLEDAYS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_THERMALINSULATION_AGEOFSAMPLEDAYS);
    }
    if (null == this.C_LUBEOIL_VISCOSITYGRADE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LUBEOIL_VISCOSITYGRADE);
    }
    if (null == this.C_ASPHALT_REFGMB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGMB);
    }
    if (null == this.C_ASPHALT_REFGSB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGSB);
    }
    if (null == this.C_ASPHALT_REFGSE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGSE);
    }
    if (null == this.C_ASPHALT_REFGB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFGB);
    }
    if (null == this.C_ASPHALT_LAYINGDATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_ASPHALT_LAYINGDATE.getTime());
    __dataOut.writeInt(this.C_ASPHALT_LAYINGDATE.getNanos());
    }
    if (null == this.C_ASPHALT_REFMARSHALLREQNO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFMARSHALLREQNO);
    }
    if (null == this.C_ASPHALT_REFBITUMENREQNO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFBITUMENREQNO);
    }
    if (null == this.C_ASPHALT_REFMIX) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_REFMIX);
    }
    if (null == this.C_ASPHALT_CALIBRATIONFACTOR) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_CALIBRATIONFACTOR);
    }
    if (null == this.C_ASPHALT_GRADINGORBITUMENSPECS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_GRADINGORBITUMENSPECS);
    }
    if (null == this.C_ASPHALT_OTHERSPECS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASPHALT_OTHERSPECS);
    }
    if (null == this.C_CEMENT_CLASSOFCEMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CEMENT_CLASSOFCEMENT);
    }
    if (null == this.C_CONCRETE_GRADEOFCONCRETE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_GRADEOFCONCRETE);
    }
    if (null == this.C_CONCRETE_CEMENTCONTENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_CEMENTCONTENT);
    }
    if (null == this.C_CONCRETE_TESTINGAGEOFSAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_TESTINGAGEOFSAMPLE);
    }
    if (null == this.C_CONCRETE_ESTIMATEDTESTDATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CONCRETE_ESTIMATEDTESTDATE.getTime());
    __dataOut.writeInt(this.C_CONCRETE_ESTIMATEDTESTDATE.getNanos());
    }
    if (null == this.C_CONCRETE_TRUCKNUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_TRUCKNUMBER);
    }
    if (null == this.C_CONCRETE_PLACEOFMAKINGCUBES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_PLACEOFMAKINGCUBES);
    }
    if (null == this.C_CONCRETE_EQUIPMENTTYPEUSED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_EQUIPMENTTYPEUSED);
    }
    if (null == this.C_CONCRETE_CURINGORSTORAGECONDITIONS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_CURINGORSTORAGECONDITIONS);
    }
    if (null == this.C_CONCRETE_METHODOFCOMPACTION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_METHODOFCOMPACTION);
    }
    if (null == this.C_CONCRETE_CONDITIONOFSAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONCRETE_CONDITIONOFSAMPLE);
    }
    if (null == this.C_FRESHCONCRETE_CEMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_CEMENT);
    }
    if (null == this.C_FRESHCONCRETE_CEMENTTYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_CEMENTTYPE);
    }
    if (null == this.C_FRESHCONCRETE_ADMIXTURE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_ADMIXTURE);
    }
    if (null == this.C_FRESHCONCRETE_ADMIXTURETYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_ADMIXTURETYPE);
    }
    if (null == this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE);
    }
    if (null == this.C_FRESHCONCRETE_AGGREGATE_20MM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_AGGREGATE_20MM);
    }
    if (null == this.C_FRESHCONCRETE_AGGREGATE_10MM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_AGGREGATE_10MM);
    }
    if (null == this.C_FRESHCONCRETE_AGGREGATE_1MM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_AGGREGATE_1MM);
    }
    if (null == this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FRESHCONCRETE_CONCRETE_CLASS_GRADE);
    }
    if (null == this.C_SOIL_MDD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_MDD);
    }
    if (null == this.C_SOIL_OMC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_OMC);
    }
    if (null == this.C_SOIL_MDD_OMC_REF) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_MDD_OMC_REF);
    }
    if (null == this.C_SOIL_BFRL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_BFRL);
    }
    if (null == this.C_SOIL_LAYER_THICKNESSMM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_LAYER_THICKNESSMM);
    }
    if (null == this.C_SOIL_SOURCE_MINERAL_AGG) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SOIL_SOURCE_MINERAL_AGG);
    }
    if (null == this.C_STEEL_MANUFACTURER_CERT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_MANUFACTURER_CERT_NO);
    }
    if (null == this.C_STEEL_GRADE_STEEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_GRADE_STEEL);
    }
    if (null == this.C_STEEL_LOCAL_SUPPLIER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_LOCAL_SUPPLIER);
    }
    if (null == this.C_STEEL_HEAT_NUMBER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STEEL_HEAT_NUMBER);
    }
    if (null == this.C_PRODUCT_TEST_SERV) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_TEST_SERV);
    }
    if (null == this.C_SAMPLING_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLING_METHOD);
    }
    if (null == this.C_SAMPLE_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_DESC);
    }
    if (null == this.C_BATCH_SIZE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_BATCH_SIZE);
    }
    if (null == this.C_UNITNO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_UNITNO);
    }
    if (null == this.C_UNITSIZE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_UNITSIZE);
    }
    if (null == this.C_NO_INCREMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NO_INCREMENT);
    }
    if (null == this.C_MORE_SAMPLE_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_MORE_SAMPLE_NOTE);
    }
    if (null == this.C_STAGES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_STAGES);
    }
    if (null == this.C_RETURN_NOTE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_RETURN_NOTE);
    }
    if (null == this.C_DISCARD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DISCARD);
    }
    if (null == this.C_DISCARD_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DISCARD_DATE.getTime());
    __dataOut.writeInt(this.C_DISCARD_DATE.getNanos());
    }
    if (null == this.C_DISCARD_BY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DISCARD_BY);
    }
    if (null == this.C_TRAVEL_CALCULATED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TRAVEL_CALCULATED);
    }
    if (null == this.C_PHYSICAL_OBSERVATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PHYSICAL_OBSERVATION);
    }
    if (null == this.C_SENDER_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SENDER_NO);
    }
    if (null == this.C_REF_SENDER_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REF_SENDER_NO);
    }
    if (null == this.C_TESTLAB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TESTLAB);
    }
    if (null == this.C_PRIMARY_RESULT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRIMARY_RESULT);
    }
    if (null == this.C_PRIMARY_REPORT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRIMARY_REPORT_NO);
    }
    if (null == this.C_REF_RESULT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REF_RESULT);
    }
    if (null == this.C_REF_REPORT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_REF_REPORT_NO);
    }
    if (null == this.C_DETERMINATION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DETERMINATION);
    }
    if (null == this.C_EQUIPMENT_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EQUIPMENT_TYPE);
    }
    if (null == this.C_EQUIPMENT_CLASS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EQUIPMENT_CLASS);
    }
    if (null == this.C_CAPACITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CAPACITY);
    }
    if (null == this.C_NO_OF_MEASUREMENTS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NO_OF_MEASUREMENTS);
    }
    if (null == this.C_REQ_DATE_CALIB) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_REQ_DATE_CALIB.getTime());
    __dataOut.writeInt(this.C_REQ_DATE_CALIB.getNanos());
    }
    if (null == this.C_CALIB_SITE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CALIB_SITE);
    }
    if (null == this.C_CALIB_METHOD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CALIB_METHOD);
    }
    if (null == this.C_ASSET_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ASSET_NAME);
    }
    if (null == this.C_MODEL_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MODEL_NO);
    }
    if (null == this.C_PURCHASE_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_PURCHASE_DATE.getTime());
    __dataOut.writeInt(this.C_PURCHASE_DATE.getNanos());
    }
    if (null == this.C_PURCHASE_PRICE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_PURCHASE_PRICE, __dataOut);
    }
    if (null == this.C_DELIVERY_RECD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DELIVERY_RECD.getTime());
    __dataOut.writeInt(this.C_DELIVERY_RECD.getNanos());
    }
    if (null == this.C_DATE_OF_INSTALL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_DATE_OF_INSTALL.getTime());
    __dataOut.writeInt(this.C_DATE_OF_INSTALL.getNanos());
    }
    if (null == this.C_TAG_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_TAG_NO);
    }
    if (null == this.C_SERIAL_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SERIAL_NO);
    }
    if (null == this.C_NO_OF_ACCESSORIES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_NO_OF_ACCESSORIES);
    }
    if (null == this.C_ACCESSORY_DETAIL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ACCESSORY_DETAIL);
    }
    if (null == this.C_ADDR_ROOM_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ADDR_ROOM_NO);
    }
    if (null == this.C_WARRANTY_EXP_DATE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_WARRANTY_EXP_DATE.getTime());
    __dataOut.writeInt(this.C_WARRANTY_EXP_DATE.getNanos());
    }
    if (null == this.C_UNDER_CONTRACT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_UNDER_CONTRACT);
    }
    if (null == this.C_CONTRACT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONTRACT_NO);
    }
    if (null == this.C_CONTRACT_COMP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONTRACT_COMP);
    }
    if (null == this.C_CONTRACT_START) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CONTRACT_START.getTime());
    __dataOut.writeInt(this.C_CONTRACT_START.getNanos());
    }
    if (null == this.C_CONTRACT_END) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.C_CONTRACT_END.getTime());
    __dataOut.writeInt(this.C_CONTRACT_END.getNanos());
    }
    if (null == this.C_CALIB_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CALIB_TYPE);
    }
    if (null == this.C_AGE_GROUP_LABEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_AGE_GROUP_LABEL);
    }
    if (null == this.C_AGE_GROUP_TEST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_AGE_GROUP_TEST);
    }
    if (null == this.C_TOYS_DIMENSION) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TOYS_DIMENSION);
    }
    if (null == this.C_TOYS_FEATURES) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TOYS_FEATURES);
    }
    if (null == this.C_TOYS_LABEL_DETAILS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TOYS_LABEL_DETAILS);
    }
    if (null == this.C_TEXTILE_CLASS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TEXTILE_CLASS);
    }
    if (null == this.C_TEXTILE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TEXTILE_TYPE);
    }
    if (null == this.C_MONTAJI_REGISTERED) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MONTAJI_REGISTERED);
    }
    if (null == this.C_MONTAJI_REF) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MONTAJI_REF);
    }
    if (null == this.C_SEALING_PACK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SEALING_PACK);
    }
    if (null == this.C_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_TYPE);
    }
    if (null == this.C_FORM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FORM);
    }
    if (null == this.C_FORM_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FORM_TYPE);
    }
    if (null == this.C_FINENESS) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FINENESS);
    }
    if (null == this.C_SHAPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SHAPE);
    }
    if (null == this.C_LABORATORY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_LABORATORY);
    }
    if (null == this.C_CEMARK) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CEMARK);
    }
    if (null == this.C_AGE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_AGE);
    }
    if (null == this.C_GENDER) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_GENDER);
    }
    if (null == this.C_OWNER_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_OWNER_NAME);
    }
    if (null == this.C_CONSIGNMENT_NO) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_CONSIGNMENT_NO);
    }
    if (null == this.C_SAMPLE_ORIGIN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_SAMPLE_ORIGIN);
    }
    if (null == this.C_MEAT_REQ_TYP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_MEAT_REQ_TYP);
    }
    if (null == this.C_PURPOSE_TEST) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PURPOSE_TEST);
    }
    if (null == this.C_COLL_CLARITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_CLARITY);
    }
    if (null == this.C_COLL_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_DESC);
    }
    if (null == this.C_COLL_ISCOLLSAMPLE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_ISCOLLSAMPLE);
    }
    if (null == this.C_COLL_NAME) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_NAME);
    }
    if (null == this.C_COLL_EMIRATEID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_COLL_EMIRATEID);
    }
    if (null == this.C_DCL_USERID) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_DCL_USERID);
    }
    if (null == this.C_FAILURE_DESC) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FAILURE_DESC);
    }
    if (null == this.C_FAILURE_COMP) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_FAILURE_COMP);
    }
    if (null == this.C_WORK_FAIL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_WORK_FAIL);
    }
    if (null == this.C_PURCHASE_REF) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PURCHASE_REF);
    }
    if (null == this.C_PURCHASE_TYPE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PURCHASE_TYPE);
    }
    if (null == this.C_PEARL_FIELD) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PEARL_FIELD);
    }
    if (null == this.C_POBOX) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_POBOX);
    }
    if (null == this.C_PRODUCT_DILUENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_PRODUCT_DILUENT);
    }
    if (null == this.C_ACTIVE_SUBSTANCE) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_ACTIVE_SUBSTANCE);
    }
    if (null == this.C_EDIT_ASSET) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_EDIT_ASSET);
    }
    if (null == this.C_PH) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_PH, __dataOut);
    }
    if (null == this.C_NATUREOFACTIVITY) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_NATUREOFACTIVITY);
    }
    if (null == this.C_CHLORINELEVEL) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    org.apache.sqoop.lib.BigDecimalSerializer.write(this.C_CHLORINELEVEL, __dataOut);
    }
    if (null == this.C_RISK_ASSESSMENT) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, C_RISK_ASSESSMENT);
    }
    if (null == this.C_SPECIMEN) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.C_SPECIMEN);
    }
  }
  private static final DelimiterSet __outputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);
  public String toString() {
    return toString(__outputDelimiters, true);
  }
  public String toString(DelimiterSet delimiters) {
    return toString(delimiters, true);
  }
  public String toString(boolean useRecordDelim) {
    return toString(__outputDelimiters, useRecordDelim);
  }
  public String toString(DelimiterSet delimiters, boolean useRecordDelim) {
    StringBuilder __sb = new StringBuilder();
    char fieldDelim = delimiters.getFieldsTerminatedBy();
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_NUMBER==null?"null":"" + SAMPLE_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEXT_ID==null?"null":TEXT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STATUS==null?"null":STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OLD_STATUS==null?"null":OLD_STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DISP_FLDS==null?"null":DISP_FLDS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LABEL_MASK==null?"null":LABEL_MASK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IN_SPEC==null?"null":IN_SPEC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IN_CAL==null?"null":IN_CAL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHANGED_ON==null?"null":"" + CHANGED_ON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RE_SAMPLE==null?"null":RE_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALIQUOT==null?"null":ALIQUOT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ORIGINAL_SAMPLE==null?"null":"" + ORIGINAL_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARENT_SAMPLE==null?"null":"" + PARENT_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARENT_ALIQUOT==null?"null":"" + PARENT_ALIQUOT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALIQUOT_GROUP==null?"null":ALIQUOT_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_VOLUME==null?"null":"" + SAMPLE_VOLUME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_UNITS==null?"null":SAMPLE_UNITS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOGIN_DATE==null?"null":"" + LOGIN_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOGIN_BY==null?"null":LOGIN_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLED_DATE==null?"null":"" + SAMPLED_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RECD_DATE==null?"null":"" + RECD_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RECEIVED_BY==null?"null":RECEIVED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DATE_STARTED==null?"null":"" + DATE_STARTED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STARTED==null?"null":STARTED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ASSIGNED_OPERATOR==null?"null":ASSIGNED_OPERATOR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DUE_DATE==null?"null":"" + DUE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DATE_COMPLETED==null?"null":"" + DATE_COMPLETED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DATE_REVIEWED==null?"null":"" + DATE_REVIEWED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PREP==null?"null":PREP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PREP_DATE==null?"null":"" + PREP_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PREP_BY==null?"null":PREP_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REVIEWER==null?"null":REVIEWER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REVIEW_NOTE==null?"null":REVIEW_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT_CODE==null?"null":PRODUCT_CODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT==null?"null":PRODUCT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT_VERSION==null?"null":"" + PRODUCT_VERSION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT_GRADE==null?"null":PRODUCT_GRADE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLING_POINT==null?"null":SAMPLING_POINT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_TYPE==null?"null":SAMPLE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PROJECT==null?"null":PROJECT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BATCH_NAME==null?"null":BATCH_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BATCH_TEMPLATE==null?"null":BATCH_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STEP==null?"null":STEP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_NAME==null?"null":SAMPLE_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DESCRIPTION==null?"null":DESCRIPTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRIORITY==null?"null":"" + PRIORITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOCATION==null?"null":LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CUSTOMER==null?"null":CUSTOMER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEST_LIST==null?"null":TEST_LIST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEMPLATE==null?"null":TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RECIPIENT==null?"null":RECIPIENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STANDARD==null?"null":STANDARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(EXT_LINK==null?"null":EXT_LINK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONDITION==null?"null":CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TIMEPOINT==null?"null":TIMEPOINT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOT==null?"null":"" + LOT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BASE_DATE==null?"null":"" + BASE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVAILABLE_DATE==null?"null":"" + AVAILABLE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REQUIRED_DATE==null?"null":"" + REQUIRED_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TARGET_DATE==null?"null":"" + TARGET_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARTIAL_SPEC==null?"null":PARTIAL_SPEC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SPEC_TYPE==null?"null":SPEC_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STAGE==null?"null":STAGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRIMARY_IN_SPEC==null?"null":PRIMARY_IN_SPEC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BATCH==null?"null":BATCH, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHARGE_CODE==null?"null":CHARGE_CODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(FORMULATION==null?"null":FORMULATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PROTOCOL_LEVEL==null?"null":PROTOCOL_LEVEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RELEASED==null?"null":RELEASED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RELEASED_BY==null?"null":RELEASED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RELEASED_ON==null?"null":"" + RELEASED_ON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IN_CONTROL==null?"null":IN_CONTROL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INVESTIGATION==null?"null":INVESTIGATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INVESTIGATED==null?"null":INVESTIGATED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVED==null?"null":APPROVED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVAL_GROUP==null?"null":APPROVAL_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(READY_FOR_APPROVAL==null?"null":READY_FOR_APPROVAL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVAL_ID==null?"null":"" + APPROVAL_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVAL_ROUTING==null?"null":APPROVAL_ROUTING, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(MODIFIED_RESULTS==null?"null":MODIFIED_RESULTS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REPORT_NUMBER==null?"null":"" + REPORT_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COMPOSITE==null?"null":COMPOSITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARENT_COMPOSITE==null?"null":"" + PARENT_COMPOSITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COMPOSITE_TEMPLATE==null?"null":COMPOSITE_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SEASON_DATE==null?"null":"" + SEASON_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PEOPLE==null?"null":"" + PEOPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEST_LOCATION==null?"null":TEST_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OWNER_LOCATION==null?"null":OWNER_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHK_ALIQUOT_STATUS==null?"null":CHK_ALIQUOT_STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHK_ALIQUOT_SPECS==null?"null":CHK_ALIQUOT_SPECS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALIQUOT_TEMPLATE==null?"null":ALIQUOT_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CALC_GROUP==null?"null":CALC_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_EVENT==null?"null":"" + SAMPLE_EVENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LABEL_ID==null?"null":LABEL_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HAS_FLAGS==null?"null":HAS_FLAGS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(VARIATION==null?"null":VARIATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLED_BY==null?"null":SAMPLED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLED==null?"null":SAMPLED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ORDER_NUM==null?"null":ORDER_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LAST_ORDER_NUM==null?"null":LAST_ORDER_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STORAGE_CONDITION==null?"null":STORAGE_CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONTAINER_TYPE==null?"null":CONTAINER_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(NUM_CONTAINERS==null?"null":"" + NUM_CONTAINERS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IMPORTANT_MESSAGE==null?"null":IMPORTANT_MESSAGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OBSERVATIONS==null?"null":OBSERVATIONS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LAB==null?"null":LAB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(EXPIRATION_DATE==null?"null":"" + EXPIRATION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REQD_VOLUME==null?"null":"" + REQD_VOLUME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COLLECTION_METHOD==null?"null":COLLECTION_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COLLECTION_OFFSET==null?"null":"" + COLLECTION_OFFSET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SIGNED==null?"null":SIGNED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CASE_NAME==null?"null":CASE_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONTRACT_NUMBER==null?"null":"" + CONTRACT_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BILLING_ITEM_DESC==null?"null":BILLING_ITEM_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INTERPRETED==null?"null":INTERPRETED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INTERP_TYPE==null?"null":INTERP_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INSPECT_PNT_NUM==null?"null":"" + INSPECT_PNT_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INSPECTION_LOT_NUM==null?"null":INSPECTION_LOT_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IS_INSPECT_PNT==null?"null":IS_INSPECT_PNT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PLANT==null?"null":PLANT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERC1_VALUE==null?"null":USERC1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERC2_VALUE==null?"null":USERC2_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERD1_VALUE==null?"null":USERD1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERN1_VALUE==null?"null":USERN1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERN2_VALUE==null?"null":USERN2_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERT1_VALUE==null?"null":USERT1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SELECTED_SET==null?"null":SAP_SELECTED_SET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_CODE_GROUP==null?"null":SAP_CODE_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SAMPLE_NUMBER==null?"null":SAP_SAMPLE_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SS_PLANT==null?"null":SAP_SS_PLANT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SAMPLE_COUNT==null?"null":SAP_SAMPLE_COUNT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OPERATION_NUMBER==null?"null":OPERATION_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STORAGE_LOC_NO==null?"null":"" + STORAGE_LOC_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(EXTERNAL_LOCATION==null?"null":EXTERNAL_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(FORMULATION_NAME==null?"null":FORMULATION_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STANDARD_REAGENT==null?"null":STANDARD_REAGENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONVERSION_GROUPS==null?"null":CONVERSION_GROUPS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REPORTED_RSLT_OOS==null?"null":REPORTED_RSLT_OOS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(GROUP_NAME==null?"null":GROUP_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PROCESS_UNIT==null?"null":PROCESS_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HAZARD==null?"null":HAZARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INSTRUMENT==null?"null":INSTRUMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SITE==null?"null":T_SITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PLANT==null?"null":T_PLANT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_CERTIFICATE==null?"null":T_CERTIFICATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_CONTAINER==null?"null":T_CONTAINER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_OVERDUE==null?"null":T_OVERDUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PO_NUMBER==null?"null":T_PO_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PRODUCTION_DATE==null?"null":"" + T_PRODUCTION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_REPORT_DATE==null?"null":"" + T_REPORT_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_REQUESTED_BY==null?"null":T_REQUESTED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_LONG_NOTE==null?"null":"" + T_LONG_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SHIFT_CODE==null?"null":T_SHIFT_CODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SUPP_BATCH_NO==null?"null":T_SUPP_BATCH_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SUPPLIER==null?"null":T_SUPPLIER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_TRUCK_VESSEL==null?"null":T_TRUCK_VESSEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PLANT_RECV_BY==null?"null":T_PLANT_RECV_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PLANT_RECV_DATE==null?"null":"" + T_PLANT_RECV_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRIORITY==null?"null":C_PRIORITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STORAGE_TEMPLATE==null?"null":STORAGE_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALLOW_CHLD_ALQTS==null?"null":ALLOW_CHLD_ALQTS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PHASE==null?"null":PHASE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SCHEDULE_NUMBER==null?"null":"" + SCHEDULE_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_ACTION_NUMBER==null?"null":"" + T_ACTION_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME1==null?"null":T_BATCH_NAME1, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME2==null?"null":T_BATCH_NAME2, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME3==null?"null":T_BATCH_NAME3, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME4==null?"null":T_BATCH_NAME4, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME5==null?"null":T_BATCH_NAME5, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME6==null?"null":T_BATCH_NAME6, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_COLLECT_SCHEME==null?"null":T_COLLECT_SCHEME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_COMPOSITE_GROUP==null?"null":T_COMPOSITE_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_DISTRIBUTION_BY==null?"null":T_DISTRIBUTION_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_DISTRIBUTION_DATE==null?"null":"" + T_DISTRIBUTION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_EM_PLAN==null?"null":"" + T_EM_PLAN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB1_BATCH==null?"null":T_INCUB1_BATCH, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB1_END==null?"null":"" + T_INCUB1_END, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB1_START==null?"null":"" + T_INCUB1_START, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB2_BATCH==null?"null":T_INCUB2_BATCH, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB2_END==null?"null":"" + T_INCUB2_END, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB2_START==null?"null":"" + T_INCUB2_START, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_MEDIA_REFERENCE==null?"null":T_MEDIA_REFERENCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_ORIGINAL_SAMPLE==null?"null":"" + T_ORIGINAL_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PERSONNEL==null?"null":T_PERSONNEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PERSONNEL_SET==null?"null":T_PERSONNEL_SET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SAMPLE_TYPE==null?"null":T_SAMPLE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SCHEDULE_GROUP==null?"null":T_SCHEDULE_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SUITE==null?"null":T_SUITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_TRANSIT_LOCATION==null?"null":T_TRANSIT_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_VALIDATION==null?"null":T_VALIDATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REFERENCE_ID==null?"null":C_REFERENCE_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_REASON==null?"null":C_SAMPLING_REASON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CUSTOMER_TYPE==null?"null":C_CUSTOMER_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQUEST_TYPE==null?"null":C_REQUEST_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_OTHER_SAMPLE_SOURCE==null?"null":C_OTHER_SAMPLE_SOURCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CUST_ID==null?"null":C_CUST_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CLIENT_TYPE==null?"null":C_CLIENT_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SAMP_TYPE==null?"null":C_REQ_SAMP_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_SOURCE==null?"null":C_SAMPLE_SOURCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DM_BARCODE==null?"null":C_DM_BARCODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_EXT_REFERENCE==null?"null":C_REQ_EXT_REFERENCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EXPRESS_SERVICE==null?"null":C_EXPRESS_SERVICE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_HARDCOPY_REQUIRED==null?"null":C_HARDCOPY_REQUIRED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_REMARKS==null?"null":C_REQ_REMARKS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_COPIES==null?"null":"" + C_REQ_COPIES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_EDIT==null?"null":C_REQ_EDIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOTAL_SERVICE_FEE==null?"null":C_TOTAL_SERVICE_FEE.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_GROUP==null?"null":C_PRODUCT_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_CATEGORY==null?"null":C_PRODUCT_CATEGORY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCTION_DATE==null?"null":"" + C_PRODUCTION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_OF_UNIT==null?"null":"" + C_NO_OF_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_CONDITION==null?"null":C_SAMPLE_CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEMP_REC==null?"null":"" + C_TEMP_REC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_POINT_OF_SAMPLING==null?"null":C_POINT_OF_SAMPLING, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SAMP_COLLECTION==null?"null":C_REQ_SAMP_COLLECTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SAMP_BAL_RETURN==null?"null":C_REQ_SAMP_BAL_RETURN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_HAZARD==null?"null":C_HAZARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BATCH_NO==null?"null":C_BATCH_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQUEST_NO==null?"null":C_REQUEST_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BILLING_TYPE==null?"null":C_BILLING_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOTAL_TEST_CHARGE==null?"null":C_TOTAL_TEST_CHARGE.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_VOUCHER==null?"null":C_VOUCHER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ERAD_NO==null?"null":C_ERAD_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_RECEIPT==null?"null":C_RECEIPT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PAYMENT_DT==null?"null":"" + C_PAYMENT_DT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PAYMENT_SRC==null?"null":C_PAYMENT_SRC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PAYMENT_STATUS==null?"null":C_PAYMENT_STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CUST_DELIVERY_DATE==null?"null":"" + C_CUST_DELIVERY_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_OPINION==null?"null":C_SAMPLE_OPINION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SUBCAT_ID==null?"null":"" + C_SUBCAT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODCAT_ID==null?"null":"" + C_PRODCAT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PROD_GROUP_ID==null?"null":"" + C_PROD_GROUP_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MSG_ID==null?"null":C_MSG_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MSG_DIGEST==null?"null":C_MSG_DIGEST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SOURCE==null?"null":C_REQ_SOURCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_ID==null?"null":"" + C_ITEM_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SRC_REQ_ID==null?"null":C_SRC_REQ_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EXPECTED_DATE==null?"null":"" + C_EXPECTED_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_DESC==null?"null":C_PRODUCT_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DATE_ONHOLD==null?"null":"" + C_DATE_ONHOLD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DATE_OFFHOLD==null?"null":"" + C_DATE_OFFHOLD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ONHOLD_REASON==null?"null":C_ONHOLD_REASON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LATITUDE==null?"null":LATITUDE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LONGITUDE==null?"null":LONGITUDE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ON_SITE_PRESERVATION==null?"null":C_ON_SITE_PRESERVATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRESERVATION_METHOD==null?"null":C_PRESERVATION_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_PROCEDURE==null?"null":C_SAMPLING_PROCEDURE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_APPARATUS==null?"null":C_SAMPLING_APPARATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_APPEARANCE==null?"null":C_APPEARANCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLOUR==null?"null":C_COLOUR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ODOUR==null?"null":C_ODOUR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_COLLECTION_LOC==null?"null":C_SAMPLING_COLLECTION_LOC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REPORT_ID==null?"null":C_REPORT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DELIVERED_BY==null?"null":C_DELIVERED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MAKANI_NO==null?"null":C_MAKANI_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COUNTRY==null?"null":C_COUNTRY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BUILDING_FLOOR==null?"null":C_BUILDING_FLOOR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LOCATION_DESC==null?"null":C_LOCATION_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_BARCODE==null?"null":C_ITEM_BARCODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_BRAND==null?"null":C_ITEM_BRAND, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MANUFACTURER==null?"null":C_MANUFACTURER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COUNTRY_ORIGIN==null?"null":C_COUNTRY_ORIGIN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_TRADE_NAME==null?"null":C_ITEM_TRADE_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PROCESS_ONE==null?"null":C_PROCESS_ONE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PROCESS_TWO==null?"null":C_PROCESS_TWO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SHELF_LIFE==null?"null":C_SHELF_LIFE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SHELF_LIFE_UNIT==null?"null":C_SHELF_LIFE_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STORAGE_CONDITION==null?"null":C_STORAGE_CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WEIGHT==null?"null":C_WEIGHT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WEIGHT_UNIT==null?"null":C_WEIGHT_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PACKAGING_TYPE==null?"null":C_PACKAGING_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEST_TYPE==null?"null":C_TEST_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EXTERNAL_REFERENCE==null?"null":C_EXTERNAL_REFERENCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NOMINAL_SIZE==null?"null":C_NOMINAL_SIZE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LAYER_MIX_TYPE==null?"null":C_LAYER_MIX_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_UNIT==null?"null":C_SAMPLE_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMP_QNTY==null?"null":"" + C_SAMP_QNTY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLED_BY==null?"null":C_SAMPLED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BITUMEN_LOCALSUPPLIER==null?"null":C_BITUMEN_LOCALSUPPLIER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_TOTALBUNDLES==null?"null":C_BLOCK_TOTALBUNDLES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX==null?"null":C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY==null?"null":C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ==null?"null":C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_BLOCKSPERBUNDLE==null?"null":C_BLOCK_BLOCKSPERBUNDLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_RELATEDCERTIFICATIONREQUESTID==null?"null":C_BLOCK_RELATEDCERTIFICATIONREQUESTID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MORTAR_WATERORCEMENTRATIO==null?"null":C_MORTAR_WATERORCEMENTRATIO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MORTAR_TYPEOFMORTAR==null?"null":C_MORTAR_TYPEOFMORTAR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_NOMTHICKNESS==null?"null":C_THERMALINSULATION_NOMTHICKNESS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_NOMDENSITY==null?"null":C_THERMALINSULATION_NOMDENSITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_NOMDIAMETER==null?"null":C_THERMALINSULATION_NOMDIAMETER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_FACINGTYPE==null?"null":C_THERMALINSULATION_FACINGTYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_FACINGDESCRIPTION==null?"null":C_THERMALINSULATION_FACINGDESCRIPTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_TESTTEMPORHUMIDITY==null?"null":C_THERMALINSULATION_TESTTEMPORHUMIDITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY==null?"null":C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_AGEOFSAMPLEDAYS==null?"null":C_THERMALINSULATION_AGEOFSAMPLEDAYS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LUBEOIL_VISCOSITYGRADE==null?"null":C_LUBEOIL_VISCOSITYGRADE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGMB==null?"null":C_ASPHALT_REFGMB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGSB==null?"null":C_ASPHALT_REFGSB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGSE==null?"null":C_ASPHALT_REFGSE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGB==null?"null":C_ASPHALT_REFGB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_LAYINGDATE==null?"null":"" + C_ASPHALT_LAYINGDATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFMARSHALLREQNO==null?"null":C_ASPHALT_REFMARSHALLREQNO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFBITUMENREQNO==null?"null":C_ASPHALT_REFBITUMENREQNO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFMIX==null?"null":C_ASPHALT_REFMIX, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_CALIBRATIONFACTOR==null?"null":C_ASPHALT_CALIBRATIONFACTOR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_GRADINGORBITUMENSPECS==null?"null":C_ASPHALT_GRADINGORBITUMENSPECS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_OTHERSPECS==null?"null":C_ASPHALT_OTHERSPECS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CEMENT_CLASSOFCEMENT==null?"null":C_CEMENT_CLASSOFCEMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_GRADEOFCONCRETE==null?"null":C_CONCRETE_GRADEOFCONCRETE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_CEMENTCONTENT==null?"null":C_CONCRETE_CEMENTCONTENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_TESTINGAGEOFSAMPLE==null?"null":C_CONCRETE_TESTINGAGEOFSAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_ESTIMATEDTESTDATE==null?"null":"" + C_CONCRETE_ESTIMATEDTESTDATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_TRUCKNUMBER==null?"null":C_CONCRETE_TRUCKNUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_PLACEOFMAKINGCUBES==null?"null":C_CONCRETE_PLACEOFMAKINGCUBES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_EQUIPMENTTYPEUSED==null?"null":C_CONCRETE_EQUIPMENTTYPEUSED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_CURINGORSTORAGECONDITIONS==null?"null":C_CONCRETE_CURINGORSTORAGECONDITIONS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_METHODOFCOMPACTION==null?"null":C_CONCRETE_METHODOFCOMPACTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_CONDITIONOFSAMPLE==null?"null":C_CONCRETE_CONDITIONOFSAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_CEMENT==null?"null":C_FRESHCONCRETE_CEMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_CEMENTTYPE==null?"null":C_FRESHCONCRETE_CEMENTTYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_ADMIXTURE==null?"null":C_FRESHCONCRETE_ADMIXTURE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_ADMIXTURETYPE==null?"null":C_FRESHCONCRETE_ADMIXTURETYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE==null?"null":C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_AGGREGATE_20MM==null?"null":C_FRESHCONCRETE_AGGREGATE_20MM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_AGGREGATE_10MM==null?"null":C_FRESHCONCRETE_AGGREGATE_10MM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_AGGREGATE_1MM==null?"null":C_FRESHCONCRETE_AGGREGATE_1MM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_CONCRETE_CLASS_GRADE==null?"null":C_FRESHCONCRETE_CONCRETE_CLASS_GRADE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_MDD==null?"null":C_SOIL_MDD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_OMC==null?"null":C_SOIL_OMC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_MDD_OMC_REF==null?"null":C_SOIL_MDD_OMC_REF, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_BFRL==null?"null":C_SOIL_BFRL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_LAYER_THICKNESSMM==null?"null":C_SOIL_LAYER_THICKNESSMM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_SOURCE_MINERAL_AGG==null?"null":C_SOIL_SOURCE_MINERAL_AGG, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_MANUFACTURER_CERT_NO==null?"null":C_STEEL_MANUFACTURER_CERT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_GRADE_STEEL==null?"null":C_STEEL_GRADE_STEEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_LOCAL_SUPPLIER==null?"null":C_STEEL_LOCAL_SUPPLIER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_HEAT_NUMBER==null?"null":C_STEEL_HEAT_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_TEST_SERV==null?"null":C_PRODUCT_TEST_SERV, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_METHOD==null?"null":C_SAMPLING_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_DESC==null?"null":C_SAMPLE_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BATCH_SIZE==null?"null":C_BATCH_SIZE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_UNITNO==null?"null":C_UNITNO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_UNITSIZE==null?"null":C_UNITSIZE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_INCREMENT==null?"null":C_NO_INCREMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MORE_SAMPLE_NOTE==null?"null":"" + C_MORE_SAMPLE_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STAGES==null?"null":C_STAGES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_RETURN_NOTE==null?"null":C_RETURN_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DISCARD==null?"null":C_DISCARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DISCARD_DATE==null?"null":"" + C_DISCARD_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DISCARD_BY==null?"null":C_DISCARD_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TRAVEL_CALCULATED==null?"null":C_TRAVEL_CALCULATED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PHYSICAL_OBSERVATION==null?"null":C_PHYSICAL_OBSERVATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SENDER_NO==null?"null":C_SENDER_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REF_SENDER_NO==null?"null":C_REF_SENDER_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TESTLAB==null?"null":C_TESTLAB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRIMARY_RESULT==null?"null":C_PRIMARY_RESULT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRIMARY_REPORT_NO==null?"null":C_PRIMARY_REPORT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REF_RESULT==null?"null":C_REF_RESULT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REF_REPORT_NO==null?"null":C_REF_REPORT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DETERMINATION==null?"null":C_DETERMINATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EQUIPMENT_TYPE==null?"null":C_EQUIPMENT_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EQUIPMENT_CLASS==null?"null":C_EQUIPMENT_CLASS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CAPACITY==null?"null":C_CAPACITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_OF_MEASUREMENTS==null?"null":C_NO_OF_MEASUREMENTS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_DATE_CALIB==null?"null":"" + C_REQ_DATE_CALIB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CALIB_SITE==null?"null":C_CALIB_SITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CALIB_METHOD==null?"null":C_CALIB_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASSET_NAME==null?"null":C_ASSET_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MODEL_NO==null?"null":C_MODEL_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_DATE==null?"null":"" + C_PURCHASE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_PRICE==null?"null":C_PURCHASE_PRICE.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DELIVERY_RECD==null?"null":"" + C_DELIVERY_RECD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DATE_OF_INSTALL==null?"null":"" + C_DATE_OF_INSTALL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TAG_NO==null?"null":"" + C_TAG_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SERIAL_NO==null?"null":"" + C_SERIAL_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_OF_ACCESSORIES==null?"null":"" + C_NO_OF_ACCESSORIES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ACCESSORY_DETAIL==null?"null":C_ACCESSORY_DETAIL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ADDR_ROOM_NO==null?"null":C_ADDR_ROOM_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WARRANTY_EXP_DATE==null?"null":"" + C_WARRANTY_EXP_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_UNDER_CONTRACT==null?"null":C_UNDER_CONTRACT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_NO==null?"null":C_CONTRACT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_COMP==null?"null":C_CONTRACT_COMP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_START==null?"null":"" + C_CONTRACT_START, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_END==null?"null":"" + C_CONTRACT_END, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CALIB_TYPE==null?"null":C_CALIB_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_AGE_GROUP_LABEL==null?"null":C_AGE_GROUP_LABEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_AGE_GROUP_TEST==null?"null":C_AGE_GROUP_TEST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOYS_DIMENSION==null?"null":C_TOYS_DIMENSION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOYS_FEATURES==null?"null":C_TOYS_FEATURES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOYS_LABEL_DETAILS==null?"null":C_TOYS_LABEL_DETAILS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEXTILE_CLASS==null?"null":C_TEXTILE_CLASS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEXTILE_TYPE==null?"null":C_TEXTILE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MONTAJI_REGISTERED==null?"null":C_MONTAJI_REGISTERED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MONTAJI_REF==null?"null":C_MONTAJI_REF, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SEALING_PACK==null?"null":C_SEALING_PACK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TYPE==null?"null":C_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FORM==null?"null":C_FORM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FORM_TYPE==null?"null":C_FORM_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FINENESS==null?"null":C_FINENESS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SHAPE==null?"null":C_SHAPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LABORATORY==null?"null":C_LABORATORY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CEMARK==null?"null":C_CEMARK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_AGE==null?"null":"" + C_AGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_GENDER==null?"null":C_GENDER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_OWNER_NAME==null?"null":C_OWNER_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONSIGNMENT_NO==null?"null":C_CONSIGNMENT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_ORIGIN==null?"null":C_SAMPLE_ORIGIN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MEAT_REQ_TYP==null?"null":C_MEAT_REQ_TYP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURPOSE_TEST==null?"null":C_PURPOSE_TEST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_CLARITY==null?"null":C_COLL_CLARITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_DESC==null?"null":C_COLL_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_ISCOLLSAMPLE==null?"null":C_COLL_ISCOLLSAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_NAME==null?"null":C_COLL_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_EMIRATEID==null?"null":C_COLL_EMIRATEID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DCL_USERID==null?"null":C_DCL_USERID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FAILURE_DESC==null?"null":C_FAILURE_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FAILURE_COMP==null?"null":C_FAILURE_COMP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WORK_FAIL==null?"null":C_WORK_FAIL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_REF==null?"null":C_PURCHASE_REF, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_TYPE==null?"null":C_PURCHASE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PEARL_FIELD==null?"null":C_PEARL_FIELD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_POBOX==null?"null":C_POBOX, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_DILUENT==null?"null":C_PRODUCT_DILUENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ACTIVE_SUBSTANCE==null?"null":C_ACTIVE_SUBSTANCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EDIT_ASSET==null?"null":C_EDIT_ASSET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PH==null?"null":C_PH.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NATUREOFACTIVITY==null?"null":C_NATUREOFACTIVITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CHLORINELEVEL==null?"null":C_CHLORINELEVEL.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_RISK_ASSESSMENT==null?"null":C_RISK_ASSESSMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SPECIMEN==null?"null":"" + C_SPECIMEN, delimiters));
    if (useRecordDelim) {
      __sb.append(delimiters.getLinesTerminatedBy());
    }
    return __sb.toString();
  }
  public void toString0(DelimiterSet delimiters, StringBuilder __sb, char fieldDelim) {
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_NUMBER==null?"null":"" + SAMPLE_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEXT_ID==null?"null":TEXT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STATUS==null?"null":STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OLD_STATUS==null?"null":OLD_STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DISP_FLDS==null?"null":DISP_FLDS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LABEL_MASK==null?"null":LABEL_MASK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IN_SPEC==null?"null":IN_SPEC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IN_CAL==null?"null":IN_CAL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHANGED_ON==null?"null":"" + CHANGED_ON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RE_SAMPLE==null?"null":RE_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALIQUOT==null?"null":ALIQUOT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ORIGINAL_SAMPLE==null?"null":"" + ORIGINAL_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARENT_SAMPLE==null?"null":"" + PARENT_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARENT_ALIQUOT==null?"null":"" + PARENT_ALIQUOT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALIQUOT_GROUP==null?"null":ALIQUOT_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_VOLUME==null?"null":"" + SAMPLE_VOLUME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_UNITS==null?"null":SAMPLE_UNITS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOGIN_DATE==null?"null":"" + LOGIN_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOGIN_BY==null?"null":LOGIN_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLED_DATE==null?"null":"" + SAMPLED_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RECD_DATE==null?"null":"" + RECD_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RECEIVED_BY==null?"null":RECEIVED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DATE_STARTED==null?"null":"" + DATE_STARTED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STARTED==null?"null":STARTED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ASSIGNED_OPERATOR==null?"null":ASSIGNED_OPERATOR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DUE_DATE==null?"null":"" + DUE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DATE_COMPLETED==null?"null":"" + DATE_COMPLETED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DATE_REVIEWED==null?"null":"" + DATE_REVIEWED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PREP==null?"null":PREP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PREP_DATE==null?"null":"" + PREP_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PREP_BY==null?"null":PREP_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REVIEWER==null?"null":REVIEWER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REVIEW_NOTE==null?"null":REVIEW_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT_CODE==null?"null":PRODUCT_CODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT==null?"null":PRODUCT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT_VERSION==null?"null":"" + PRODUCT_VERSION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRODUCT_GRADE==null?"null":PRODUCT_GRADE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLING_POINT==null?"null":SAMPLING_POINT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_TYPE==null?"null":SAMPLE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PROJECT==null?"null":PROJECT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BATCH_NAME==null?"null":BATCH_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BATCH_TEMPLATE==null?"null":BATCH_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STEP==null?"null":STEP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_NAME==null?"null":SAMPLE_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(DESCRIPTION==null?"null":DESCRIPTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRIORITY==null?"null":"" + PRIORITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOCATION==null?"null":LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CUSTOMER==null?"null":CUSTOMER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEST_LIST==null?"null":TEST_LIST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEMPLATE==null?"null":TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RECIPIENT==null?"null":RECIPIENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STANDARD==null?"null":STANDARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(EXT_LINK==null?"null":EXT_LINK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONDITION==null?"null":CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TIMEPOINT==null?"null":TIMEPOINT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LOT==null?"null":"" + LOT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BASE_DATE==null?"null":"" + BASE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVAILABLE_DATE==null?"null":"" + AVAILABLE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REQUIRED_DATE==null?"null":"" + REQUIRED_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TARGET_DATE==null?"null":"" + TARGET_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARTIAL_SPEC==null?"null":PARTIAL_SPEC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SPEC_TYPE==null?"null":SPEC_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STAGE==null?"null":STAGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PRIMARY_IN_SPEC==null?"null":PRIMARY_IN_SPEC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BATCH==null?"null":BATCH, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHARGE_CODE==null?"null":CHARGE_CODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(FORMULATION==null?"null":FORMULATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PROTOCOL_LEVEL==null?"null":PROTOCOL_LEVEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RELEASED==null?"null":RELEASED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RELEASED_BY==null?"null":RELEASED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(RELEASED_ON==null?"null":"" + RELEASED_ON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IN_CONTROL==null?"null":IN_CONTROL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INVESTIGATION==null?"null":INVESTIGATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INVESTIGATED==null?"null":INVESTIGATED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVED==null?"null":APPROVED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVAL_GROUP==null?"null":APPROVAL_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(READY_FOR_APPROVAL==null?"null":READY_FOR_APPROVAL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVAL_ID==null?"null":"" + APPROVAL_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(APPROVAL_ROUTING==null?"null":APPROVAL_ROUTING, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(MODIFIED_RESULTS==null?"null":MODIFIED_RESULTS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REPORT_NUMBER==null?"null":"" + REPORT_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COMPOSITE==null?"null":COMPOSITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PARENT_COMPOSITE==null?"null":"" + PARENT_COMPOSITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COMPOSITE_TEMPLATE==null?"null":COMPOSITE_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SEASON_DATE==null?"null":"" + SEASON_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PEOPLE==null?"null":"" + PEOPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(TEST_LOCATION==null?"null":TEST_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OWNER_LOCATION==null?"null":OWNER_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHK_ALIQUOT_STATUS==null?"null":CHK_ALIQUOT_STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CHK_ALIQUOT_SPECS==null?"null":CHK_ALIQUOT_SPECS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALIQUOT_TEMPLATE==null?"null":ALIQUOT_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CALC_GROUP==null?"null":CALC_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLE_EVENT==null?"null":"" + SAMPLE_EVENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LABEL_ID==null?"null":LABEL_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HAS_FLAGS==null?"null":HAS_FLAGS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(VARIATION==null?"null":VARIATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLED_BY==null?"null":SAMPLED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAMPLED==null?"null":SAMPLED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ORDER_NUM==null?"null":ORDER_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LAST_ORDER_NUM==null?"null":LAST_ORDER_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STORAGE_CONDITION==null?"null":STORAGE_CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONTAINER_TYPE==null?"null":CONTAINER_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(NUM_CONTAINERS==null?"null":"" + NUM_CONTAINERS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IMPORTANT_MESSAGE==null?"null":IMPORTANT_MESSAGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OBSERVATIONS==null?"null":OBSERVATIONS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LAB==null?"null":LAB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(EXPIRATION_DATE==null?"null":"" + EXPIRATION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REQD_VOLUME==null?"null":"" + REQD_VOLUME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COLLECTION_METHOD==null?"null":COLLECTION_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(COLLECTION_OFFSET==null?"null":"" + COLLECTION_OFFSET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SIGNED==null?"null":SIGNED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CASE_NAME==null?"null":CASE_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONTRACT_NUMBER==null?"null":"" + CONTRACT_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(BILLING_ITEM_DESC==null?"null":BILLING_ITEM_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INTERPRETED==null?"null":INTERPRETED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INTERP_TYPE==null?"null":INTERP_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INSPECT_PNT_NUM==null?"null":"" + INSPECT_PNT_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INSPECTION_LOT_NUM==null?"null":INSPECTION_LOT_NUM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IS_INSPECT_PNT==null?"null":IS_INSPECT_PNT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PLANT==null?"null":PLANT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERC1_VALUE==null?"null":USERC1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERC2_VALUE==null?"null":USERC2_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERD1_VALUE==null?"null":USERD1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERN1_VALUE==null?"null":USERN1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERN2_VALUE==null?"null":USERN2_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(USERT1_VALUE==null?"null":USERT1_VALUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SELECTED_SET==null?"null":SAP_SELECTED_SET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_CODE_GROUP==null?"null":SAP_CODE_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SAMPLE_NUMBER==null?"null":SAP_SAMPLE_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SS_PLANT==null?"null":SAP_SS_PLANT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SAP_SAMPLE_COUNT==null?"null":SAP_SAMPLE_COUNT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OPERATION_NUMBER==null?"null":OPERATION_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STORAGE_LOC_NO==null?"null":"" + STORAGE_LOC_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(EXTERNAL_LOCATION==null?"null":EXTERNAL_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(FORMULATION_NAME==null?"null":FORMULATION_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STANDARD_REAGENT==null?"null":STANDARD_REAGENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(CONVERSION_GROUPS==null?"null":CONVERSION_GROUPS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(REPORTED_RSLT_OOS==null?"null":REPORTED_RSLT_OOS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(GROUP_NAME==null?"null":GROUP_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PROCESS_UNIT==null?"null":PROCESS_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HAZARD==null?"null":HAZARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(INSTRUMENT==null?"null":INSTRUMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SITE==null?"null":T_SITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PLANT==null?"null":T_PLANT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_CERTIFICATE==null?"null":T_CERTIFICATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_CONTAINER==null?"null":T_CONTAINER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_OVERDUE==null?"null":T_OVERDUE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PO_NUMBER==null?"null":T_PO_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PRODUCTION_DATE==null?"null":"" + T_PRODUCTION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_REPORT_DATE==null?"null":"" + T_REPORT_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_REQUESTED_BY==null?"null":T_REQUESTED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_LONG_NOTE==null?"null":"" + T_LONG_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SHIFT_CODE==null?"null":T_SHIFT_CODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SUPP_BATCH_NO==null?"null":T_SUPP_BATCH_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SUPPLIER==null?"null":T_SUPPLIER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_TRUCK_VESSEL==null?"null":T_TRUCK_VESSEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PLANT_RECV_BY==null?"null":T_PLANT_RECV_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PLANT_RECV_DATE==null?"null":"" + T_PLANT_RECV_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRIORITY==null?"null":C_PRIORITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(STORAGE_TEMPLATE==null?"null":STORAGE_TEMPLATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ALLOW_CHLD_ALQTS==null?"null":ALLOW_CHLD_ALQTS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(PHASE==null?"null":PHASE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SCHEDULE_NUMBER==null?"null":"" + SCHEDULE_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_ACTION_NUMBER==null?"null":"" + T_ACTION_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME1==null?"null":T_BATCH_NAME1, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME2==null?"null":T_BATCH_NAME2, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME3==null?"null":T_BATCH_NAME3, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME4==null?"null":T_BATCH_NAME4, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME5==null?"null":T_BATCH_NAME5, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_BATCH_NAME6==null?"null":T_BATCH_NAME6, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_COLLECT_SCHEME==null?"null":T_COLLECT_SCHEME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_COMPOSITE_GROUP==null?"null":T_COMPOSITE_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_DISTRIBUTION_BY==null?"null":T_DISTRIBUTION_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_DISTRIBUTION_DATE==null?"null":"" + T_DISTRIBUTION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_EM_PLAN==null?"null":"" + T_EM_PLAN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB1_BATCH==null?"null":T_INCUB1_BATCH, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB1_END==null?"null":"" + T_INCUB1_END, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB1_START==null?"null":"" + T_INCUB1_START, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB2_BATCH==null?"null":T_INCUB2_BATCH, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB2_END==null?"null":"" + T_INCUB2_END, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_INCUB2_START==null?"null":"" + T_INCUB2_START, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_MEDIA_REFERENCE==null?"null":T_MEDIA_REFERENCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_ORIGINAL_SAMPLE==null?"null":"" + T_ORIGINAL_SAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PERSONNEL==null?"null":T_PERSONNEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_PERSONNEL_SET==null?"null":T_PERSONNEL_SET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SAMPLE_TYPE==null?"null":T_SAMPLE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SCHEDULE_GROUP==null?"null":T_SCHEDULE_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_SUITE==null?"null":T_SUITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_TRANSIT_LOCATION==null?"null":T_TRANSIT_LOCATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(T_VALIDATION==null?"null":T_VALIDATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REFERENCE_ID==null?"null":C_REFERENCE_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_REASON==null?"null":C_SAMPLING_REASON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CUSTOMER_TYPE==null?"null":C_CUSTOMER_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQUEST_TYPE==null?"null":C_REQUEST_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_OTHER_SAMPLE_SOURCE==null?"null":C_OTHER_SAMPLE_SOURCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CUST_ID==null?"null":C_CUST_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CLIENT_TYPE==null?"null":C_CLIENT_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SAMP_TYPE==null?"null":C_REQ_SAMP_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_SOURCE==null?"null":C_SAMPLE_SOURCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DM_BARCODE==null?"null":C_DM_BARCODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_EXT_REFERENCE==null?"null":C_REQ_EXT_REFERENCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EXPRESS_SERVICE==null?"null":C_EXPRESS_SERVICE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_HARDCOPY_REQUIRED==null?"null":C_HARDCOPY_REQUIRED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_REMARKS==null?"null":C_REQ_REMARKS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_COPIES==null?"null":"" + C_REQ_COPIES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_EDIT==null?"null":C_REQ_EDIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOTAL_SERVICE_FEE==null?"null":C_TOTAL_SERVICE_FEE.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_GROUP==null?"null":C_PRODUCT_GROUP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_CATEGORY==null?"null":C_PRODUCT_CATEGORY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCTION_DATE==null?"null":"" + C_PRODUCTION_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_OF_UNIT==null?"null":"" + C_NO_OF_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_CONDITION==null?"null":C_SAMPLE_CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEMP_REC==null?"null":"" + C_TEMP_REC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_POINT_OF_SAMPLING==null?"null":C_POINT_OF_SAMPLING, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SAMP_COLLECTION==null?"null":C_REQ_SAMP_COLLECTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SAMP_BAL_RETURN==null?"null":C_REQ_SAMP_BAL_RETURN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_HAZARD==null?"null":C_HAZARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BATCH_NO==null?"null":C_BATCH_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQUEST_NO==null?"null":C_REQUEST_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BILLING_TYPE==null?"null":C_BILLING_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOTAL_TEST_CHARGE==null?"null":C_TOTAL_TEST_CHARGE.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_VOUCHER==null?"null":C_VOUCHER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ERAD_NO==null?"null":C_ERAD_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_RECEIPT==null?"null":C_RECEIPT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PAYMENT_DT==null?"null":"" + C_PAYMENT_DT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PAYMENT_SRC==null?"null":C_PAYMENT_SRC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PAYMENT_STATUS==null?"null":C_PAYMENT_STATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CUST_DELIVERY_DATE==null?"null":"" + C_CUST_DELIVERY_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_OPINION==null?"null":C_SAMPLE_OPINION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SUBCAT_ID==null?"null":"" + C_SUBCAT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODCAT_ID==null?"null":"" + C_PRODCAT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PROD_GROUP_ID==null?"null":"" + C_PROD_GROUP_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MSG_ID==null?"null":C_MSG_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MSG_DIGEST==null?"null":C_MSG_DIGEST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_SOURCE==null?"null":C_REQ_SOURCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_ID==null?"null":"" + C_ITEM_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SRC_REQ_ID==null?"null":C_SRC_REQ_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EXPECTED_DATE==null?"null":"" + C_EXPECTED_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_DESC==null?"null":C_PRODUCT_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DATE_ONHOLD==null?"null":"" + C_DATE_ONHOLD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DATE_OFFHOLD==null?"null":"" + C_DATE_OFFHOLD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ONHOLD_REASON==null?"null":C_ONHOLD_REASON, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LATITUDE==null?"null":LATITUDE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(LONGITUDE==null?"null":LONGITUDE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ON_SITE_PRESERVATION==null?"null":C_ON_SITE_PRESERVATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRESERVATION_METHOD==null?"null":C_PRESERVATION_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_PROCEDURE==null?"null":C_SAMPLING_PROCEDURE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_APPARATUS==null?"null":C_SAMPLING_APPARATUS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_APPEARANCE==null?"null":C_APPEARANCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLOUR==null?"null":C_COLOUR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ODOUR==null?"null":C_ODOUR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_COLLECTION_LOC==null?"null":C_SAMPLING_COLLECTION_LOC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REPORT_ID==null?"null":C_REPORT_ID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DELIVERED_BY==null?"null":C_DELIVERED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MAKANI_NO==null?"null":C_MAKANI_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COUNTRY==null?"null":C_COUNTRY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BUILDING_FLOOR==null?"null":C_BUILDING_FLOOR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LOCATION_DESC==null?"null":C_LOCATION_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_BARCODE==null?"null":C_ITEM_BARCODE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_BRAND==null?"null":C_ITEM_BRAND, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MANUFACTURER==null?"null":C_MANUFACTURER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COUNTRY_ORIGIN==null?"null":C_COUNTRY_ORIGIN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ITEM_TRADE_NAME==null?"null":C_ITEM_TRADE_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PROCESS_ONE==null?"null":C_PROCESS_ONE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PROCESS_TWO==null?"null":C_PROCESS_TWO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SHELF_LIFE==null?"null":C_SHELF_LIFE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SHELF_LIFE_UNIT==null?"null":C_SHELF_LIFE_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STORAGE_CONDITION==null?"null":C_STORAGE_CONDITION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WEIGHT==null?"null":C_WEIGHT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WEIGHT_UNIT==null?"null":C_WEIGHT_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PACKAGING_TYPE==null?"null":C_PACKAGING_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEST_TYPE==null?"null":C_TEST_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EXTERNAL_REFERENCE==null?"null":C_EXTERNAL_REFERENCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NOMINAL_SIZE==null?"null":C_NOMINAL_SIZE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LAYER_MIX_TYPE==null?"null":C_LAYER_MIX_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_UNIT==null?"null":C_SAMPLE_UNIT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMP_QNTY==null?"null":"" + C_SAMP_QNTY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLED_BY==null?"null":C_SAMPLED_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BITUMEN_LOCALSUPPLIER==null?"null":C_BITUMEN_LOCALSUPPLIER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_TOTALBUNDLES==null?"null":C_BLOCK_TOTALBUNDLES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX==null?"null":C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY==null?"null":C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ==null?"null":C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_BLOCKSPERBUNDLE==null?"null":C_BLOCK_BLOCKSPERBUNDLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BLOCK_RELATEDCERTIFICATIONREQUESTID==null?"null":C_BLOCK_RELATEDCERTIFICATIONREQUESTID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MORTAR_WATERORCEMENTRATIO==null?"null":C_MORTAR_WATERORCEMENTRATIO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MORTAR_TYPEOFMORTAR==null?"null":C_MORTAR_TYPEOFMORTAR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_NOMTHICKNESS==null?"null":C_THERMALINSULATION_NOMTHICKNESS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_NOMDENSITY==null?"null":C_THERMALINSULATION_NOMDENSITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_NOMDIAMETER==null?"null":C_THERMALINSULATION_NOMDIAMETER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_FACINGTYPE==null?"null":C_THERMALINSULATION_FACINGTYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_FACINGDESCRIPTION==null?"null":C_THERMALINSULATION_FACINGDESCRIPTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_TESTTEMPORHUMIDITY==null?"null":C_THERMALINSULATION_TESTTEMPORHUMIDITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY==null?"null":C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_THERMALINSULATION_AGEOFSAMPLEDAYS==null?"null":C_THERMALINSULATION_AGEOFSAMPLEDAYS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LUBEOIL_VISCOSITYGRADE==null?"null":C_LUBEOIL_VISCOSITYGRADE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGMB==null?"null":C_ASPHALT_REFGMB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGSB==null?"null":C_ASPHALT_REFGSB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGSE==null?"null":C_ASPHALT_REFGSE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFGB==null?"null":C_ASPHALT_REFGB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_LAYINGDATE==null?"null":"" + C_ASPHALT_LAYINGDATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFMARSHALLREQNO==null?"null":C_ASPHALT_REFMARSHALLREQNO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFBITUMENREQNO==null?"null":C_ASPHALT_REFBITUMENREQNO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_REFMIX==null?"null":C_ASPHALT_REFMIX, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_CALIBRATIONFACTOR==null?"null":C_ASPHALT_CALIBRATIONFACTOR, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_GRADINGORBITUMENSPECS==null?"null":C_ASPHALT_GRADINGORBITUMENSPECS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASPHALT_OTHERSPECS==null?"null":C_ASPHALT_OTHERSPECS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CEMENT_CLASSOFCEMENT==null?"null":C_CEMENT_CLASSOFCEMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_GRADEOFCONCRETE==null?"null":C_CONCRETE_GRADEOFCONCRETE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_CEMENTCONTENT==null?"null":C_CONCRETE_CEMENTCONTENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_TESTINGAGEOFSAMPLE==null?"null":C_CONCRETE_TESTINGAGEOFSAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_ESTIMATEDTESTDATE==null?"null":"" + C_CONCRETE_ESTIMATEDTESTDATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_TRUCKNUMBER==null?"null":C_CONCRETE_TRUCKNUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_PLACEOFMAKINGCUBES==null?"null":C_CONCRETE_PLACEOFMAKINGCUBES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_EQUIPMENTTYPEUSED==null?"null":C_CONCRETE_EQUIPMENTTYPEUSED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_CURINGORSTORAGECONDITIONS==null?"null":C_CONCRETE_CURINGORSTORAGECONDITIONS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_METHODOFCOMPACTION==null?"null":C_CONCRETE_METHODOFCOMPACTION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONCRETE_CONDITIONOFSAMPLE==null?"null":C_CONCRETE_CONDITIONOFSAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_CEMENT==null?"null":C_FRESHCONCRETE_CEMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_CEMENTTYPE==null?"null":C_FRESHCONCRETE_CEMENTTYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_ADMIXTURE==null?"null":C_FRESHCONCRETE_ADMIXTURE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_ADMIXTURETYPE==null?"null":C_FRESHCONCRETE_ADMIXTURETYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE==null?"null":C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_AGGREGATE_20MM==null?"null":C_FRESHCONCRETE_AGGREGATE_20MM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_AGGREGATE_10MM==null?"null":C_FRESHCONCRETE_AGGREGATE_10MM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_AGGREGATE_1MM==null?"null":C_FRESHCONCRETE_AGGREGATE_1MM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FRESHCONCRETE_CONCRETE_CLASS_GRADE==null?"null":C_FRESHCONCRETE_CONCRETE_CLASS_GRADE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_MDD==null?"null":C_SOIL_MDD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_OMC==null?"null":C_SOIL_OMC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_MDD_OMC_REF==null?"null":C_SOIL_MDD_OMC_REF, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_BFRL==null?"null":C_SOIL_BFRL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_LAYER_THICKNESSMM==null?"null":C_SOIL_LAYER_THICKNESSMM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SOIL_SOURCE_MINERAL_AGG==null?"null":C_SOIL_SOURCE_MINERAL_AGG, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_MANUFACTURER_CERT_NO==null?"null":C_STEEL_MANUFACTURER_CERT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_GRADE_STEEL==null?"null":C_STEEL_GRADE_STEEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_LOCAL_SUPPLIER==null?"null":C_STEEL_LOCAL_SUPPLIER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STEEL_HEAT_NUMBER==null?"null":C_STEEL_HEAT_NUMBER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_TEST_SERV==null?"null":C_PRODUCT_TEST_SERV, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLING_METHOD==null?"null":C_SAMPLING_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_DESC==null?"null":C_SAMPLE_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_BATCH_SIZE==null?"null":C_BATCH_SIZE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_UNITNO==null?"null":C_UNITNO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_UNITSIZE==null?"null":C_UNITSIZE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_INCREMENT==null?"null":C_NO_INCREMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MORE_SAMPLE_NOTE==null?"null":"" + C_MORE_SAMPLE_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_STAGES==null?"null":C_STAGES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_RETURN_NOTE==null?"null":C_RETURN_NOTE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DISCARD==null?"null":C_DISCARD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DISCARD_DATE==null?"null":"" + C_DISCARD_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DISCARD_BY==null?"null":C_DISCARD_BY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TRAVEL_CALCULATED==null?"null":C_TRAVEL_CALCULATED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PHYSICAL_OBSERVATION==null?"null":C_PHYSICAL_OBSERVATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SENDER_NO==null?"null":C_SENDER_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REF_SENDER_NO==null?"null":C_REF_SENDER_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TESTLAB==null?"null":C_TESTLAB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRIMARY_RESULT==null?"null":C_PRIMARY_RESULT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRIMARY_REPORT_NO==null?"null":C_PRIMARY_REPORT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REF_RESULT==null?"null":C_REF_RESULT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REF_REPORT_NO==null?"null":C_REF_REPORT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DETERMINATION==null?"null":C_DETERMINATION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EQUIPMENT_TYPE==null?"null":C_EQUIPMENT_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EQUIPMENT_CLASS==null?"null":C_EQUIPMENT_CLASS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CAPACITY==null?"null":C_CAPACITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_OF_MEASUREMENTS==null?"null":C_NO_OF_MEASUREMENTS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_REQ_DATE_CALIB==null?"null":"" + C_REQ_DATE_CALIB, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CALIB_SITE==null?"null":C_CALIB_SITE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CALIB_METHOD==null?"null":C_CALIB_METHOD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ASSET_NAME==null?"null":C_ASSET_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MODEL_NO==null?"null":C_MODEL_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_DATE==null?"null":"" + C_PURCHASE_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_PRICE==null?"null":C_PURCHASE_PRICE.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DELIVERY_RECD==null?"null":"" + C_DELIVERY_RECD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DATE_OF_INSTALL==null?"null":"" + C_DATE_OF_INSTALL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TAG_NO==null?"null":"" + C_TAG_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SERIAL_NO==null?"null":"" + C_SERIAL_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NO_OF_ACCESSORIES==null?"null":"" + C_NO_OF_ACCESSORIES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ACCESSORY_DETAIL==null?"null":C_ACCESSORY_DETAIL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ADDR_ROOM_NO==null?"null":C_ADDR_ROOM_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WARRANTY_EXP_DATE==null?"null":"" + C_WARRANTY_EXP_DATE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_UNDER_CONTRACT==null?"null":C_UNDER_CONTRACT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_NO==null?"null":C_CONTRACT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_COMP==null?"null":C_CONTRACT_COMP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_START==null?"null":"" + C_CONTRACT_START, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONTRACT_END==null?"null":"" + C_CONTRACT_END, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CALIB_TYPE==null?"null":C_CALIB_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_AGE_GROUP_LABEL==null?"null":C_AGE_GROUP_LABEL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_AGE_GROUP_TEST==null?"null":C_AGE_GROUP_TEST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOYS_DIMENSION==null?"null":C_TOYS_DIMENSION, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOYS_FEATURES==null?"null":C_TOYS_FEATURES, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TOYS_LABEL_DETAILS==null?"null":C_TOYS_LABEL_DETAILS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEXTILE_CLASS==null?"null":C_TEXTILE_CLASS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TEXTILE_TYPE==null?"null":C_TEXTILE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MONTAJI_REGISTERED==null?"null":C_MONTAJI_REGISTERED, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MONTAJI_REF==null?"null":C_MONTAJI_REF, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SEALING_PACK==null?"null":C_SEALING_PACK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_TYPE==null?"null":C_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FORM==null?"null":C_FORM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FORM_TYPE==null?"null":C_FORM_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FINENESS==null?"null":C_FINENESS, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SHAPE==null?"null":C_SHAPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_LABORATORY==null?"null":C_LABORATORY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CEMARK==null?"null":C_CEMARK, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_AGE==null?"null":"" + C_AGE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_GENDER==null?"null":C_GENDER, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_OWNER_NAME==null?"null":C_OWNER_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CONSIGNMENT_NO==null?"null":C_CONSIGNMENT_NO, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SAMPLE_ORIGIN==null?"null":C_SAMPLE_ORIGIN, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_MEAT_REQ_TYP==null?"null":C_MEAT_REQ_TYP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURPOSE_TEST==null?"null":C_PURPOSE_TEST, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_CLARITY==null?"null":C_COLL_CLARITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_DESC==null?"null":C_COLL_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_ISCOLLSAMPLE==null?"null":C_COLL_ISCOLLSAMPLE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_NAME==null?"null":C_COLL_NAME, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_COLL_EMIRATEID==null?"null":C_COLL_EMIRATEID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_DCL_USERID==null?"null":C_DCL_USERID, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FAILURE_DESC==null?"null":C_FAILURE_DESC, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_FAILURE_COMP==null?"null":C_FAILURE_COMP, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_WORK_FAIL==null?"null":C_WORK_FAIL, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_REF==null?"null":C_PURCHASE_REF, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PURCHASE_TYPE==null?"null":C_PURCHASE_TYPE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PEARL_FIELD==null?"null":C_PEARL_FIELD, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_POBOX==null?"null":C_POBOX, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PRODUCT_DILUENT==null?"null":C_PRODUCT_DILUENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_ACTIVE_SUBSTANCE==null?"null":C_ACTIVE_SUBSTANCE, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_EDIT_ASSET==null?"null":C_EDIT_ASSET, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_PH==null?"null":C_PH.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_NATUREOFACTIVITY==null?"null":C_NATUREOFACTIVITY, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_CHLORINELEVEL==null?"null":C_CHLORINELEVEL.toPlainString(), delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_RISK_ASSESSMENT==null?"null":C_RISK_ASSESSMENT, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(C_SPECIMEN==null?"null":"" + C_SPECIMEN, delimiters));
  }
  private static final DelimiterSet __inputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);
  private RecordParser __parser;
  public void parse(Text __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(CharSequence __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(byte [] __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(char [] __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(ByteBuffer __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(CharBuffer __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  private void __loadFromFields(List<String> fields) {
    Iterator<String> __it = fields.listIterator();
    String __cur_str = null;
    try {
    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLE_NUMBER = null; } else {
      this.SAMPLE_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEXT_ID = null; } else {
      this.TEXT_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STATUS = null; } else {
      this.STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OLD_STATUS = null; } else {
      this.OLD_STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.DISP_FLDS = null; } else {
      this.DISP_FLDS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LABEL_MASK = null; } else {
      this.LABEL_MASK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IN_SPEC = null; } else {
      this.IN_SPEC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IN_CAL = null; } else {
      this.IN_CAL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.CHANGED_ON = null; } else {
      this.CHANGED_ON = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RE_SAMPLE = null; } else {
      this.RE_SAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALIQUOT = null; } else {
      this.ALIQUOT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.ORIGINAL_SAMPLE = null; } else {
      this.ORIGINAL_SAMPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PARENT_SAMPLE = null; } else {
      this.PARENT_SAMPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PARENT_ALIQUOT = null; } else {
      this.PARENT_ALIQUOT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALIQUOT_GROUP = null; } else {
      this.ALIQUOT_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLE_VOLUME = null; } else {
      this.SAMPLE_VOLUME = Float.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLE_UNITS = null; } else {
      this.SAMPLE_UNITS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.LOGIN_DATE = null; } else {
      this.LOGIN_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LOGIN_BY = null; } else {
      this.LOGIN_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLED_DATE = null; } else {
      this.SAMPLED_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.RECD_DATE = null; } else {
      this.RECD_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RECEIVED_BY = null; } else {
      this.RECEIVED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DATE_STARTED = null; } else {
      this.DATE_STARTED = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STARTED = null; } else {
      this.STARTED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ASSIGNED_OPERATOR = null; } else {
      this.ASSIGNED_OPERATOR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DUE_DATE = null; } else {
      this.DUE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DATE_COMPLETED = null; } else {
      this.DATE_COMPLETED = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DATE_REVIEWED = null; } else {
      this.DATE_REVIEWED = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PREP = null; } else {
      this.PREP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PREP_DATE = null; } else {
      this.PREP_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PREP_BY = null; } else {
      this.PREP_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.REVIEWER = null; } else {
      this.REVIEWER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.REVIEW_NOTE = null; } else {
      this.REVIEW_NOTE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRODUCT_CODE = null; } else {
      this.PRODUCT_CODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRODUCT = null; } else {
      this.PRODUCT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PRODUCT_VERSION = null; } else {
      this.PRODUCT_VERSION = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRODUCT_GRADE = null; } else {
      this.PRODUCT_GRADE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLING_POINT = null; } else {
      this.SAMPLING_POINT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLE_TYPE = null; } else {
      this.SAMPLE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PROJECT = null; } else {
      this.PROJECT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BATCH_NAME = null; } else {
      this.BATCH_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BATCH_TEMPLATE = null; } else {
      this.BATCH_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STEP = null; } else {
      this.STEP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLE_NAME = null; } else {
      this.SAMPLE_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.DESCRIPTION = null; } else {
      this.DESCRIPTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PRIORITY = null; } else {
      this.PRIORITY = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LOCATION = null; } else {
      this.LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CUSTOMER = null; } else {
      this.CUSTOMER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEST_LIST = null; } else {
      this.TEST_LIST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEMPLATE = null; } else {
      this.TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RECIPIENT = null; } else {
      this.RECIPIENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STANDARD = null; } else {
      this.STANDARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.EXT_LINK = null; } else {
      this.EXT_LINK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CONDITION = null; } else {
      this.CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TIMEPOINT = null; } else {
      this.TIMEPOINT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.LOT = null; } else {
      this.LOT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.BASE_DATE = null; } else {
      this.BASE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVAILABLE_DATE = null; } else {
      this.AVAILABLE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.REQUIRED_DATE = null; } else {
      this.REQUIRED_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.TARGET_DATE = null; } else {
      this.TARGET_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PARTIAL_SPEC = null; } else {
      this.PARTIAL_SPEC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SPEC_TYPE = null; } else {
      this.SPEC_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STAGE = null; } else {
      this.STAGE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRIMARY_IN_SPEC = null; } else {
      this.PRIMARY_IN_SPEC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BATCH = null; } else {
      this.BATCH = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CHARGE_CODE = null; } else {
      this.CHARGE_CODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.FORMULATION = null; } else {
      this.FORMULATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PROTOCOL_LEVEL = null; } else {
      this.PROTOCOL_LEVEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RELEASED = null; } else {
      this.RELEASED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RELEASED_BY = null; } else {
      this.RELEASED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.RELEASED_ON = null; } else {
      this.RELEASED_ON = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IN_CONTROL = null; } else {
      this.IN_CONTROL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INVESTIGATION = null; } else {
      this.INVESTIGATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INVESTIGATED = null; } else {
      this.INVESTIGATED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.APPROVED = null; } else {
      this.APPROVED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.APPROVAL_GROUP = null; } else {
      this.APPROVAL_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.READY_FOR_APPROVAL = null; } else {
      this.READY_FOR_APPROVAL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.APPROVAL_ID = null; } else {
      this.APPROVAL_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.APPROVAL_ROUTING = null; } else {
      this.APPROVAL_ROUTING = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.MODIFIED_RESULTS = null; } else {
      this.MODIFIED_RESULTS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.REPORT_NUMBER = null; } else {
      this.REPORT_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.COMPOSITE = null; } else {
      this.COMPOSITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PARENT_COMPOSITE = null; } else {
      this.PARENT_COMPOSITE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.COMPOSITE_TEMPLATE = null; } else {
      this.COMPOSITE_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SEASON_DATE = null; } else {
      this.SEASON_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PEOPLE = null; } else {
      this.PEOPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEST_LOCATION = null; } else {
      this.TEST_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OWNER_LOCATION = null; } else {
      this.OWNER_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CHK_ALIQUOT_STATUS = null; } else {
      this.CHK_ALIQUOT_STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CHK_ALIQUOT_SPECS = null; } else {
      this.CHK_ALIQUOT_SPECS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALIQUOT_TEMPLATE = null; } else {
      this.ALIQUOT_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CALC_GROUP = null; } else {
      this.CALC_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLE_EVENT = null; } else {
      this.SAMPLE_EVENT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LABEL_ID = null; } else {
      this.LABEL_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.HAS_FLAGS = null; } else {
      this.HAS_FLAGS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.VARIATION = null; } else {
      this.VARIATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLED_BY = null; } else {
      this.SAMPLED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLED = null; } else {
      this.SAMPLED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ORDER_NUM = null; } else {
      this.ORDER_NUM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LAST_ORDER_NUM = null; } else {
      this.LAST_ORDER_NUM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STORAGE_CONDITION = null; } else {
      this.STORAGE_CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CONTAINER_TYPE = null; } else {
      this.CONTAINER_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.NUM_CONTAINERS = null; } else {
      this.NUM_CONTAINERS = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IMPORTANT_MESSAGE = null; } else {
      this.IMPORTANT_MESSAGE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OBSERVATIONS = null; } else {
      this.OBSERVATIONS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LAB = null; } else {
      this.LAB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.EXPIRATION_DATE = null; } else {
      this.EXPIRATION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.REQD_VOLUME = null; } else {
      this.REQD_VOLUME = Float.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.COLLECTION_METHOD = null; } else {
      this.COLLECTION_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.COLLECTION_OFFSET = null; } else {
      this.COLLECTION_OFFSET = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SIGNED = null; } else {
      this.SIGNED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CASE_NAME = null; } else {
      this.CASE_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.CONTRACT_NUMBER = null; } else {
      this.CONTRACT_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BILLING_ITEM_DESC = null; } else {
      this.BILLING_ITEM_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INTERPRETED = null; } else {
      this.INTERPRETED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INTERP_TYPE = null; } else {
      this.INTERP_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.INSPECT_PNT_NUM = null; } else {
      this.INSPECT_PNT_NUM = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INSPECTION_LOT_NUM = null; } else {
      this.INSPECTION_LOT_NUM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IS_INSPECT_PNT = null; } else {
      this.IS_INSPECT_PNT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PLANT = null; } else {
      this.PLANT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERC1_VALUE = null; } else {
      this.USERC1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERC2_VALUE = null; } else {
      this.USERC2_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERD1_VALUE = null; } else {
      this.USERD1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERN1_VALUE = null; } else {
      this.USERN1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERN2_VALUE = null; } else {
      this.USERN2_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERT1_VALUE = null; } else {
      this.USERT1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SELECTED_SET = null; } else {
      this.SAP_SELECTED_SET = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_CODE_GROUP = null; } else {
      this.SAP_CODE_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SAMPLE_NUMBER = null; } else {
      this.SAP_SAMPLE_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SS_PLANT = null; } else {
      this.SAP_SS_PLANT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SAMPLE_COUNT = null; } else {
      this.SAP_SAMPLE_COUNT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OPERATION_NUMBER = null; } else {
      this.OPERATION_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.STORAGE_LOC_NO = null; } else {
      this.STORAGE_LOC_NO = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.EXTERNAL_LOCATION = null; } else {
      this.EXTERNAL_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.FORMULATION_NAME = null; } else {
      this.FORMULATION_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STANDARD_REAGENT = null; } else {
      this.STANDARD_REAGENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CONVERSION_GROUPS = null; } else {
      this.CONVERSION_GROUPS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.REPORTED_RSLT_OOS = null; } else {
      this.REPORTED_RSLT_OOS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.GROUP_NAME = null; } else {
      this.GROUP_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PROCESS_UNIT = null; } else {
      this.PROCESS_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.HAZARD = null; } else {
      this.HAZARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INSTRUMENT = null; } else {
      this.INSTRUMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SITE = null; } else {
      this.T_SITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PLANT = null; } else {
      this.T_PLANT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_CERTIFICATE = null; } else {
      this.T_CERTIFICATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_CONTAINER = null; } else {
      this.T_CONTAINER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_OVERDUE = null; } else {
      this.T_OVERDUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PO_NUMBER = null; } else {
      this.T_PO_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_PRODUCTION_DATE = null; } else {
      this.T_PRODUCTION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_REPORT_DATE = null; } else {
      this.T_REPORT_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_REQUESTED_BY = null; } else {
      this.T_REQUESTED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_LONG_NOTE = null; } else {
      this.T_LONG_NOTE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SHIFT_CODE = null; } else {
      this.T_SHIFT_CODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SUPP_BATCH_NO = null; } else {
      this.T_SUPP_BATCH_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SUPPLIER = null; } else {
      this.T_SUPPLIER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_TRUCK_VESSEL = null; } else {
      this.T_TRUCK_VESSEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PLANT_RECV_BY = null; } else {
      this.T_PLANT_RECV_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_PLANT_RECV_DATE = null; } else {
      this.T_PLANT_RECV_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRIORITY = null; } else {
      this.C_PRIORITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STORAGE_TEMPLATE = null; } else {
      this.STORAGE_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALLOW_CHLD_ALQTS = null; } else {
      this.ALLOW_CHLD_ALQTS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PHASE = null; } else {
      this.PHASE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SCHEDULE_NUMBER = null; } else {
      this.SCHEDULE_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_ACTION_NUMBER = null; } else {
      this.T_ACTION_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME1 = null; } else {
      this.T_BATCH_NAME1 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME2 = null; } else {
      this.T_BATCH_NAME2 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME3 = null; } else {
      this.T_BATCH_NAME3 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME4 = null; } else {
      this.T_BATCH_NAME4 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME5 = null; } else {
      this.T_BATCH_NAME5 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME6 = null; } else {
      this.T_BATCH_NAME6 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_COLLECT_SCHEME = null; } else {
      this.T_COLLECT_SCHEME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_COMPOSITE_GROUP = null; } else {
      this.T_COMPOSITE_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_DISTRIBUTION_BY = null; } else {
      this.T_DISTRIBUTION_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_DISTRIBUTION_DATE = null; } else {
      this.T_DISTRIBUTION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_EM_PLAN = null; } else {
      this.T_EM_PLAN = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_INCUB1_BATCH = null; } else {
      this.T_INCUB1_BATCH = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB1_END = null; } else {
      this.T_INCUB1_END = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB1_START = null; } else {
      this.T_INCUB1_START = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_INCUB2_BATCH = null; } else {
      this.T_INCUB2_BATCH = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB2_END = null; } else {
      this.T_INCUB2_END = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB2_START = null; } else {
      this.T_INCUB2_START = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_MEDIA_REFERENCE = null; } else {
      this.T_MEDIA_REFERENCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_ORIGINAL_SAMPLE = null; } else {
      this.T_ORIGINAL_SAMPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PERSONNEL = null; } else {
      this.T_PERSONNEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PERSONNEL_SET = null; } else {
      this.T_PERSONNEL_SET = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SAMPLE_TYPE = null; } else {
      this.T_SAMPLE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SCHEDULE_GROUP = null; } else {
      this.T_SCHEDULE_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SUITE = null; } else {
      this.T_SUITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_TRANSIT_LOCATION = null; } else {
      this.T_TRANSIT_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_VALIDATION = null; } else {
      this.T_VALIDATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REFERENCE_ID = null; } else {
      this.C_REFERENCE_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_REASON = null; } else {
      this.C_SAMPLING_REASON = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CUSTOMER_TYPE = null; } else {
      this.C_CUSTOMER_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQUEST_TYPE = null; } else {
      this.C_REQUEST_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_OTHER_SAMPLE_SOURCE = null; } else {
      this.C_OTHER_SAMPLE_SOURCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CUST_ID = null; } else {
      this.C_CUST_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CLIENT_TYPE = null; } else {
      this.C_CLIENT_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SAMP_TYPE = null; } else {
      this.C_REQ_SAMP_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_SOURCE = null; } else {
      this.C_SAMPLE_SOURCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DM_BARCODE = null; } else {
      this.C_DM_BARCODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_EXT_REFERENCE = null; } else {
      this.C_REQ_EXT_REFERENCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EXPRESS_SERVICE = null; } else {
      this.C_EXPRESS_SERVICE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_HARDCOPY_REQUIRED = null; } else {
      this.C_HARDCOPY_REQUIRED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_REMARKS = null; } else {
      this.C_REQ_REMARKS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_REQ_COPIES = null; } else {
      this.C_REQ_COPIES = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_EDIT = null; } else {
      this.C_REQ_EDIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TOTAL_SERVICE_FEE = null; } else {
      this.C_TOTAL_SERVICE_FEE = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_GROUP = null; } else {
      this.C_PRODUCT_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_CATEGORY = null; } else {
      this.C_PRODUCT_CATEGORY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PRODUCTION_DATE = null; } else {
      this.C_PRODUCTION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_NO_OF_UNIT = null; } else {
      this.C_NO_OF_UNIT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_CONDITION = null; } else {
      this.C_SAMPLE_CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TEMP_REC = null; } else {
      this.C_TEMP_REC = Float.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_POINT_OF_SAMPLING = null; } else {
      this.C_POINT_OF_SAMPLING = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SAMP_COLLECTION = null; } else {
      this.C_REQ_SAMP_COLLECTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SAMP_BAL_RETURN = null; } else {
      this.C_REQ_SAMP_BAL_RETURN = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_HAZARD = null; } else {
      this.C_HAZARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BATCH_NO = null; } else {
      this.C_BATCH_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQUEST_NO = null; } else {
      this.C_REQUEST_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BILLING_TYPE = null; } else {
      this.C_BILLING_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TOTAL_TEST_CHARGE = null; } else {
      this.C_TOTAL_TEST_CHARGE = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_VOUCHER = null; } else {
      this.C_VOUCHER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ERAD_NO = null; } else {
      this.C_ERAD_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_RECEIPT = null; } else {
      this.C_RECEIPT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PAYMENT_DT = null; } else {
      this.C_PAYMENT_DT = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PAYMENT_SRC = null; } else {
      this.C_PAYMENT_SRC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PAYMENT_STATUS = null; } else {
      this.C_PAYMENT_STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CUST_DELIVERY_DATE = null; } else {
      this.C_CUST_DELIVERY_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_OPINION = null; } else {
      this.C_SAMPLE_OPINION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SUBCAT_ID = null; } else {
      this.C_SUBCAT_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PRODCAT_ID = null; } else {
      this.C_PRODCAT_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PROD_GROUP_ID = null; } else {
      this.C_PROD_GROUP_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MSG_ID = null; } else {
      this.C_MSG_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MSG_DIGEST = null; } else {
      this.C_MSG_DIGEST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SOURCE = null; } else {
      this.C_REQ_SOURCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_ITEM_ID = null; } else {
      this.C_ITEM_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SRC_REQ_ID = null; } else {
      this.C_SRC_REQ_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_EXPECTED_DATE = null; } else {
      this.C_EXPECTED_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_DESC = null; } else {
      this.C_PRODUCT_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DATE_ONHOLD = null; } else {
      this.C_DATE_ONHOLD = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DATE_OFFHOLD = null; } else {
      this.C_DATE_OFFHOLD = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ONHOLD_REASON = null; } else {
      this.C_ONHOLD_REASON = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LATITUDE = null; } else {
      this.LATITUDE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LONGITUDE = null; } else {
      this.LONGITUDE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ON_SITE_PRESERVATION = null; } else {
      this.C_ON_SITE_PRESERVATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRESERVATION_METHOD = null; } else {
      this.C_PRESERVATION_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_PROCEDURE = null; } else {
      this.C_SAMPLING_PROCEDURE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_APPARATUS = null; } else {
      this.C_SAMPLING_APPARATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_APPEARANCE = null; } else {
      this.C_APPEARANCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLOUR = null; } else {
      this.C_COLOUR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ODOUR = null; } else {
      this.C_ODOUR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_COLLECTION_LOC = null; } else {
      this.C_SAMPLING_COLLECTION_LOC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REPORT_ID = null; } else {
      this.C_REPORT_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DELIVERED_BY = null; } else {
      this.C_DELIVERED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MAKANI_NO = null; } else {
      this.C_MAKANI_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COUNTRY = null; } else {
      this.C_COUNTRY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BUILDING_FLOOR = null; } else {
      this.C_BUILDING_FLOOR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LOCATION_DESC = null; } else {
      this.C_LOCATION_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ITEM_BARCODE = null; } else {
      this.C_ITEM_BARCODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ITEM_BRAND = null; } else {
      this.C_ITEM_BRAND = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MANUFACTURER = null; } else {
      this.C_MANUFACTURER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COUNTRY_ORIGIN = null; } else {
      this.C_COUNTRY_ORIGIN = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ITEM_TRADE_NAME = null; } else {
      this.C_ITEM_TRADE_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PROCESS_ONE = null; } else {
      this.C_PROCESS_ONE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PROCESS_TWO = null; } else {
      this.C_PROCESS_TWO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SHELF_LIFE = null; } else {
      this.C_SHELF_LIFE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SHELF_LIFE_UNIT = null; } else {
      this.C_SHELF_LIFE_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STORAGE_CONDITION = null; } else {
      this.C_STORAGE_CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_WEIGHT = null; } else {
      this.C_WEIGHT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_WEIGHT_UNIT = null; } else {
      this.C_WEIGHT_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PACKAGING_TYPE = null; } else {
      this.C_PACKAGING_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TEST_TYPE = null; } else {
      this.C_TEST_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EXTERNAL_REFERENCE = null; } else {
      this.C_EXTERNAL_REFERENCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NOMINAL_SIZE = null; } else {
      this.C_NOMINAL_SIZE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LAYER_MIX_TYPE = null; } else {
      this.C_LAYER_MIX_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_UNIT = null; } else {
      this.C_SAMPLE_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SAMP_QNTY = null; } else {
      this.C_SAMP_QNTY = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLED_BY = null; } else {
      this.C_SAMPLED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BITUMEN_LOCALSUPPLIER = null; } else {
      this.C_BITUMEN_LOCALSUPPLIER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_TOTALBUNDLES = null; } else {
      this.C_BLOCK_TOTALBUNDLES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = null; } else {
      this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = null; } else {
      this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = null; } else {
      this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_BLOCKSPERBUNDLE = null; } else {
      this.C_BLOCK_BLOCKSPERBUNDLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = null; } else {
      this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MORTAR_WATERORCEMENTRATIO = null; } else {
      this.C_MORTAR_WATERORCEMENTRATIO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MORTAR_TYPEOFMORTAR = null; } else {
      this.C_MORTAR_TYPEOFMORTAR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_NOMTHICKNESS = null; } else {
      this.C_THERMALINSULATION_NOMTHICKNESS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_NOMDENSITY = null; } else {
      this.C_THERMALINSULATION_NOMDENSITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_NOMDIAMETER = null; } else {
      this.C_THERMALINSULATION_NOMDIAMETER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_FACINGTYPE = null; } else {
      this.C_THERMALINSULATION_FACINGTYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_FACINGDESCRIPTION = null; } else {
      this.C_THERMALINSULATION_FACINGDESCRIPTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = null; } else {
      this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = null; } else {
      this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = null; } else {
      this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LUBEOIL_VISCOSITYGRADE = null; } else {
      this.C_LUBEOIL_VISCOSITYGRADE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGMB = null; } else {
      this.C_ASPHALT_REFGMB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGSB = null; } else {
      this.C_ASPHALT_REFGSB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGSE = null; } else {
      this.C_ASPHALT_REFGSE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGB = null; } else {
      this.C_ASPHALT_REFGB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_ASPHALT_LAYINGDATE = null; } else {
      this.C_ASPHALT_LAYINGDATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFMARSHALLREQNO = null; } else {
      this.C_ASPHALT_REFMARSHALLREQNO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFBITUMENREQNO = null; } else {
      this.C_ASPHALT_REFBITUMENREQNO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFMIX = null; } else {
      this.C_ASPHALT_REFMIX = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_CALIBRATIONFACTOR = null; } else {
      this.C_ASPHALT_CALIBRATIONFACTOR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_GRADINGORBITUMENSPECS = null; } else {
      this.C_ASPHALT_GRADINGORBITUMENSPECS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_OTHERSPECS = null; } else {
      this.C_ASPHALT_OTHERSPECS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CEMENT_CLASSOFCEMENT = null; } else {
      this.C_CEMENT_CLASSOFCEMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_GRADEOFCONCRETE = null; } else {
      this.C_CONCRETE_GRADEOFCONCRETE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_CEMENTCONTENT = null; } else {
      this.C_CONCRETE_CEMENTCONTENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_TESTINGAGEOFSAMPLE = null; } else {
      this.C_CONCRETE_TESTINGAGEOFSAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CONCRETE_ESTIMATEDTESTDATE = null; } else {
      this.C_CONCRETE_ESTIMATEDTESTDATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_TRUCKNUMBER = null; } else {
      this.C_CONCRETE_TRUCKNUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_PLACEOFMAKINGCUBES = null; } else {
      this.C_CONCRETE_PLACEOFMAKINGCUBES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_EQUIPMENTTYPEUSED = null; } else {
      this.C_CONCRETE_EQUIPMENTTYPEUSED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_CURINGORSTORAGECONDITIONS = null; } else {
      this.C_CONCRETE_CURINGORSTORAGECONDITIONS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_METHODOFCOMPACTION = null; } else {
      this.C_CONCRETE_METHODOFCOMPACTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_CONDITIONOFSAMPLE = null; } else {
      this.C_CONCRETE_CONDITIONOFSAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_CEMENT = null; } else {
      this.C_FRESHCONCRETE_CEMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_CEMENTTYPE = null; } else {
      this.C_FRESHCONCRETE_CEMENTTYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_ADMIXTURE = null; } else {
      this.C_FRESHCONCRETE_ADMIXTURE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_ADMIXTURETYPE = null; } else {
      this.C_FRESHCONCRETE_ADMIXTURETYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = null; } else {
      this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_AGGREGATE_20MM = null; } else {
      this.C_FRESHCONCRETE_AGGREGATE_20MM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_AGGREGATE_10MM = null; } else {
      this.C_FRESHCONCRETE_AGGREGATE_10MM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_AGGREGATE_1MM = null; } else {
      this.C_FRESHCONCRETE_AGGREGATE_1MM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = null; } else {
      this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_MDD = null; } else {
      this.C_SOIL_MDD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_OMC = null; } else {
      this.C_SOIL_OMC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_MDD_OMC_REF = null; } else {
      this.C_SOIL_MDD_OMC_REF = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_BFRL = null; } else {
      this.C_SOIL_BFRL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_LAYER_THICKNESSMM = null; } else {
      this.C_SOIL_LAYER_THICKNESSMM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_SOURCE_MINERAL_AGG = null; } else {
      this.C_SOIL_SOURCE_MINERAL_AGG = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_MANUFACTURER_CERT_NO = null; } else {
      this.C_STEEL_MANUFACTURER_CERT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_GRADE_STEEL = null; } else {
      this.C_STEEL_GRADE_STEEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_LOCAL_SUPPLIER = null; } else {
      this.C_STEEL_LOCAL_SUPPLIER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_HEAT_NUMBER = null; } else {
      this.C_STEEL_HEAT_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_TEST_SERV = null; } else {
      this.C_PRODUCT_TEST_SERV = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_METHOD = null; } else {
      this.C_SAMPLING_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_DESC = null; } else {
      this.C_SAMPLE_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BATCH_SIZE = null; } else {
      this.C_BATCH_SIZE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_UNITNO = null; } else {
      this.C_UNITNO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_UNITSIZE = null; } else {
      this.C_UNITSIZE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NO_INCREMENT = null; } else {
      this.C_NO_INCREMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_MORE_SAMPLE_NOTE = null; } else {
      this.C_MORE_SAMPLE_NOTE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STAGES = null; } else {
      this.C_STAGES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_RETURN_NOTE = null; } else {
      this.C_RETURN_NOTE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DISCARD = null; } else {
      this.C_DISCARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DISCARD_DATE = null; } else {
      this.C_DISCARD_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DISCARD_BY = null; } else {
      this.C_DISCARD_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TRAVEL_CALCULATED = null; } else {
      this.C_TRAVEL_CALCULATED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PHYSICAL_OBSERVATION = null; } else {
      this.C_PHYSICAL_OBSERVATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SENDER_NO = null; } else {
      this.C_SENDER_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REF_SENDER_NO = null; } else {
      this.C_REF_SENDER_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TESTLAB = null; } else {
      this.C_TESTLAB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRIMARY_RESULT = null; } else {
      this.C_PRIMARY_RESULT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRIMARY_REPORT_NO = null; } else {
      this.C_PRIMARY_REPORT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REF_RESULT = null; } else {
      this.C_REF_RESULT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REF_REPORT_NO = null; } else {
      this.C_REF_REPORT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DETERMINATION = null; } else {
      this.C_DETERMINATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EQUIPMENT_TYPE = null; } else {
      this.C_EQUIPMENT_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EQUIPMENT_CLASS = null; } else {
      this.C_EQUIPMENT_CLASS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CAPACITY = null; } else {
      this.C_CAPACITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NO_OF_MEASUREMENTS = null; } else {
      this.C_NO_OF_MEASUREMENTS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_REQ_DATE_CALIB = null; } else {
      this.C_REQ_DATE_CALIB = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CALIB_SITE = null; } else {
      this.C_CALIB_SITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CALIB_METHOD = null; } else {
      this.C_CALIB_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASSET_NAME = null; } else {
      this.C_ASSET_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MODEL_NO = null; } else {
      this.C_MODEL_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PURCHASE_DATE = null; } else {
      this.C_PURCHASE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PURCHASE_PRICE = null; } else {
      this.C_PURCHASE_PRICE = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DELIVERY_RECD = null; } else {
      this.C_DELIVERY_RECD = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DATE_OF_INSTALL = null; } else {
      this.C_DATE_OF_INSTALL = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TAG_NO = null; } else {
      this.C_TAG_NO = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SERIAL_NO = null; } else {
      this.C_SERIAL_NO = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_NO_OF_ACCESSORIES = null; } else {
      this.C_NO_OF_ACCESSORIES = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ACCESSORY_DETAIL = null; } else {
      this.C_ACCESSORY_DETAIL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ADDR_ROOM_NO = null; } else {
      this.C_ADDR_ROOM_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_WARRANTY_EXP_DATE = null; } else {
      this.C_WARRANTY_EXP_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_UNDER_CONTRACT = null; } else {
      this.C_UNDER_CONTRACT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONTRACT_NO = null; } else {
      this.C_CONTRACT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONTRACT_COMP = null; } else {
      this.C_CONTRACT_COMP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CONTRACT_START = null; } else {
      this.C_CONTRACT_START = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CONTRACT_END = null; } else {
      this.C_CONTRACT_END = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CALIB_TYPE = null; } else {
      this.C_CALIB_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_AGE_GROUP_LABEL = null; } else {
      this.C_AGE_GROUP_LABEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_AGE_GROUP_TEST = null; } else {
      this.C_AGE_GROUP_TEST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TOYS_DIMENSION = null; } else {
      this.C_TOYS_DIMENSION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TOYS_FEATURES = null; } else {
      this.C_TOYS_FEATURES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TOYS_LABEL_DETAILS = null; } else {
      this.C_TOYS_LABEL_DETAILS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TEXTILE_CLASS = null; } else {
      this.C_TEXTILE_CLASS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TEXTILE_TYPE = null; } else {
      this.C_TEXTILE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MONTAJI_REGISTERED = null; } else {
      this.C_MONTAJI_REGISTERED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MONTAJI_REF = null; } else {
      this.C_MONTAJI_REF = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SEALING_PACK = null; } else {
      this.C_SEALING_PACK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TYPE = null; } else {
      this.C_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FORM = null; } else {
      this.C_FORM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FORM_TYPE = null; } else {
      this.C_FORM_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FINENESS = null; } else {
      this.C_FINENESS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SHAPE = null; } else {
      this.C_SHAPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LABORATORY = null; } else {
      this.C_LABORATORY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CEMARK = null; } else {
      this.C_CEMARK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_AGE = null; } else {
      this.C_AGE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_GENDER = null; } else {
      this.C_GENDER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_OWNER_NAME = null; } else {
      this.C_OWNER_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONSIGNMENT_NO = null; } else {
      this.C_CONSIGNMENT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_ORIGIN = null; } else {
      this.C_SAMPLE_ORIGIN = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MEAT_REQ_TYP = null; } else {
      this.C_MEAT_REQ_TYP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PURPOSE_TEST = null; } else {
      this.C_PURPOSE_TEST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_CLARITY = null; } else {
      this.C_COLL_CLARITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_DESC = null; } else {
      this.C_COLL_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_ISCOLLSAMPLE = null; } else {
      this.C_COLL_ISCOLLSAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_NAME = null; } else {
      this.C_COLL_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_EMIRATEID = null; } else {
      this.C_COLL_EMIRATEID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DCL_USERID = null; } else {
      this.C_DCL_USERID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FAILURE_DESC = null; } else {
      this.C_FAILURE_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FAILURE_COMP = null; } else {
      this.C_FAILURE_COMP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_WORK_FAIL = null; } else {
      this.C_WORK_FAIL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PURCHASE_REF = null; } else {
      this.C_PURCHASE_REF = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PURCHASE_TYPE = null; } else {
      this.C_PURCHASE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PEARL_FIELD = null; } else {
      this.C_PEARL_FIELD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_POBOX = null; } else {
      this.C_POBOX = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_DILUENT = null; } else {
      this.C_PRODUCT_DILUENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ACTIVE_SUBSTANCE = null; } else {
      this.C_ACTIVE_SUBSTANCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EDIT_ASSET = null; } else {
      this.C_EDIT_ASSET = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PH = null; } else {
      this.C_PH = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NATUREOFACTIVITY = null; } else {
      this.C_NATUREOFACTIVITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CHLORINELEVEL = null; } else {
      this.C_CHLORINELEVEL = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_RISK_ASSESSMENT = null; } else {
      this.C_RISK_ASSESSMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SPECIMEN = null; } else {
      this.C_SPECIMEN = Integer.valueOf(__cur_str);
    }

    } catch (RuntimeException e) {    throw new RuntimeException("Can't parse input data: '" + __cur_str + "'", e);    }  }

  private void __loadFromFields0(Iterator<String> __it) {
    String __cur_str = null;
    try {
    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLE_NUMBER = null; } else {
      this.SAMPLE_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEXT_ID = null; } else {
      this.TEXT_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STATUS = null; } else {
      this.STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OLD_STATUS = null; } else {
      this.OLD_STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.DISP_FLDS = null; } else {
      this.DISP_FLDS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LABEL_MASK = null; } else {
      this.LABEL_MASK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IN_SPEC = null; } else {
      this.IN_SPEC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IN_CAL = null; } else {
      this.IN_CAL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.CHANGED_ON = null; } else {
      this.CHANGED_ON = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RE_SAMPLE = null; } else {
      this.RE_SAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALIQUOT = null; } else {
      this.ALIQUOT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.ORIGINAL_SAMPLE = null; } else {
      this.ORIGINAL_SAMPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PARENT_SAMPLE = null; } else {
      this.PARENT_SAMPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PARENT_ALIQUOT = null; } else {
      this.PARENT_ALIQUOT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALIQUOT_GROUP = null; } else {
      this.ALIQUOT_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLE_VOLUME = null; } else {
      this.SAMPLE_VOLUME = Float.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLE_UNITS = null; } else {
      this.SAMPLE_UNITS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.LOGIN_DATE = null; } else {
      this.LOGIN_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LOGIN_BY = null; } else {
      this.LOGIN_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLED_DATE = null; } else {
      this.SAMPLED_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.RECD_DATE = null; } else {
      this.RECD_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RECEIVED_BY = null; } else {
      this.RECEIVED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DATE_STARTED = null; } else {
      this.DATE_STARTED = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STARTED = null; } else {
      this.STARTED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ASSIGNED_OPERATOR = null; } else {
      this.ASSIGNED_OPERATOR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DUE_DATE = null; } else {
      this.DUE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DATE_COMPLETED = null; } else {
      this.DATE_COMPLETED = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.DATE_REVIEWED = null; } else {
      this.DATE_REVIEWED = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PREP = null; } else {
      this.PREP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PREP_DATE = null; } else {
      this.PREP_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PREP_BY = null; } else {
      this.PREP_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.REVIEWER = null; } else {
      this.REVIEWER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.REVIEW_NOTE = null; } else {
      this.REVIEW_NOTE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRODUCT_CODE = null; } else {
      this.PRODUCT_CODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRODUCT = null; } else {
      this.PRODUCT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PRODUCT_VERSION = null; } else {
      this.PRODUCT_VERSION = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRODUCT_GRADE = null; } else {
      this.PRODUCT_GRADE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLING_POINT = null; } else {
      this.SAMPLING_POINT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLE_TYPE = null; } else {
      this.SAMPLE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PROJECT = null; } else {
      this.PROJECT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BATCH_NAME = null; } else {
      this.BATCH_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BATCH_TEMPLATE = null; } else {
      this.BATCH_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STEP = null; } else {
      this.STEP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLE_NAME = null; } else {
      this.SAMPLE_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.DESCRIPTION = null; } else {
      this.DESCRIPTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PRIORITY = null; } else {
      this.PRIORITY = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LOCATION = null; } else {
      this.LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CUSTOMER = null; } else {
      this.CUSTOMER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEST_LIST = null; } else {
      this.TEST_LIST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEMPLATE = null; } else {
      this.TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RECIPIENT = null; } else {
      this.RECIPIENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STANDARD = null; } else {
      this.STANDARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.EXT_LINK = null; } else {
      this.EXT_LINK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CONDITION = null; } else {
      this.CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TIMEPOINT = null; } else {
      this.TIMEPOINT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.LOT = null; } else {
      this.LOT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.BASE_DATE = null; } else {
      this.BASE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVAILABLE_DATE = null; } else {
      this.AVAILABLE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.REQUIRED_DATE = null; } else {
      this.REQUIRED_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.TARGET_DATE = null; } else {
      this.TARGET_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PARTIAL_SPEC = null; } else {
      this.PARTIAL_SPEC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SPEC_TYPE = null; } else {
      this.SPEC_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STAGE = null; } else {
      this.STAGE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PRIMARY_IN_SPEC = null; } else {
      this.PRIMARY_IN_SPEC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BATCH = null; } else {
      this.BATCH = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CHARGE_CODE = null; } else {
      this.CHARGE_CODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.FORMULATION = null; } else {
      this.FORMULATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PROTOCOL_LEVEL = null; } else {
      this.PROTOCOL_LEVEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RELEASED = null; } else {
      this.RELEASED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.RELEASED_BY = null; } else {
      this.RELEASED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.RELEASED_ON = null; } else {
      this.RELEASED_ON = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IN_CONTROL = null; } else {
      this.IN_CONTROL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INVESTIGATION = null; } else {
      this.INVESTIGATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INVESTIGATED = null; } else {
      this.INVESTIGATED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.APPROVED = null; } else {
      this.APPROVED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.APPROVAL_GROUP = null; } else {
      this.APPROVAL_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.READY_FOR_APPROVAL = null; } else {
      this.READY_FOR_APPROVAL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.APPROVAL_ID = null; } else {
      this.APPROVAL_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.APPROVAL_ROUTING = null; } else {
      this.APPROVAL_ROUTING = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.MODIFIED_RESULTS = null; } else {
      this.MODIFIED_RESULTS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.REPORT_NUMBER = null; } else {
      this.REPORT_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.COMPOSITE = null; } else {
      this.COMPOSITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PARENT_COMPOSITE = null; } else {
      this.PARENT_COMPOSITE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.COMPOSITE_TEMPLATE = null; } else {
      this.COMPOSITE_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SEASON_DATE = null; } else {
      this.SEASON_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.PEOPLE = null; } else {
      this.PEOPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.TEST_LOCATION = null; } else {
      this.TEST_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OWNER_LOCATION = null; } else {
      this.OWNER_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CHK_ALIQUOT_STATUS = null; } else {
      this.CHK_ALIQUOT_STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CHK_ALIQUOT_SPECS = null; } else {
      this.CHK_ALIQUOT_SPECS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALIQUOT_TEMPLATE = null; } else {
      this.ALIQUOT_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CALC_GROUP = null; } else {
      this.CALC_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SAMPLE_EVENT = null; } else {
      this.SAMPLE_EVENT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LABEL_ID = null; } else {
      this.LABEL_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.HAS_FLAGS = null; } else {
      this.HAS_FLAGS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.VARIATION = null; } else {
      this.VARIATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLED_BY = null; } else {
      this.SAMPLED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAMPLED = null; } else {
      this.SAMPLED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ORDER_NUM = null; } else {
      this.ORDER_NUM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LAST_ORDER_NUM = null; } else {
      this.LAST_ORDER_NUM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STORAGE_CONDITION = null; } else {
      this.STORAGE_CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CONTAINER_TYPE = null; } else {
      this.CONTAINER_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.NUM_CONTAINERS = null; } else {
      this.NUM_CONTAINERS = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IMPORTANT_MESSAGE = null; } else {
      this.IMPORTANT_MESSAGE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OBSERVATIONS = null; } else {
      this.OBSERVATIONS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LAB = null; } else {
      this.LAB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.EXPIRATION_DATE = null; } else {
      this.EXPIRATION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.REQD_VOLUME = null; } else {
      this.REQD_VOLUME = Float.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.COLLECTION_METHOD = null; } else {
      this.COLLECTION_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.COLLECTION_OFFSET = null; } else {
      this.COLLECTION_OFFSET = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SIGNED = null; } else {
      this.SIGNED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CASE_NAME = null; } else {
      this.CASE_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.CONTRACT_NUMBER = null; } else {
      this.CONTRACT_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.BILLING_ITEM_DESC = null; } else {
      this.BILLING_ITEM_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INTERPRETED = null; } else {
      this.INTERPRETED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INTERP_TYPE = null; } else {
      this.INTERP_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.INSPECT_PNT_NUM = null; } else {
      this.INSPECT_PNT_NUM = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INSPECTION_LOT_NUM = null; } else {
      this.INSPECTION_LOT_NUM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.IS_INSPECT_PNT = null; } else {
      this.IS_INSPECT_PNT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PLANT = null; } else {
      this.PLANT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERC1_VALUE = null; } else {
      this.USERC1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERC2_VALUE = null; } else {
      this.USERC2_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERD1_VALUE = null; } else {
      this.USERD1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERN1_VALUE = null; } else {
      this.USERN1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERN2_VALUE = null; } else {
      this.USERN2_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.USERT1_VALUE = null; } else {
      this.USERT1_VALUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SELECTED_SET = null; } else {
      this.SAP_SELECTED_SET = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_CODE_GROUP = null; } else {
      this.SAP_CODE_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SAMPLE_NUMBER = null; } else {
      this.SAP_SAMPLE_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SS_PLANT = null; } else {
      this.SAP_SS_PLANT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SAP_SAMPLE_COUNT = null; } else {
      this.SAP_SAMPLE_COUNT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OPERATION_NUMBER = null; } else {
      this.OPERATION_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.STORAGE_LOC_NO = null; } else {
      this.STORAGE_LOC_NO = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.EXTERNAL_LOCATION = null; } else {
      this.EXTERNAL_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.FORMULATION_NAME = null; } else {
      this.FORMULATION_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STANDARD_REAGENT = null; } else {
      this.STANDARD_REAGENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.CONVERSION_GROUPS = null; } else {
      this.CONVERSION_GROUPS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.REPORTED_RSLT_OOS = null; } else {
      this.REPORTED_RSLT_OOS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.GROUP_NAME = null; } else {
      this.GROUP_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PROCESS_UNIT = null; } else {
      this.PROCESS_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.HAZARD = null; } else {
      this.HAZARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.INSTRUMENT = null; } else {
      this.INSTRUMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SITE = null; } else {
      this.T_SITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PLANT = null; } else {
      this.T_PLANT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_CERTIFICATE = null; } else {
      this.T_CERTIFICATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_CONTAINER = null; } else {
      this.T_CONTAINER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_OVERDUE = null; } else {
      this.T_OVERDUE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PO_NUMBER = null; } else {
      this.T_PO_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_PRODUCTION_DATE = null; } else {
      this.T_PRODUCTION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_REPORT_DATE = null; } else {
      this.T_REPORT_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_REQUESTED_BY = null; } else {
      this.T_REQUESTED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_LONG_NOTE = null; } else {
      this.T_LONG_NOTE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SHIFT_CODE = null; } else {
      this.T_SHIFT_CODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SUPP_BATCH_NO = null; } else {
      this.T_SUPP_BATCH_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SUPPLIER = null; } else {
      this.T_SUPPLIER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_TRUCK_VESSEL = null; } else {
      this.T_TRUCK_VESSEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PLANT_RECV_BY = null; } else {
      this.T_PLANT_RECV_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_PLANT_RECV_DATE = null; } else {
      this.T_PLANT_RECV_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRIORITY = null; } else {
      this.C_PRIORITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.STORAGE_TEMPLATE = null; } else {
      this.STORAGE_TEMPLATE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ALLOW_CHLD_ALQTS = null; } else {
      this.ALLOW_CHLD_ALQTS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.PHASE = null; } else {
      this.PHASE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.SCHEDULE_NUMBER = null; } else {
      this.SCHEDULE_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_ACTION_NUMBER = null; } else {
      this.T_ACTION_NUMBER = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME1 = null; } else {
      this.T_BATCH_NAME1 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME2 = null; } else {
      this.T_BATCH_NAME2 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME3 = null; } else {
      this.T_BATCH_NAME3 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME4 = null; } else {
      this.T_BATCH_NAME4 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME5 = null; } else {
      this.T_BATCH_NAME5 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_BATCH_NAME6 = null; } else {
      this.T_BATCH_NAME6 = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_COLLECT_SCHEME = null; } else {
      this.T_COLLECT_SCHEME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_COMPOSITE_GROUP = null; } else {
      this.T_COMPOSITE_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_DISTRIBUTION_BY = null; } else {
      this.T_DISTRIBUTION_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_DISTRIBUTION_DATE = null; } else {
      this.T_DISTRIBUTION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_EM_PLAN = null; } else {
      this.T_EM_PLAN = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_INCUB1_BATCH = null; } else {
      this.T_INCUB1_BATCH = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB1_END = null; } else {
      this.T_INCUB1_END = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB1_START = null; } else {
      this.T_INCUB1_START = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_INCUB2_BATCH = null; } else {
      this.T_INCUB2_BATCH = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB2_END = null; } else {
      this.T_INCUB2_END = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_INCUB2_START = null; } else {
      this.T_INCUB2_START = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_MEDIA_REFERENCE = null; } else {
      this.T_MEDIA_REFERENCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.T_ORIGINAL_SAMPLE = null; } else {
      this.T_ORIGINAL_SAMPLE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PERSONNEL = null; } else {
      this.T_PERSONNEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_PERSONNEL_SET = null; } else {
      this.T_PERSONNEL_SET = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SAMPLE_TYPE = null; } else {
      this.T_SAMPLE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SCHEDULE_GROUP = null; } else {
      this.T_SCHEDULE_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_SUITE = null; } else {
      this.T_SUITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_TRANSIT_LOCATION = null; } else {
      this.T_TRANSIT_LOCATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.T_VALIDATION = null; } else {
      this.T_VALIDATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REFERENCE_ID = null; } else {
      this.C_REFERENCE_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_REASON = null; } else {
      this.C_SAMPLING_REASON = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CUSTOMER_TYPE = null; } else {
      this.C_CUSTOMER_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQUEST_TYPE = null; } else {
      this.C_REQUEST_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_OTHER_SAMPLE_SOURCE = null; } else {
      this.C_OTHER_SAMPLE_SOURCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CUST_ID = null; } else {
      this.C_CUST_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CLIENT_TYPE = null; } else {
      this.C_CLIENT_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SAMP_TYPE = null; } else {
      this.C_REQ_SAMP_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_SOURCE = null; } else {
      this.C_SAMPLE_SOURCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DM_BARCODE = null; } else {
      this.C_DM_BARCODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_EXT_REFERENCE = null; } else {
      this.C_REQ_EXT_REFERENCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EXPRESS_SERVICE = null; } else {
      this.C_EXPRESS_SERVICE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_HARDCOPY_REQUIRED = null; } else {
      this.C_HARDCOPY_REQUIRED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_REMARKS = null; } else {
      this.C_REQ_REMARKS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_REQ_COPIES = null; } else {
      this.C_REQ_COPIES = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_EDIT = null; } else {
      this.C_REQ_EDIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TOTAL_SERVICE_FEE = null; } else {
      this.C_TOTAL_SERVICE_FEE = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_GROUP = null; } else {
      this.C_PRODUCT_GROUP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_CATEGORY = null; } else {
      this.C_PRODUCT_CATEGORY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PRODUCTION_DATE = null; } else {
      this.C_PRODUCTION_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_NO_OF_UNIT = null; } else {
      this.C_NO_OF_UNIT = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_CONDITION = null; } else {
      this.C_SAMPLE_CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TEMP_REC = null; } else {
      this.C_TEMP_REC = Float.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_POINT_OF_SAMPLING = null; } else {
      this.C_POINT_OF_SAMPLING = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SAMP_COLLECTION = null; } else {
      this.C_REQ_SAMP_COLLECTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SAMP_BAL_RETURN = null; } else {
      this.C_REQ_SAMP_BAL_RETURN = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_HAZARD = null; } else {
      this.C_HAZARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BATCH_NO = null; } else {
      this.C_BATCH_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQUEST_NO = null; } else {
      this.C_REQUEST_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BILLING_TYPE = null; } else {
      this.C_BILLING_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TOTAL_TEST_CHARGE = null; } else {
      this.C_TOTAL_TEST_CHARGE = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_VOUCHER = null; } else {
      this.C_VOUCHER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ERAD_NO = null; } else {
      this.C_ERAD_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_RECEIPT = null; } else {
      this.C_RECEIPT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PAYMENT_DT = null; } else {
      this.C_PAYMENT_DT = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PAYMENT_SRC = null; } else {
      this.C_PAYMENT_SRC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PAYMENT_STATUS = null; } else {
      this.C_PAYMENT_STATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CUST_DELIVERY_DATE = null; } else {
      this.C_CUST_DELIVERY_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_OPINION = null; } else {
      this.C_SAMPLE_OPINION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SUBCAT_ID = null; } else {
      this.C_SUBCAT_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PRODCAT_ID = null; } else {
      this.C_PRODCAT_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PROD_GROUP_ID = null; } else {
      this.C_PROD_GROUP_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MSG_ID = null; } else {
      this.C_MSG_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MSG_DIGEST = null; } else {
      this.C_MSG_DIGEST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REQ_SOURCE = null; } else {
      this.C_REQ_SOURCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_ITEM_ID = null; } else {
      this.C_ITEM_ID = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SRC_REQ_ID = null; } else {
      this.C_SRC_REQ_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_EXPECTED_DATE = null; } else {
      this.C_EXPECTED_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_DESC = null; } else {
      this.C_PRODUCT_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DATE_ONHOLD = null; } else {
      this.C_DATE_ONHOLD = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DATE_OFFHOLD = null; } else {
      this.C_DATE_OFFHOLD = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ONHOLD_REASON = null; } else {
      this.C_ONHOLD_REASON = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LATITUDE = null; } else {
      this.LATITUDE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.LONGITUDE = null; } else {
      this.LONGITUDE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ON_SITE_PRESERVATION = null; } else {
      this.C_ON_SITE_PRESERVATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRESERVATION_METHOD = null; } else {
      this.C_PRESERVATION_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_PROCEDURE = null; } else {
      this.C_SAMPLING_PROCEDURE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_APPARATUS = null; } else {
      this.C_SAMPLING_APPARATUS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_APPEARANCE = null; } else {
      this.C_APPEARANCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLOUR = null; } else {
      this.C_COLOUR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ODOUR = null; } else {
      this.C_ODOUR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_COLLECTION_LOC = null; } else {
      this.C_SAMPLING_COLLECTION_LOC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REPORT_ID = null; } else {
      this.C_REPORT_ID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DELIVERED_BY = null; } else {
      this.C_DELIVERED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MAKANI_NO = null; } else {
      this.C_MAKANI_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COUNTRY = null; } else {
      this.C_COUNTRY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BUILDING_FLOOR = null; } else {
      this.C_BUILDING_FLOOR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LOCATION_DESC = null; } else {
      this.C_LOCATION_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ITEM_BARCODE = null; } else {
      this.C_ITEM_BARCODE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ITEM_BRAND = null; } else {
      this.C_ITEM_BRAND = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MANUFACTURER = null; } else {
      this.C_MANUFACTURER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COUNTRY_ORIGIN = null; } else {
      this.C_COUNTRY_ORIGIN = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ITEM_TRADE_NAME = null; } else {
      this.C_ITEM_TRADE_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PROCESS_ONE = null; } else {
      this.C_PROCESS_ONE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PROCESS_TWO = null; } else {
      this.C_PROCESS_TWO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SHELF_LIFE = null; } else {
      this.C_SHELF_LIFE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SHELF_LIFE_UNIT = null; } else {
      this.C_SHELF_LIFE_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STORAGE_CONDITION = null; } else {
      this.C_STORAGE_CONDITION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_WEIGHT = null; } else {
      this.C_WEIGHT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_WEIGHT_UNIT = null; } else {
      this.C_WEIGHT_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PACKAGING_TYPE = null; } else {
      this.C_PACKAGING_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TEST_TYPE = null; } else {
      this.C_TEST_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EXTERNAL_REFERENCE = null; } else {
      this.C_EXTERNAL_REFERENCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NOMINAL_SIZE = null; } else {
      this.C_NOMINAL_SIZE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LAYER_MIX_TYPE = null; } else {
      this.C_LAYER_MIX_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_UNIT = null; } else {
      this.C_SAMPLE_UNIT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SAMP_QNTY = null; } else {
      this.C_SAMP_QNTY = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLED_BY = null; } else {
      this.C_SAMPLED_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BITUMEN_LOCALSUPPLIER = null; } else {
      this.C_BITUMEN_LOCALSUPPLIER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_TOTALBUNDLES = null; } else {
      this.C_BLOCK_TOTALBUNDLES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = null; } else {
      this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = null; } else {
      this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = null; } else {
      this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_BLOCKSPERBUNDLE = null; } else {
      this.C_BLOCK_BLOCKSPERBUNDLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = null; } else {
      this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MORTAR_WATERORCEMENTRATIO = null; } else {
      this.C_MORTAR_WATERORCEMENTRATIO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MORTAR_TYPEOFMORTAR = null; } else {
      this.C_MORTAR_TYPEOFMORTAR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_NOMTHICKNESS = null; } else {
      this.C_THERMALINSULATION_NOMTHICKNESS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_NOMDENSITY = null; } else {
      this.C_THERMALINSULATION_NOMDENSITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_NOMDIAMETER = null; } else {
      this.C_THERMALINSULATION_NOMDIAMETER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_FACINGTYPE = null; } else {
      this.C_THERMALINSULATION_FACINGTYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_FACINGDESCRIPTION = null; } else {
      this.C_THERMALINSULATION_FACINGDESCRIPTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = null; } else {
      this.C_THERMALINSULATION_TESTTEMPORHUMIDITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = null; } else {
      this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = null; } else {
      this.C_THERMALINSULATION_AGEOFSAMPLEDAYS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LUBEOIL_VISCOSITYGRADE = null; } else {
      this.C_LUBEOIL_VISCOSITYGRADE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGMB = null; } else {
      this.C_ASPHALT_REFGMB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGSB = null; } else {
      this.C_ASPHALT_REFGSB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGSE = null; } else {
      this.C_ASPHALT_REFGSE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFGB = null; } else {
      this.C_ASPHALT_REFGB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_ASPHALT_LAYINGDATE = null; } else {
      this.C_ASPHALT_LAYINGDATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFMARSHALLREQNO = null; } else {
      this.C_ASPHALT_REFMARSHALLREQNO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFBITUMENREQNO = null; } else {
      this.C_ASPHALT_REFBITUMENREQNO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_REFMIX = null; } else {
      this.C_ASPHALT_REFMIX = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_CALIBRATIONFACTOR = null; } else {
      this.C_ASPHALT_CALIBRATIONFACTOR = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_GRADINGORBITUMENSPECS = null; } else {
      this.C_ASPHALT_GRADINGORBITUMENSPECS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASPHALT_OTHERSPECS = null; } else {
      this.C_ASPHALT_OTHERSPECS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CEMENT_CLASSOFCEMENT = null; } else {
      this.C_CEMENT_CLASSOFCEMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_GRADEOFCONCRETE = null; } else {
      this.C_CONCRETE_GRADEOFCONCRETE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_CEMENTCONTENT = null; } else {
      this.C_CONCRETE_CEMENTCONTENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_TESTINGAGEOFSAMPLE = null; } else {
      this.C_CONCRETE_TESTINGAGEOFSAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CONCRETE_ESTIMATEDTESTDATE = null; } else {
      this.C_CONCRETE_ESTIMATEDTESTDATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_TRUCKNUMBER = null; } else {
      this.C_CONCRETE_TRUCKNUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_PLACEOFMAKINGCUBES = null; } else {
      this.C_CONCRETE_PLACEOFMAKINGCUBES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_EQUIPMENTTYPEUSED = null; } else {
      this.C_CONCRETE_EQUIPMENTTYPEUSED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_CURINGORSTORAGECONDITIONS = null; } else {
      this.C_CONCRETE_CURINGORSTORAGECONDITIONS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_METHODOFCOMPACTION = null; } else {
      this.C_CONCRETE_METHODOFCOMPACTION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONCRETE_CONDITIONOFSAMPLE = null; } else {
      this.C_CONCRETE_CONDITIONOFSAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_CEMENT = null; } else {
      this.C_FRESHCONCRETE_CEMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_CEMENTTYPE = null; } else {
      this.C_FRESHCONCRETE_CEMENTTYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_ADMIXTURE = null; } else {
      this.C_FRESHCONCRETE_ADMIXTURE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_ADMIXTURETYPE = null; } else {
      this.C_FRESHCONCRETE_ADMIXTURETYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = null; } else {
      this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_AGGREGATE_20MM = null; } else {
      this.C_FRESHCONCRETE_AGGREGATE_20MM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_AGGREGATE_10MM = null; } else {
      this.C_FRESHCONCRETE_AGGREGATE_10MM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_AGGREGATE_1MM = null; } else {
      this.C_FRESHCONCRETE_AGGREGATE_1MM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = null; } else {
      this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_MDD = null; } else {
      this.C_SOIL_MDD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_OMC = null; } else {
      this.C_SOIL_OMC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_MDD_OMC_REF = null; } else {
      this.C_SOIL_MDD_OMC_REF = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_BFRL = null; } else {
      this.C_SOIL_BFRL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_LAYER_THICKNESSMM = null; } else {
      this.C_SOIL_LAYER_THICKNESSMM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SOIL_SOURCE_MINERAL_AGG = null; } else {
      this.C_SOIL_SOURCE_MINERAL_AGG = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_MANUFACTURER_CERT_NO = null; } else {
      this.C_STEEL_MANUFACTURER_CERT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_GRADE_STEEL = null; } else {
      this.C_STEEL_GRADE_STEEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_LOCAL_SUPPLIER = null; } else {
      this.C_STEEL_LOCAL_SUPPLIER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STEEL_HEAT_NUMBER = null; } else {
      this.C_STEEL_HEAT_NUMBER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_TEST_SERV = null; } else {
      this.C_PRODUCT_TEST_SERV = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLING_METHOD = null; } else {
      this.C_SAMPLING_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_DESC = null; } else {
      this.C_SAMPLE_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_BATCH_SIZE = null; } else {
      this.C_BATCH_SIZE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_UNITNO = null; } else {
      this.C_UNITNO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_UNITSIZE = null; } else {
      this.C_UNITSIZE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NO_INCREMENT = null; } else {
      this.C_NO_INCREMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_MORE_SAMPLE_NOTE = null; } else {
      this.C_MORE_SAMPLE_NOTE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_STAGES = null; } else {
      this.C_STAGES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_RETURN_NOTE = null; } else {
      this.C_RETURN_NOTE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DISCARD = null; } else {
      this.C_DISCARD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DISCARD_DATE = null; } else {
      this.C_DISCARD_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DISCARD_BY = null; } else {
      this.C_DISCARD_BY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TRAVEL_CALCULATED = null; } else {
      this.C_TRAVEL_CALCULATED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PHYSICAL_OBSERVATION = null; } else {
      this.C_PHYSICAL_OBSERVATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SENDER_NO = null; } else {
      this.C_SENDER_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REF_SENDER_NO = null; } else {
      this.C_REF_SENDER_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TESTLAB = null; } else {
      this.C_TESTLAB = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRIMARY_RESULT = null; } else {
      this.C_PRIMARY_RESULT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRIMARY_REPORT_NO = null; } else {
      this.C_PRIMARY_REPORT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REF_RESULT = null; } else {
      this.C_REF_RESULT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_REF_REPORT_NO = null; } else {
      this.C_REF_REPORT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DETERMINATION = null; } else {
      this.C_DETERMINATION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EQUIPMENT_TYPE = null; } else {
      this.C_EQUIPMENT_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EQUIPMENT_CLASS = null; } else {
      this.C_EQUIPMENT_CLASS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CAPACITY = null; } else {
      this.C_CAPACITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NO_OF_MEASUREMENTS = null; } else {
      this.C_NO_OF_MEASUREMENTS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_REQ_DATE_CALIB = null; } else {
      this.C_REQ_DATE_CALIB = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CALIB_SITE = null; } else {
      this.C_CALIB_SITE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CALIB_METHOD = null; } else {
      this.C_CALIB_METHOD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ASSET_NAME = null; } else {
      this.C_ASSET_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MODEL_NO = null; } else {
      this.C_MODEL_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PURCHASE_DATE = null; } else {
      this.C_PURCHASE_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PURCHASE_PRICE = null; } else {
      this.C_PURCHASE_PRICE = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DELIVERY_RECD = null; } else {
      this.C_DELIVERY_RECD = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_DATE_OF_INSTALL = null; } else {
      this.C_DATE_OF_INSTALL = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_TAG_NO = null; } else {
      this.C_TAG_NO = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SERIAL_NO = null; } else {
      this.C_SERIAL_NO = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_NO_OF_ACCESSORIES = null; } else {
      this.C_NO_OF_ACCESSORIES = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ACCESSORY_DETAIL = null; } else {
      this.C_ACCESSORY_DETAIL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ADDR_ROOM_NO = null; } else {
      this.C_ADDR_ROOM_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_WARRANTY_EXP_DATE = null; } else {
      this.C_WARRANTY_EXP_DATE = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_UNDER_CONTRACT = null; } else {
      this.C_UNDER_CONTRACT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONTRACT_NO = null; } else {
      this.C_CONTRACT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONTRACT_COMP = null; } else {
      this.C_CONTRACT_COMP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CONTRACT_START = null; } else {
      this.C_CONTRACT_START = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CONTRACT_END = null; } else {
      this.C_CONTRACT_END = java.sql.Timestamp.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CALIB_TYPE = null; } else {
      this.C_CALIB_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_AGE_GROUP_LABEL = null; } else {
      this.C_AGE_GROUP_LABEL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_AGE_GROUP_TEST = null; } else {
      this.C_AGE_GROUP_TEST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TOYS_DIMENSION = null; } else {
      this.C_TOYS_DIMENSION = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TOYS_FEATURES = null; } else {
      this.C_TOYS_FEATURES = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TOYS_LABEL_DETAILS = null; } else {
      this.C_TOYS_LABEL_DETAILS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TEXTILE_CLASS = null; } else {
      this.C_TEXTILE_CLASS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TEXTILE_TYPE = null; } else {
      this.C_TEXTILE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MONTAJI_REGISTERED = null; } else {
      this.C_MONTAJI_REGISTERED = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MONTAJI_REF = null; } else {
      this.C_MONTAJI_REF = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SEALING_PACK = null; } else {
      this.C_SEALING_PACK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_TYPE = null; } else {
      this.C_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FORM = null; } else {
      this.C_FORM = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FORM_TYPE = null; } else {
      this.C_FORM_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FINENESS = null; } else {
      this.C_FINENESS = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SHAPE = null; } else {
      this.C_SHAPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_LABORATORY = null; } else {
      this.C_LABORATORY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CEMARK = null; } else {
      this.C_CEMARK = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_AGE = null; } else {
      this.C_AGE = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_GENDER = null; } else {
      this.C_GENDER = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_OWNER_NAME = null; } else {
      this.C_OWNER_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_CONSIGNMENT_NO = null; } else {
      this.C_CONSIGNMENT_NO = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_SAMPLE_ORIGIN = null; } else {
      this.C_SAMPLE_ORIGIN = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_MEAT_REQ_TYP = null; } else {
      this.C_MEAT_REQ_TYP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PURPOSE_TEST = null; } else {
      this.C_PURPOSE_TEST = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_CLARITY = null; } else {
      this.C_COLL_CLARITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_DESC = null; } else {
      this.C_COLL_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_ISCOLLSAMPLE = null; } else {
      this.C_COLL_ISCOLLSAMPLE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_NAME = null; } else {
      this.C_COLL_NAME = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_COLL_EMIRATEID = null; } else {
      this.C_COLL_EMIRATEID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_DCL_USERID = null; } else {
      this.C_DCL_USERID = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FAILURE_DESC = null; } else {
      this.C_FAILURE_DESC = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_FAILURE_COMP = null; } else {
      this.C_FAILURE_COMP = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_WORK_FAIL = null; } else {
      this.C_WORK_FAIL = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PURCHASE_REF = null; } else {
      this.C_PURCHASE_REF = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PURCHASE_TYPE = null; } else {
      this.C_PURCHASE_TYPE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PEARL_FIELD = null; } else {
      this.C_PEARL_FIELD = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_POBOX = null; } else {
      this.C_POBOX = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_PRODUCT_DILUENT = null; } else {
      this.C_PRODUCT_DILUENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_ACTIVE_SUBSTANCE = null; } else {
      this.C_ACTIVE_SUBSTANCE = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_EDIT_ASSET = null; } else {
      this.C_EDIT_ASSET = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_PH = null; } else {
      this.C_PH = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_NATUREOFACTIVITY = null; } else {
      this.C_NATUREOFACTIVITY = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_CHLORINELEVEL = null; } else {
      this.C_CHLORINELEVEL = new java.math.BigDecimal(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.C_RISK_ASSESSMENT = null; } else {
      this.C_RISK_ASSESSMENT = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.C_SPECIMEN = null; } else {
      this.C_SPECIMEN = Integer.valueOf(__cur_str);
    }

    } catch (RuntimeException e) {    throw new RuntimeException("Can't parse input data: '" + __cur_str + "'", e);    }  }

  public Object clone() throws CloneNotSupportedException {
    SAMPLE o = (SAMPLE) super.clone();
    o.CHANGED_ON = (o.CHANGED_ON != null) ? (java.sql.Timestamp) o.CHANGED_ON.clone() : null;
    o.LOGIN_DATE = (o.LOGIN_DATE != null) ? (java.sql.Timestamp) o.LOGIN_DATE.clone() : null;
    o.SAMPLED_DATE = (o.SAMPLED_DATE != null) ? (java.sql.Timestamp) o.SAMPLED_DATE.clone() : null;
    o.RECD_DATE = (o.RECD_DATE != null) ? (java.sql.Timestamp) o.RECD_DATE.clone() : null;
    o.DATE_STARTED = (o.DATE_STARTED != null) ? (java.sql.Timestamp) o.DATE_STARTED.clone() : null;
    o.DUE_DATE = (o.DUE_DATE != null) ? (java.sql.Timestamp) o.DUE_DATE.clone() : null;
    o.DATE_COMPLETED = (o.DATE_COMPLETED != null) ? (java.sql.Timestamp) o.DATE_COMPLETED.clone() : null;
    o.DATE_REVIEWED = (o.DATE_REVIEWED != null) ? (java.sql.Timestamp) o.DATE_REVIEWED.clone() : null;
    o.PREP_DATE = (o.PREP_DATE != null) ? (java.sql.Timestamp) o.PREP_DATE.clone() : null;
    o.BASE_DATE = (o.BASE_DATE != null) ? (java.sql.Timestamp) o.BASE_DATE.clone() : null;
    o.AVAILABLE_DATE = (o.AVAILABLE_DATE != null) ? (java.sql.Timestamp) o.AVAILABLE_DATE.clone() : null;
    o.REQUIRED_DATE = (o.REQUIRED_DATE != null) ? (java.sql.Timestamp) o.REQUIRED_DATE.clone() : null;
    o.TARGET_DATE = (o.TARGET_DATE != null) ? (java.sql.Timestamp) o.TARGET_DATE.clone() : null;
    o.RELEASED_ON = (o.RELEASED_ON != null) ? (java.sql.Timestamp) o.RELEASED_ON.clone() : null;
    o.SEASON_DATE = (o.SEASON_DATE != null) ? (java.sql.Timestamp) o.SEASON_DATE.clone() : null;
    o.EXPIRATION_DATE = (o.EXPIRATION_DATE != null) ? (java.sql.Timestamp) o.EXPIRATION_DATE.clone() : null;
    o.T_PRODUCTION_DATE = (o.T_PRODUCTION_DATE != null) ? (java.sql.Timestamp) o.T_PRODUCTION_DATE.clone() : null;
    o.T_REPORT_DATE = (o.T_REPORT_DATE != null) ? (java.sql.Timestamp) o.T_REPORT_DATE.clone() : null;
    o.T_PLANT_RECV_DATE = (o.T_PLANT_RECV_DATE != null) ? (java.sql.Timestamp) o.T_PLANT_RECV_DATE.clone() : null;
    o.T_DISTRIBUTION_DATE = (o.T_DISTRIBUTION_DATE != null) ? (java.sql.Timestamp) o.T_DISTRIBUTION_DATE.clone() : null;
    o.T_INCUB1_END = (o.T_INCUB1_END != null) ? (java.sql.Timestamp) o.T_INCUB1_END.clone() : null;
    o.T_INCUB1_START = (o.T_INCUB1_START != null) ? (java.sql.Timestamp) o.T_INCUB1_START.clone() : null;
    o.T_INCUB2_END = (o.T_INCUB2_END != null) ? (java.sql.Timestamp) o.T_INCUB2_END.clone() : null;
    o.T_INCUB2_START = (o.T_INCUB2_START != null) ? (java.sql.Timestamp) o.T_INCUB2_START.clone() : null;
    o.C_PRODUCTION_DATE = (o.C_PRODUCTION_DATE != null) ? (java.sql.Timestamp) o.C_PRODUCTION_DATE.clone() : null;
    o.C_PAYMENT_DT = (o.C_PAYMENT_DT != null) ? (java.sql.Timestamp) o.C_PAYMENT_DT.clone() : null;
    o.C_CUST_DELIVERY_DATE = (o.C_CUST_DELIVERY_DATE != null) ? (java.sql.Timestamp) o.C_CUST_DELIVERY_DATE.clone() : null;
    o.C_EXPECTED_DATE = (o.C_EXPECTED_DATE != null) ? (java.sql.Timestamp) o.C_EXPECTED_DATE.clone() : null;
    o.C_DATE_ONHOLD = (o.C_DATE_ONHOLD != null) ? (java.sql.Timestamp) o.C_DATE_ONHOLD.clone() : null;
    o.C_DATE_OFFHOLD = (o.C_DATE_OFFHOLD != null) ? (java.sql.Timestamp) o.C_DATE_OFFHOLD.clone() : null;
    o.C_ASPHALT_LAYINGDATE = (o.C_ASPHALT_LAYINGDATE != null) ? (java.sql.Timestamp) o.C_ASPHALT_LAYINGDATE.clone() : null;
    o.C_CONCRETE_ESTIMATEDTESTDATE = (o.C_CONCRETE_ESTIMATEDTESTDATE != null) ? (java.sql.Timestamp) o.C_CONCRETE_ESTIMATEDTESTDATE.clone() : null;
    o.C_DISCARD_DATE = (o.C_DISCARD_DATE != null) ? (java.sql.Timestamp) o.C_DISCARD_DATE.clone() : null;
    o.C_REQ_DATE_CALIB = (o.C_REQ_DATE_CALIB != null) ? (java.sql.Timestamp) o.C_REQ_DATE_CALIB.clone() : null;
    o.C_PURCHASE_DATE = (o.C_PURCHASE_DATE != null) ? (java.sql.Timestamp) o.C_PURCHASE_DATE.clone() : null;
    o.C_DELIVERY_RECD = (o.C_DELIVERY_RECD != null) ? (java.sql.Timestamp) o.C_DELIVERY_RECD.clone() : null;
    o.C_DATE_OF_INSTALL = (o.C_DATE_OF_INSTALL != null) ? (java.sql.Timestamp) o.C_DATE_OF_INSTALL.clone() : null;
    o.C_WARRANTY_EXP_DATE = (o.C_WARRANTY_EXP_DATE != null) ? (java.sql.Timestamp) o.C_WARRANTY_EXP_DATE.clone() : null;
    o.C_CONTRACT_START = (o.C_CONTRACT_START != null) ? (java.sql.Timestamp) o.C_CONTRACT_START.clone() : null;
    o.C_CONTRACT_END = (o.C_CONTRACT_END != null) ? (java.sql.Timestamp) o.C_CONTRACT_END.clone() : null;
    return o;
  }

  public void clone0(SAMPLE o) throws CloneNotSupportedException {
    o.CHANGED_ON = (o.CHANGED_ON != null) ? (java.sql.Timestamp) o.CHANGED_ON.clone() : null;
    o.LOGIN_DATE = (o.LOGIN_DATE != null) ? (java.sql.Timestamp) o.LOGIN_DATE.clone() : null;
    o.SAMPLED_DATE = (o.SAMPLED_DATE != null) ? (java.sql.Timestamp) o.SAMPLED_DATE.clone() : null;
    o.RECD_DATE = (o.RECD_DATE != null) ? (java.sql.Timestamp) o.RECD_DATE.clone() : null;
    o.DATE_STARTED = (o.DATE_STARTED != null) ? (java.sql.Timestamp) o.DATE_STARTED.clone() : null;
    o.DUE_DATE = (o.DUE_DATE != null) ? (java.sql.Timestamp) o.DUE_DATE.clone() : null;
    o.DATE_COMPLETED = (o.DATE_COMPLETED != null) ? (java.sql.Timestamp) o.DATE_COMPLETED.clone() : null;
    o.DATE_REVIEWED = (o.DATE_REVIEWED != null) ? (java.sql.Timestamp) o.DATE_REVIEWED.clone() : null;
    o.PREP_DATE = (o.PREP_DATE != null) ? (java.sql.Timestamp) o.PREP_DATE.clone() : null;
    o.BASE_DATE = (o.BASE_DATE != null) ? (java.sql.Timestamp) o.BASE_DATE.clone() : null;
    o.AVAILABLE_DATE = (o.AVAILABLE_DATE != null) ? (java.sql.Timestamp) o.AVAILABLE_DATE.clone() : null;
    o.REQUIRED_DATE = (o.REQUIRED_DATE != null) ? (java.sql.Timestamp) o.REQUIRED_DATE.clone() : null;
    o.TARGET_DATE = (o.TARGET_DATE != null) ? (java.sql.Timestamp) o.TARGET_DATE.clone() : null;
    o.RELEASED_ON = (o.RELEASED_ON != null) ? (java.sql.Timestamp) o.RELEASED_ON.clone() : null;
    o.SEASON_DATE = (o.SEASON_DATE != null) ? (java.sql.Timestamp) o.SEASON_DATE.clone() : null;
    o.EXPIRATION_DATE = (o.EXPIRATION_DATE != null) ? (java.sql.Timestamp) o.EXPIRATION_DATE.clone() : null;
    o.T_PRODUCTION_DATE = (o.T_PRODUCTION_DATE != null) ? (java.sql.Timestamp) o.T_PRODUCTION_DATE.clone() : null;
    o.T_REPORT_DATE = (o.T_REPORT_DATE != null) ? (java.sql.Timestamp) o.T_REPORT_DATE.clone() : null;
    o.T_PLANT_RECV_DATE = (o.T_PLANT_RECV_DATE != null) ? (java.sql.Timestamp) o.T_PLANT_RECV_DATE.clone() : null;
    o.T_DISTRIBUTION_DATE = (o.T_DISTRIBUTION_DATE != null) ? (java.sql.Timestamp) o.T_DISTRIBUTION_DATE.clone() : null;
    o.T_INCUB1_END = (o.T_INCUB1_END != null) ? (java.sql.Timestamp) o.T_INCUB1_END.clone() : null;
    o.T_INCUB1_START = (o.T_INCUB1_START != null) ? (java.sql.Timestamp) o.T_INCUB1_START.clone() : null;
    o.T_INCUB2_END = (o.T_INCUB2_END != null) ? (java.sql.Timestamp) o.T_INCUB2_END.clone() : null;
    o.T_INCUB2_START = (o.T_INCUB2_START != null) ? (java.sql.Timestamp) o.T_INCUB2_START.clone() : null;
    o.C_PRODUCTION_DATE = (o.C_PRODUCTION_DATE != null) ? (java.sql.Timestamp) o.C_PRODUCTION_DATE.clone() : null;
    o.C_PAYMENT_DT = (o.C_PAYMENT_DT != null) ? (java.sql.Timestamp) o.C_PAYMENT_DT.clone() : null;
    o.C_CUST_DELIVERY_DATE = (o.C_CUST_DELIVERY_DATE != null) ? (java.sql.Timestamp) o.C_CUST_DELIVERY_DATE.clone() : null;
    o.C_EXPECTED_DATE = (o.C_EXPECTED_DATE != null) ? (java.sql.Timestamp) o.C_EXPECTED_DATE.clone() : null;
    o.C_DATE_ONHOLD = (o.C_DATE_ONHOLD != null) ? (java.sql.Timestamp) o.C_DATE_ONHOLD.clone() : null;
    o.C_DATE_OFFHOLD = (o.C_DATE_OFFHOLD != null) ? (java.sql.Timestamp) o.C_DATE_OFFHOLD.clone() : null;
    o.C_ASPHALT_LAYINGDATE = (o.C_ASPHALT_LAYINGDATE != null) ? (java.sql.Timestamp) o.C_ASPHALT_LAYINGDATE.clone() : null;
    o.C_CONCRETE_ESTIMATEDTESTDATE = (o.C_CONCRETE_ESTIMATEDTESTDATE != null) ? (java.sql.Timestamp) o.C_CONCRETE_ESTIMATEDTESTDATE.clone() : null;
    o.C_DISCARD_DATE = (o.C_DISCARD_DATE != null) ? (java.sql.Timestamp) o.C_DISCARD_DATE.clone() : null;
    o.C_REQ_DATE_CALIB = (o.C_REQ_DATE_CALIB != null) ? (java.sql.Timestamp) o.C_REQ_DATE_CALIB.clone() : null;
    o.C_PURCHASE_DATE = (o.C_PURCHASE_DATE != null) ? (java.sql.Timestamp) o.C_PURCHASE_DATE.clone() : null;
    o.C_DELIVERY_RECD = (o.C_DELIVERY_RECD != null) ? (java.sql.Timestamp) o.C_DELIVERY_RECD.clone() : null;
    o.C_DATE_OF_INSTALL = (o.C_DATE_OF_INSTALL != null) ? (java.sql.Timestamp) o.C_DATE_OF_INSTALL.clone() : null;
    o.C_WARRANTY_EXP_DATE = (o.C_WARRANTY_EXP_DATE != null) ? (java.sql.Timestamp) o.C_WARRANTY_EXP_DATE.clone() : null;
    o.C_CONTRACT_START = (o.C_CONTRACT_START != null) ? (java.sql.Timestamp) o.C_CONTRACT_START.clone() : null;
    o.C_CONTRACT_END = (o.C_CONTRACT_END != null) ? (java.sql.Timestamp) o.C_CONTRACT_END.clone() : null;
  }

  public Map<String, Object> getFieldMap() {
    Map<String, Object> __sqoop$field_map = new HashMap<String, Object>();
    __sqoop$field_map.put("SAMPLE_NUMBER", this.SAMPLE_NUMBER);
    __sqoop$field_map.put("TEXT_ID", this.TEXT_ID);
    __sqoop$field_map.put("STATUS", this.STATUS);
    __sqoop$field_map.put("OLD_STATUS", this.OLD_STATUS);
    __sqoop$field_map.put("DISP_FLDS", this.DISP_FLDS);
    __sqoop$field_map.put("LABEL_MASK", this.LABEL_MASK);
    __sqoop$field_map.put("IN_SPEC", this.IN_SPEC);
    __sqoop$field_map.put("IN_CAL", this.IN_CAL);
    __sqoop$field_map.put("CHANGED_ON", this.CHANGED_ON);
    __sqoop$field_map.put("RE_SAMPLE", this.RE_SAMPLE);
    __sqoop$field_map.put("ALIQUOT", this.ALIQUOT);
    __sqoop$field_map.put("ORIGINAL_SAMPLE", this.ORIGINAL_SAMPLE);
    __sqoop$field_map.put("PARENT_SAMPLE", this.PARENT_SAMPLE);
    __sqoop$field_map.put("PARENT_ALIQUOT", this.PARENT_ALIQUOT);
    __sqoop$field_map.put("ALIQUOT_GROUP", this.ALIQUOT_GROUP);
    __sqoop$field_map.put("SAMPLE_VOLUME", this.SAMPLE_VOLUME);
    __sqoop$field_map.put("SAMPLE_UNITS", this.SAMPLE_UNITS);
    __sqoop$field_map.put("LOGIN_DATE", this.LOGIN_DATE);
    __sqoop$field_map.put("LOGIN_BY", this.LOGIN_BY);
    __sqoop$field_map.put("SAMPLED_DATE", this.SAMPLED_DATE);
    __sqoop$field_map.put("RECD_DATE", this.RECD_DATE);
    __sqoop$field_map.put("RECEIVED_BY", this.RECEIVED_BY);
    __sqoop$field_map.put("DATE_STARTED", this.DATE_STARTED);
    __sqoop$field_map.put("STARTED", this.STARTED);
    __sqoop$field_map.put("ASSIGNED_OPERATOR", this.ASSIGNED_OPERATOR);
    __sqoop$field_map.put("DUE_DATE", this.DUE_DATE);
    __sqoop$field_map.put("DATE_COMPLETED", this.DATE_COMPLETED);
    __sqoop$field_map.put("DATE_REVIEWED", this.DATE_REVIEWED);
    __sqoop$field_map.put("PREP", this.PREP);
    __sqoop$field_map.put("PREP_DATE", this.PREP_DATE);
    __sqoop$field_map.put("PREP_BY", this.PREP_BY);
    __sqoop$field_map.put("REVIEWER", this.REVIEWER);
    __sqoop$field_map.put("REVIEW_NOTE", this.REVIEW_NOTE);
    __sqoop$field_map.put("PRODUCT_CODE", this.PRODUCT_CODE);
    __sqoop$field_map.put("PRODUCT", this.PRODUCT);
    __sqoop$field_map.put("PRODUCT_VERSION", this.PRODUCT_VERSION);
    __sqoop$field_map.put("PRODUCT_GRADE", this.PRODUCT_GRADE);
    __sqoop$field_map.put("SAMPLING_POINT", this.SAMPLING_POINT);
    __sqoop$field_map.put("SAMPLE_TYPE", this.SAMPLE_TYPE);
    __sqoop$field_map.put("PROJECT", this.PROJECT);
    __sqoop$field_map.put("BATCH_NAME", this.BATCH_NAME);
    __sqoop$field_map.put("BATCH_TEMPLATE", this.BATCH_TEMPLATE);
    __sqoop$field_map.put("STEP", this.STEP);
    __sqoop$field_map.put("SAMPLE_NAME", this.SAMPLE_NAME);
    __sqoop$field_map.put("DESCRIPTION", this.DESCRIPTION);
    __sqoop$field_map.put("PRIORITY", this.PRIORITY);
    __sqoop$field_map.put("LOCATION", this.LOCATION);
    __sqoop$field_map.put("CUSTOMER", this.CUSTOMER);
    __sqoop$field_map.put("TEST_LIST", this.TEST_LIST);
    __sqoop$field_map.put("TEMPLATE", this.TEMPLATE);
    __sqoop$field_map.put("RECIPIENT", this.RECIPIENT);
    __sqoop$field_map.put("STANDARD", this.STANDARD);
    __sqoop$field_map.put("EXT_LINK", this.EXT_LINK);
    __sqoop$field_map.put("CONDITION", this.CONDITION);
    __sqoop$field_map.put("TIMEPOINT", this.TIMEPOINT);
    __sqoop$field_map.put("LOT", this.LOT);
    __sqoop$field_map.put("BASE_DATE", this.BASE_DATE);
    __sqoop$field_map.put("AVAILABLE_DATE", this.AVAILABLE_DATE);
    __sqoop$field_map.put("REQUIRED_DATE", this.REQUIRED_DATE);
    __sqoop$field_map.put("TARGET_DATE", this.TARGET_DATE);
    __sqoop$field_map.put("PARTIAL_SPEC", this.PARTIAL_SPEC);
    __sqoop$field_map.put("SPEC_TYPE", this.SPEC_TYPE);
    __sqoop$field_map.put("STAGE", this.STAGE);
    __sqoop$field_map.put("PRIMARY_IN_SPEC", this.PRIMARY_IN_SPEC);
    __sqoop$field_map.put("BATCH", this.BATCH);
    __sqoop$field_map.put("CHARGE_CODE", this.CHARGE_CODE);
    __sqoop$field_map.put("FORMULATION", this.FORMULATION);
    __sqoop$field_map.put("PROTOCOL_LEVEL", this.PROTOCOL_LEVEL);
    __sqoop$field_map.put("RELEASED", this.RELEASED);
    __sqoop$field_map.put("RELEASED_BY", this.RELEASED_BY);
    __sqoop$field_map.put("RELEASED_ON", this.RELEASED_ON);
    __sqoop$field_map.put("IN_CONTROL", this.IN_CONTROL);
    __sqoop$field_map.put("INVESTIGATION", this.INVESTIGATION);
    __sqoop$field_map.put("INVESTIGATED", this.INVESTIGATED);
    __sqoop$field_map.put("APPROVED", this.APPROVED);
    __sqoop$field_map.put("APPROVAL_GROUP", this.APPROVAL_GROUP);
    __sqoop$field_map.put("READY_FOR_APPROVAL", this.READY_FOR_APPROVAL);
    __sqoop$field_map.put("APPROVAL_ID", this.APPROVAL_ID);
    __sqoop$field_map.put("APPROVAL_ROUTING", this.APPROVAL_ROUTING);
    __sqoop$field_map.put("MODIFIED_RESULTS", this.MODIFIED_RESULTS);
    __sqoop$field_map.put("REPORT_NUMBER", this.REPORT_NUMBER);
    __sqoop$field_map.put("COMPOSITE", this.COMPOSITE);
    __sqoop$field_map.put("PARENT_COMPOSITE", this.PARENT_COMPOSITE);
    __sqoop$field_map.put("COMPOSITE_TEMPLATE", this.COMPOSITE_TEMPLATE);
    __sqoop$field_map.put("SEASON_DATE", this.SEASON_DATE);
    __sqoop$field_map.put("PEOPLE", this.PEOPLE);
    __sqoop$field_map.put("TEST_LOCATION", this.TEST_LOCATION);
    __sqoop$field_map.put("OWNER_LOCATION", this.OWNER_LOCATION);
    __sqoop$field_map.put("CHK_ALIQUOT_STATUS", this.CHK_ALIQUOT_STATUS);
    __sqoop$field_map.put("CHK_ALIQUOT_SPECS", this.CHK_ALIQUOT_SPECS);
    __sqoop$field_map.put("ALIQUOT_TEMPLATE", this.ALIQUOT_TEMPLATE);
    __sqoop$field_map.put("CALC_GROUP", this.CALC_GROUP);
    __sqoop$field_map.put("SAMPLE_EVENT", this.SAMPLE_EVENT);
    __sqoop$field_map.put("LABEL_ID", this.LABEL_ID);
    __sqoop$field_map.put("HAS_FLAGS", this.HAS_FLAGS);
    __sqoop$field_map.put("VARIATION", this.VARIATION);
    __sqoop$field_map.put("SAMPLED_BY", this.SAMPLED_BY);
    __sqoop$field_map.put("SAMPLED", this.SAMPLED);
    __sqoop$field_map.put("ORDER_NUM", this.ORDER_NUM);
    __sqoop$field_map.put("LAST_ORDER_NUM", this.LAST_ORDER_NUM);
    __sqoop$field_map.put("STORAGE_CONDITION", this.STORAGE_CONDITION);
    __sqoop$field_map.put("CONTAINER_TYPE", this.CONTAINER_TYPE);
    __sqoop$field_map.put("NUM_CONTAINERS", this.NUM_CONTAINERS);
    __sqoop$field_map.put("IMPORTANT_MESSAGE", this.IMPORTANT_MESSAGE);
    __sqoop$field_map.put("OBSERVATIONS", this.OBSERVATIONS);
    __sqoop$field_map.put("LAB", this.LAB);
    __sqoop$field_map.put("EXPIRATION_DATE", this.EXPIRATION_DATE);
    __sqoop$field_map.put("REQD_VOLUME", this.REQD_VOLUME);
    __sqoop$field_map.put("COLLECTION_METHOD", this.COLLECTION_METHOD);
    __sqoop$field_map.put("COLLECTION_OFFSET", this.COLLECTION_OFFSET);
    __sqoop$field_map.put("SIGNED", this.SIGNED);
    __sqoop$field_map.put("CASE_NAME", this.CASE_NAME);
    __sqoop$field_map.put("CONTRACT_NUMBER", this.CONTRACT_NUMBER);
    __sqoop$field_map.put("BILLING_ITEM_DESC", this.BILLING_ITEM_DESC);
    __sqoop$field_map.put("INTERPRETED", this.INTERPRETED);
    __sqoop$field_map.put("INTERP_TYPE", this.INTERP_TYPE);
    __sqoop$field_map.put("INSPECT_PNT_NUM", this.INSPECT_PNT_NUM);
    __sqoop$field_map.put("INSPECTION_LOT_NUM", this.INSPECTION_LOT_NUM);
    __sqoop$field_map.put("IS_INSPECT_PNT", this.IS_INSPECT_PNT);
    __sqoop$field_map.put("PLANT", this.PLANT);
    __sqoop$field_map.put("USERC1_VALUE", this.USERC1_VALUE);
    __sqoop$field_map.put("USERC2_VALUE", this.USERC2_VALUE);
    __sqoop$field_map.put("USERD1_VALUE", this.USERD1_VALUE);
    __sqoop$field_map.put("USERN1_VALUE", this.USERN1_VALUE);
    __sqoop$field_map.put("USERN2_VALUE", this.USERN2_VALUE);
    __sqoop$field_map.put("USERT1_VALUE", this.USERT1_VALUE);
    __sqoop$field_map.put("SAP_SELECTED_SET", this.SAP_SELECTED_SET);
    __sqoop$field_map.put("SAP_CODE_GROUP", this.SAP_CODE_GROUP);
    __sqoop$field_map.put("SAP_SAMPLE_NUMBER", this.SAP_SAMPLE_NUMBER);
    __sqoop$field_map.put("SAP_SS_PLANT", this.SAP_SS_PLANT);
    __sqoop$field_map.put("SAP_SAMPLE_COUNT", this.SAP_SAMPLE_COUNT);
    __sqoop$field_map.put("OPERATION_NUMBER", this.OPERATION_NUMBER);
    __sqoop$field_map.put("STORAGE_LOC_NO", this.STORAGE_LOC_NO);
    __sqoop$field_map.put("EXTERNAL_LOCATION", this.EXTERNAL_LOCATION);
    __sqoop$field_map.put("FORMULATION_NAME", this.FORMULATION_NAME);
    __sqoop$field_map.put("STANDARD_REAGENT", this.STANDARD_REAGENT);
    __sqoop$field_map.put("CONVERSION_GROUPS", this.CONVERSION_GROUPS);
    __sqoop$field_map.put("REPORTED_RSLT_OOS", this.REPORTED_RSLT_OOS);
    __sqoop$field_map.put("GROUP_NAME", this.GROUP_NAME);
    __sqoop$field_map.put("PROCESS_UNIT", this.PROCESS_UNIT);
    __sqoop$field_map.put("HAZARD", this.HAZARD);
    __sqoop$field_map.put("INSTRUMENT", this.INSTRUMENT);
    __sqoop$field_map.put("T_SITE", this.T_SITE);
    __sqoop$field_map.put("T_PLANT", this.T_PLANT);
    __sqoop$field_map.put("T_CERTIFICATE", this.T_CERTIFICATE);
    __sqoop$field_map.put("T_CONTAINER", this.T_CONTAINER);
    __sqoop$field_map.put("T_OVERDUE", this.T_OVERDUE);
    __sqoop$field_map.put("T_PO_NUMBER", this.T_PO_NUMBER);
    __sqoop$field_map.put("T_PRODUCTION_DATE", this.T_PRODUCTION_DATE);
    __sqoop$field_map.put("T_REPORT_DATE", this.T_REPORT_DATE);
    __sqoop$field_map.put("T_REQUESTED_BY", this.T_REQUESTED_BY);
    __sqoop$field_map.put("T_LONG_NOTE", this.T_LONG_NOTE);
    __sqoop$field_map.put("T_SHIFT_CODE", this.T_SHIFT_CODE);
    __sqoop$field_map.put("T_SUPP_BATCH_NO", this.T_SUPP_BATCH_NO);
    __sqoop$field_map.put("T_SUPPLIER", this.T_SUPPLIER);
    __sqoop$field_map.put("T_TRUCK_VESSEL", this.T_TRUCK_VESSEL);
    __sqoop$field_map.put("T_PLANT_RECV_BY", this.T_PLANT_RECV_BY);
    __sqoop$field_map.put("T_PLANT_RECV_DATE", this.T_PLANT_RECV_DATE);
    __sqoop$field_map.put("C_PRIORITY", this.C_PRIORITY);
    __sqoop$field_map.put("STORAGE_TEMPLATE", this.STORAGE_TEMPLATE);
    __sqoop$field_map.put("ALLOW_CHLD_ALQTS", this.ALLOW_CHLD_ALQTS);
    __sqoop$field_map.put("PHASE", this.PHASE);
    __sqoop$field_map.put("SCHEDULE_NUMBER", this.SCHEDULE_NUMBER);
    __sqoop$field_map.put("T_ACTION_NUMBER", this.T_ACTION_NUMBER);
    __sqoop$field_map.put("T_BATCH_NAME1", this.T_BATCH_NAME1);
    __sqoop$field_map.put("T_BATCH_NAME2", this.T_BATCH_NAME2);
    __sqoop$field_map.put("T_BATCH_NAME3", this.T_BATCH_NAME3);
    __sqoop$field_map.put("T_BATCH_NAME4", this.T_BATCH_NAME4);
    __sqoop$field_map.put("T_BATCH_NAME5", this.T_BATCH_NAME5);
    __sqoop$field_map.put("T_BATCH_NAME6", this.T_BATCH_NAME6);
    __sqoop$field_map.put("T_COLLECT_SCHEME", this.T_COLLECT_SCHEME);
    __sqoop$field_map.put("T_COMPOSITE_GROUP", this.T_COMPOSITE_GROUP);
    __sqoop$field_map.put("T_DISTRIBUTION_BY", this.T_DISTRIBUTION_BY);
    __sqoop$field_map.put("T_DISTRIBUTION_DATE", this.T_DISTRIBUTION_DATE);
    __sqoop$field_map.put("T_EM_PLAN", this.T_EM_PLAN);
    __sqoop$field_map.put("T_INCUB1_BATCH", this.T_INCUB1_BATCH);
    __sqoop$field_map.put("T_INCUB1_END", this.T_INCUB1_END);
    __sqoop$field_map.put("T_INCUB1_START", this.T_INCUB1_START);
    __sqoop$field_map.put("T_INCUB2_BATCH", this.T_INCUB2_BATCH);
    __sqoop$field_map.put("T_INCUB2_END", this.T_INCUB2_END);
    __sqoop$field_map.put("T_INCUB2_START", this.T_INCUB2_START);
    __sqoop$field_map.put("T_MEDIA_REFERENCE", this.T_MEDIA_REFERENCE);
    __sqoop$field_map.put("T_ORIGINAL_SAMPLE", this.T_ORIGINAL_SAMPLE);
    __sqoop$field_map.put("T_PERSONNEL", this.T_PERSONNEL);
    __sqoop$field_map.put("T_PERSONNEL_SET", this.T_PERSONNEL_SET);
    __sqoop$field_map.put("T_SAMPLE_TYPE", this.T_SAMPLE_TYPE);
    __sqoop$field_map.put("T_SCHEDULE_GROUP", this.T_SCHEDULE_GROUP);
    __sqoop$field_map.put("T_SUITE", this.T_SUITE);
    __sqoop$field_map.put("T_TRANSIT_LOCATION", this.T_TRANSIT_LOCATION);
    __sqoop$field_map.put("T_VALIDATION", this.T_VALIDATION);
    __sqoop$field_map.put("C_REFERENCE_ID", this.C_REFERENCE_ID);
    __sqoop$field_map.put("C_SAMPLING_REASON", this.C_SAMPLING_REASON);
    __sqoop$field_map.put("C_CUSTOMER_TYPE", this.C_CUSTOMER_TYPE);
    __sqoop$field_map.put("C_REQUEST_TYPE", this.C_REQUEST_TYPE);
    __sqoop$field_map.put("C_OTHER_SAMPLE_SOURCE", this.C_OTHER_SAMPLE_SOURCE);
    __sqoop$field_map.put("C_CUST_ID", this.C_CUST_ID);
    __sqoop$field_map.put("C_CLIENT_TYPE", this.C_CLIENT_TYPE);
    __sqoop$field_map.put("C_REQ_SAMP_TYPE", this.C_REQ_SAMP_TYPE);
    __sqoop$field_map.put("C_SAMPLE_SOURCE", this.C_SAMPLE_SOURCE);
    __sqoop$field_map.put("C_DM_BARCODE", this.C_DM_BARCODE);
    __sqoop$field_map.put("C_REQ_EXT_REFERENCE", this.C_REQ_EXT_REFERENCE);
    __sqoop$field_map.put("C_EXPRESS_SERVICE", this.C_EXPRESS_SERVICE);
    __sqoop$field_map.put("C_HARDCOPY_REQUIRED", this.C_HARDCOPY_REQUIRED);
    __sqoop$field_map.put("C_REQ_REMARKS", this.C_REQ_REMARKS);
    __sqoop$field_map.put("C_REQ_COPIES", this.C_REQ_COPIES);
    __sqoop$field_map.put("C_REQ_EDIT", this.C_REQ_EDIT);
    __sqoop$field_map.put("C_TOTAL_SERVICE_FEE", this.C_TOTAL_SERVICE_FEE);
    __sqoop$field_map.put("C_PRODUCT_GROUP", this.C_PRODUCT_GROUP);
    __sqoop$field_map.put("C_PRODUCT_CATEGORY", this.C_PRODUCT_CATEGORY);
    __sqoop$field_map.put("C_PRODUCTION_DATE", this.C_PRODUCTION_DATE);
    __sqoop$field_map.put("C_NO_OF_UNIT", this.C_NO_OF_UNIT);
    __sqoop$field_map.put("C_SAMPLE_CONDITION", this.C_SAMPLE_CONDITION);
    __sqoop$field_map.put("C_TEMP_REC", this.C_TEMP_REC);
    __sqoop$field_map.put("C_POINT_OF_SAMPLING", this.C_POINT_OF_SAMPLING);
    __sqoop$field_map.put("C_REQ_SAMP_COLLECTION", this.C_REQ_SAMP_COLLECTION);
    __sqoop$field_map.put("C_REQ_SAMP_BAL_RETURN", this.C_REQ_SAMP_BAL_RETURN);
    __sqoop$field_map.put("C_HAZARD", this.C_HAZARD);
    __sqoop$field_map.put("C_BATCH_NO", this.C_BATCH_NO);
    __sqoop$field_map.put("C_REQUEST_NO", this.C_REQUEST_NO);
    __sqoop$field_map.put("C_BILLING_TYPE", this.C_BILLING_TYPE);
    __sqoop$field_map.put("C_TOTAL_TEST_CHARGE", this.C_TOTAL_TEST_CHARGE);
    __sqoop$field_map.put("C_VOUCHER", this.C_VOUCHER);
    __sqoop$field_map.put("C_ERAD_NO", this.C_ERAD_NO);
    __sqoop$field_map.put("C_RECEIPT", this.C_RECEIPT);
    __sqoop$field_map.put("C_PAYMENT_DT", this.C_PAYMENT_DT);
    __sqoop$field_map.put("C_PAYMENT_SRC", this.C_PAYMENT_SRC);
    __sqoop$field_map.put("C_PAYMENT_STATUS", this.C_PAYMENT_STATUS);
    __sqoop$field_map.put("C_CUST_DELIVERY_DATE", this.C_CUST_DELIVERY_DATE);
    __sqoop$field_map.put("C_SAMPLE_OPINION", this.C_SAMPLE_OPINION);
    __sqoop$field_map.put("C_SUBCAT_ID", this.C_SUBCAT_ID);
    __sqoop$field_map.put("C_PRODCAT_ID", this.C_PRODCAT_ID);
    __sqoop$field_map.put("C_PROD_GROUP_ID", this.C_PROD_GROUP_ID);
    __sqoop$field_map.put("C_MSG_ID", this.C_MSG_ID);
    __sqoop$field_map.put("C_MSG_DIGEST", this.C_MSG_DIGEST);
    __sqoop$field_map.put("C_REQ_SOURCE", this.C_REQ_SOURCE);
    __sqoop$field_map.put("C_ITEM_ID", this.C_ITEM_ID);
    __sqoop$field_map.put("C_SRC_REQ_ID", this.C_SRC_REQ_ID);
    __sqoop$field_map.put("C_EXPECTED_DATE", this.C_EXPECTED_DATE);
    __sqoop$field_map.put("C_PRODUCT_DESC", this.C_PRODUCT_DESC);
    __sqoop$field_map.put("C_DATE_ONHOLD", this.C_DATE_ONHOLD);
    __sqoop$field_map.put("C_DATE_OFFHOLD", this.C_DATE_OFFHOLD);
    __sqoop$field_map.put("C_ONHOLD_REASON", this.C_ONHOLD_REASON);
    __sqoop$field_map.put("LATITUDE", this.LATITUDE);
    __sqoop$field_map.put("LONGITUDE", this.LONGITUDE);
    __sqoop$field_map.put("C_ON_SITE_PRESERVATION", this.C_ON_SITE_PRESERVATION);
    __sqoop$field_map.put("C_PRESERVATION_METHOD", this.C_PRESERVATION_METHOD);
    __sqoop$field_map.put("C_SAMPLING_PROCEDURE", this.C_SAMPLING_PROCEDURE);
    __sqoop$field_map.put("C_SAMPLING_APPARATUS", this.C_SAMPLING_APPARATUS);
    __sqoop$field_map.put("C_APPEARANCE", this.C_APPEARANCE);
    __sqoop$field_map.put("C_COLOUR", this.C_COLOUR);
    __sqoop$field_map.put("C_ODOUR", this.C_ODOUR);
    __sqoop$field_map.put("C_SAMPLING_COLLECTION_LOC", this.C_SAMPLING_COLLECTION_LOC);
    __sqoop$field_map.put("C_REPORT_ID", this.C_REPORT_ID);
    __sqoop$field_map.put("C_DELIVERED_BY", this.C_DELIVERED_BY);
    __sqoop$field_map.put("C_MAKANI_NO", this.C_MAKANI_NO);
    __sqoop$field_map.put("C_COUNTRY", this.C_COUNTRY);
    __sqoop$field_map.put("C_BUILDING_FLOOR", this.C_BUILDING_FLOOR);
    __sqoop$field_map.put("C_LOCATION_DESC", this.C_LOCATION_DESC);
    __sqoop$field_map.put("C_ITEM_BARCODE", this.C_ITEM_BARCODE);
    __sqoop$field_map.put("C_ITEM_BRAND", this.C_ITEM_BRAND);
    __sqoop$field_map.put("C_MANUFACTURER", this.C_MANUFACTURER);
    __sqoop$field_map.put("C_COUNTRY_ORIGIN", this.C_COUNTRY_ORIGIN);
    __sqoop$field_map.put("C_ITEM_TRADE_NAME", this.C_ITEM_TRADE_NAME);
    __sqoop$field_map.put("C_PROCESS_ONE", this.C_PROCESS_ONE);
    __sqoop$field_map.put("C_PROCESS_TWO", this.C_PROCESS_TWO);
    __sqoop$field_map.put("C_SHELF_LIFE", this.C_SHELF_LIFE);
    __sqoop$field_map.put("C_SHELF_LIFE_UNIT", this.C_SHELF_LIFE_UNIT);
    __sqoop$field_map.put("C_STORAGE_CONDITION", this.C_STORAGE_CONDITION);
    __sqoop$field_map.put("C_WEIGHT", this.C_WEIGHT);
    __sqoop$field_map.put("C_WEIGHT_UNIT", this.C_WEIGHT_UNIT);
    __sqoop$field_map.put("C_PACKAGING_TYPE", this.C_PACKAGING_TYPE);
    __sqoop$field_map.put("C_TEST_TYPE", this.C_TEST_TYPE);
    __sqoop$field_map.put("C_EXTERNAL_REFERENCE", this.C_EXTERNAL_REFERENCE);
    __sqoop$field_map.put("C_NOMINAL_SIZE", this.C_NOMINAL_SIZE);
    __sqoop$field_map.put("C_LAYER_MIX_TYPE", this.C_LAYER_MIX_TYPE);
    __sqoop$field_map.put("C_SAMPLE_UNIT", this.C_SAMPLE_UNIT);
    __sqoop$field_map.put("C_SAMP_QNTY", this.C_SAMP_QNTY);
    __sqoop$field_map.put("C_SAMPLED_BY", this.C_SAMPLED_BY);
    __sqoop$field_map.put("C_BITUMEN_LOCALSUPPLIER", this.C_BITUMEN_LOCALSUPPLIER);
    __sqoop$field_map.put("C_BLOCK_TOTALBUNDLES", this.C_BLOCK_TOTALBUNDLES);
    __sqoop$field_map.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX", this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX);
    __sqoop$field_map.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY", this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY);
    __sqoop$field_map.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ", this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ);
    __sqoop$field_map.put("C_BLOCK_BLOCKSPERBUNDLE", this.C_BLOCK_BLOCKSPERBUNDLE);
    __sqoop$field_map.put("C_BLOCK_RELATEDCERTIFICATIONREQUESTID", this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID);
    __sqoop$field_map.put("C_MORTAR_WATERORCEMENTRATIO", this.C_MORTAR_WATERORCEMENTRATIO);
    __sqoop$field_map.put("C_MORTAR_TYPEOFMORTAR", this.C_MORTAR_TYPEOFMORTAR);
    __sqoop$field_map.put("C_THERMALINSULATION_NOMTHICKNESS", this.C_THERMALINSULATION_NOMTHICKNESS);
    __sqoop$field_map.put("C_THERMALINSULATION_NOMDENSITY", this.C_THERMALINSULATION_NOMDENSITY);
    __sqoop$field_map.put("C_THERMALINSULATION_NOMDIAMETER", this.C_THERMALINSULATION_NOMDIAMETER);
    __sqoop$field_map.put("C_THERMALINSULATION_FACINGTYPE", this.C_THERMALINSULATION_FACINGTYPE);
    __sqoop$field_map.put("C_THERMALINSULATION_FACINGDESCRIPTION", this.C_THERMALINSULATION_FACINGDESCRIPTION);
    __sqoop$field_map.put("C_THERMALINSULATION_TESTTEMPORHUMIDITY", this.C_THERMALINSULATION_TESTTEMPORHUMIDITY);
    __sqoop$field_map.put("C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY", this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY);
    __sqoop$field_map.put("C_THERMALINSULATION_AGEOFSAMPLEDAYS", this.C_THERMALINSULATION_AGEOFSAMPLEDAYS);
    __sqoop$field_map.put("C_LUBEOIL_VISCOSITYGRADE", this.C_LUBEOIL_VISCOSITYGRADE);
    __sqoop$field_map.put("C_ASPHALT_REFGMB", this.C_ASPHALT_REFGMB);
    __sqoop$field_map.put("C_ASPHALT_REFGSB", this.C_ASPHALT_REFGSB);
    __sqoop$field_map.put("C_ASPHALT_REFGSE", this.C_ASPHALT_REFGSE);
    __sqoop$field_map.put("C_ASPHALT_REFGB", this.C_ASPHALT_REFGB);
    __sqoop$field_map.put("C_ASPHALT_LAYINGDATE", this.C_ASPHALT_LAYINGDATE);
    __sqoop$field_map.put("C_ASPHALT_REFMARSHALLREQNO", this.C_ASPHALT_REFMARSHALLREQNO);
    __sqoop$field_map.put("C_ASPHALT_REFBITUMENREQNO", this.C_ASPHALT_REFBITUMENREQNO);
    __sqoop$field_map.put("C_ASPHALT_REFMIX", this.C_ASPHALT_REFMIX);
    __sqoop$field_map.put("C_ASPHALT_CALIBRATIONFACTOR", this.C_ASPHALT_CALIBRATIONFACTOR);
    __sqoop$field_map.put("C_ASPHALT_GRADINGORBITUMENSPECS", this.C_ASPHALT_GRADINGORBITUMENSPECS);
    __sqoop$field_map.put("C_ASPHALT_OTHERSPECS", this.C_ASPHALT_OTHERSPECS);
    __sqoop$field_map.put("C_CEMENT_CLASSOFCEMENT", this.C_CEMENT_CLASSOFCEMENT);
    __sqoop$field_map.put("C_CONCRETE_GRADEOFCONCRETE", this.C_CONCRETE_GRADEOFCONCRETE);
    __sqoop$field_map.put("C_CONCRETE_CEMENTCONTENT", this.C_CONCRETE_CEMENTCONTENT);
    __sqoop$field_map.put("C_CONCRETE_TESTINGAGEOFSAMPLE", this.C_CONCRETE_TESTINGAGEOFSAMPLE);
    __sqoop$field_map.put("C_CONCRETE_ESTIMATEDTESTDATE", this.C_CONCRETE_ESTIMATEDTESTDATE);
    __sqoop$field_map.put("C_CONCRETE_TRUCKNUMBER", this.C_CONCRETE_TRUCKNUMBER);
    __sqoop$field_map.put("C_CONCRETE_PLACEOFMAKINGCUBES", this.C_CONCRETE_PLACEOFMAKINGCUBES);
    __sqoop$field_map.put("C_CONCRETE_EQUIPMENTTYPEUSED", this.C_CONCRETE_EQUIPMENTTYPEUSED);
    __sqoop$field_map.put("C_CONCRETE_CURINGORSTORAGECONDITIONS", this.C_CONCRETE_CURINGORSTORAGECONDITIONS);
    __sqoop$field_map.put("C_CONCRETE_METHODOFCOMPACTION", this.C_CONCRETE_METHODOFCOMPACTION);
    __sqoop$field_map.put("C_CONCRETE_CONDITIONOFSAMPLE", this.C_CONCRETE_CONDITIONOFSAMPLE);
    __sqoop$field_map.put("C_FRESHCONCRETE_CEMENT", this.C_FRESHCONCRETE_CEMENT);
    __sqoop$field_map.put("C_FRESHCONCRETE_CEMENTTYPE", this.C_FRESHCONCRETE_CEMENTTYPE);
    __sqoop$field_map.put("C_FRESHCONCRETE_ADMIXTURE", this.C_FRESHCONCRETE_ADMIXTURE);
    __sqoop$field_map.put("C_FRESHCONCRETE_ADMIXTURETYPE", this.C_FRESHCONCRETE_ADMIXTURETYPE);
    __sqoop$field_map.put("C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE", this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE);
    __sqoop$field_map.put("C_FRESHCONCRETE_AGGREGATE_20MM", this.C_FRESHCONCRETE_AGGREGATE_20MM);
    __sqoop$field_map.put("C_FRESHCONCRETE_AGGREGATE_10MM", this.C_FRESHCONCRETE_AGGREGATE_10MM);
    __sqoop$field_map.put("C_FRESHCONCRETE_AGGREGATE_1MM", this.C_FRESHCONCRETE_AGGREGATE_1MM);
    __sqoop$field_map.put("C_FRESHCONCRETE_CONCRETE_CLASS_GRADE", this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE);
    __sqoop$field_map.put("C_SOIL_MDD", this.C_SOIL_MDD);
    __sqoop$field_map.put("C_SOIL_OMC", this.C_SOIL_OMC);
    __sqoop$field_map.put("C_SOIL_MDD_OMC_REF", this.C_SOIL_MDD_OMC_REF);
    __sqoop$field_map.put("C_SOIL_BFRL", this.C_SOIL_BFRL);
    __sqoop$field_map.put("C_SOIL_LAYER_THICKNESSMM", this.C_SOIL_LAYER_THICKNESSMM);
    __sqoop$field_map.put("C_SOIL_SOURCE_MINERAL_AGG", this.C_SOIL_SOURCE_MINERAL_AGG);
    __sqoop$field_map.put("C_STEEL_MANUFACTURER_CERT_NO", this.C_STEEL_MANUFACTURER_CERT_NO);
    __sqoop$field_map.put("C_STEEL_GRADE_STEEL", this.C_STEEL_GRADE_STEEL);
    __sqoop$field_map.put("C_STEEL_LOCAL_SUPPLIER", this.C_STEEL_LOCAL_SUPPLIER);
    __sqoop$field_map.put("C_STEEL_HEAT_NUMBER", this.C_STEEL_HEAT_NUMBER);
    __sqoop$field_map.put("C_PRODUCT_TEST_SERV", this.C_PRODUCT_TEST_SERV);
    __sqoop$field_map.put("C_SAMPLING_METHOD", this.C_SAMPLING_METHOD);
    __sqoop$field_map.put("C_SAMPLE_DESC", this.C_SAMPLE_DESC);
    __sqoop$field_map.put("C_BATCH_SIZE", this.C_BATCH_SIZE);
    __sqoop$field_map.put("C_UNITNO", this.C_UNITNO);
    __sqoop$field_map.put("C_UNITSIZE", this.C_UNITSIZE);
    __sqoop$field_map.put("C_NO_INCREMENT", this.C_NO_INCREMENT);
    __sqoop$field_map.put("C_MORE_SAMPLE_NOTE", this.C_MORE_SAMPLE_NOTE);
    __sqoop$field_map.put("C_STAGES", this.C_STAGES);
    __sqoop$field_map.put("C_RETURN_NOTE", this.C_RETURN_NOTE);
    __sqoop$field_map.put("C_DISCARD", this.C_DISCARD);
    __sqoop$field_map.put("C_DISCARD_DATE", this.C_DISCARD_DATE);
    __sqoop$field_map.put("C_DISCARD_BY", this.C_DISCARD_BY);
    __sqoop$field_map.put("C_TRAVEL_CALCULATED", this.C_TRAVEL_CALCULATED);
    __sqoop$field_map.put("C_PHYSICAL_OBSERVATION", this.C_PHYSICAL_OBSERVATION);
    __sqoop$field_map.put("C_SENDER_NO", this.C_SENDER_NO);
    __sqoop$field_map.put("C_REF_SENDER_NO", this.C_REF_SENDER_NO);
    __sqoop$field_map.put("C_TESTLAB", this.C_TESTLAB);
    __sqoop$field_map.put("C_PRIMARY_RESULT", this.C_PRIMARY_RESULT);
    __sqoop$field_map.put("C_PRIMARY_REPORT_NO", this.C_PRIMARY_REPORT_NO);
    __sqoop$field_map.put("C_REF_RESULT", this.C_REF_RESULT);
    __sqoop$field_map.put("C_REF_REPORT_NO", this.C_REF_REPORT_NO);
    __sqoop$field_map.put("C_DETERMINATION", this.C_DETERMINATION);
    __sqoop$field_map.put("C_EQUIPMENT_TYPE", this.C_EQUIPMENT_TYPE);
    __sqoop$field_map.put("C_EQUIPMENT_CLASS", this.C_EQUIPMENT_CLASS);
    __sqoop$field_map.put("C_CAPACITY", this.C_CAPACITY);
    __sqoop$field_map.put("C_NO_OF_MEASUREMENTS", this.C_NO_OF_MEASUREMENTS);
    __sqoop$field_map.put("C_REQ_DATE_CALIB", this.C_REQ_DATE_CALIB);
    __sqoop$field_map.put("C_CALIB_SITE", this.C_CALIB_SITE);
    __sqoop$field_map.put("C_CALIB_METHOD", this.C_CALIB_METHOD);
    __sqoop$field_map.put("C_ASSET_NAME", this.C_ASSET_NAME);
    __sqoop$field_map.put("C_MODEL_NO", this.C_MODEL_NO);
    __sqoop$field_map.put("C_PURCHASE_DATE", this.C_PURCHASE_DATE);
    __sqoop$field_map.put("C_PURCHASE_PRICE", this.C_PURCHASE_PRICE);
    __sqoop$field_map.put("C_DELIVERY_RECD", this.C_DELIVERY_RECD);
    __sqoop$field_map.put("C_DATE_OF_INSTALL", this.C_DATE_OF_INSTALL);
    __sqoop$field_map.put("C_TAG_NO", this.C_TAG_NO);
    __sqoop$field_map.put("C_SERIAL_NO", this.C_SERIAL_NO);
    __sqoop$field_map.put("C_NO_OF_ACCESSORIES", this.C_NO_OF_ACCESSORIES);
    __sqoop$field_map.put("C_ACCESSORY_DETAIL", this.C_ACCESSORY_DETAIL);
    __sqoop$field_map.put("C_ADDR_ROOM_NO", this.C_ADDR_ROOM_NO);
    __sqoop$field_map.put("C_WARRANTY_EXP_DATE", this.C_WARRANTY_EXP_DATE);
    __sqoop$field_map.put("C_UNDER_CONTRACT", this.C_UNDER_CONTRACT);
    __sqoop$field_map.put("C_CONTRACT_NO", this.C_CONTRACT_NO);
    __sqoop$field_map.put("C_CONTRACT_COMP", this.C_CONTRACT_COMP);
    __sqoop$field_map.put("C_CONTRACT_START", this.C_CONTRACT_START);
    __sqoop$field_map.put("C_CONTRACT_END", this.C_CONTRACT_END);
    __sqoop$field_map.put("C_CALIB_TYPE", this.C_CALIB_TYPE);
    __sqoop$field_map.put("C_AGE_GROUP_LABEL", this.C_AGE_GROUP_LABEL);
    __sqoop$field_map.put("C_AGE_GROUP_TEST", this.C_AGE_GROUP_TEST);
    __sqoop$field_map.put("C_TOYS_DIMENSION", this.C_TOYS_DIMENSION);
    __sqoop$field_map.put("C_TOYS_FEATURES", this.C_TOYS_FEATURES);
    __sqoop$field_map.put("C_TOYS_LABEL_DETAILS", this.C_TOYS_LABEL_DETAILS);
    __sqoop$field_map.put("C_TEXTILE_CLASS", this.C_TEXTILE_CLASS);
    __sqoop$field_map.put("C_TEXTILE_TYPE", this.C_TEXTILE_TYPE);
    __sqoop$field_map.put("C_MONTAJI_REGISTERED", this.C_MONTAJI_REGISTERED);
    __sqoop$field_map.put("C_MONTAJI_REF", this.C_MONTAJI_REF);
    __sqoop$field_map.put("C_SEALING_PACK", this.C_SEALING_PACK);
    __sqoop$field_map.put("C_TYPE", this.C_TYPE);
    __sqoop$field_map.put("C_FORM", this.C_FORM);
    __sqoop$field_map.put("C_FORM_TYPE", this.C_FORM_TYPE);
    __sqoop$field_map.put("C_FINENESS", this.C_FINENESS);
    __sqoop$field_map.put("C_SHAPE", this.C_SHAPE);
    __sqoop$field_map.put("C_LABORATORY", this.C_LABORATORY);
    __sqoop$field_map.put("C_CEMARK", this.C_CEMARK);
    __sqoop$field_map.put("C_AGE", this.C_AGE);
    __sqoop$field_map.put("C_GENDER", this.C_GENDER);
    __sqoop$field_map.put("C_OWNER_NAME", this.C_OWNER_NAME);
    __sqoop$field_map.put("C_CONSIGNMENT_NO", this.C_CONSIGNMENT_NO);
    __sqoop$field_map.put("C_SAMPLE_ORIGIN", this.C_SAMPLE_ORIGIN);
    __sqoop$field_map.put("C_MEAT_REQ_TYP", this.C_MEAT_REQ_TYP);
    __sqoop$field_map.put("C_PURPOSE_TEST", this.C_PURPOSE_TEST);
    __sqoop$field_map.put("C_COLL_CLARITY", this.C_COLL_CLARITY);
    __sqoop$field_map.put("C_COLL_DESC", this.C_COLL_DESC);
    __sqoop$field_map.put("C_COLL_ISCOLLSAMPLE", this.C_COLL_ISCOLLSAMPLE);
    __sqoop$field_map.put("C_COLL_NAME", this.C_COLL_NAME);
    __sqoop$field_map.put("C_COLL_EMIRATEID", this.C_COLL_EMIRATEID);
    __sqoop$field_map.put("C_DCL_USERID", this.C_DCL_USERID);
    __sqoop$field_map.put("C_FAILURE_DESC", this.C_FAILURE_DESC);
    __sqoop$field_map.put("C_FAILURE_COMP", this.C_FAILURE_COMP);
    __sqoop$field_map.put("C_WORK_FAIL", this.C_WORK_FAIL);
    __sqoop$field_map.put("C_PURCHASE_REF", this.C_PURCHASE_REF);
    __sqoop$field_map.put("C_PURCHASE_TYPE", this.C_PURCHASE_TYPE);
    __sqoop$field_map.put("C_PEARL_FIELD", this.C_PEARL_FIELD);
    __sqoop$field_map.put("C_POBOX", this.C_POBOX);
    __sqoop$field_map.put("C_PRODUCT_DILUENT", this.C_PRODUCT_DILUENT);
    __sqoop$field_map.put("C_ACTIVE_SUBSTANCE", this.C_ACTIVE_SUBSTANCE);
    __sqoop$field_map.put("C_EDIT_ASSET", this.C_EDIT_ASSET);
    __sqoop$field_map.put("C_PH", this.C_PH);
    __sqoop$field_map.put("C_NATUREOFACTIVITY", this.C_NATUREOFACTIVITY);
    __sqoop$field_map.put("C_CHLORINELEVEL", this.C_CHLORINELEVEL);
    __sqoop$field_map.put("C_RISK_ASSESSMENT", this.C_RISK_ASSESSMENT);
    __sqoop$field_map.put("C_SPECIMEN", this.C_SPECIMEN);
    return __sqoop$field_map;
  }

  public void getFieldMap0(Map<String, Object> __sqoop$field_map) {
    __sqoop$field_map.put("SAMPLE_NUMBER", this.SAMPLE_NUMBER);
    __sqoop$field_map.put("TEXT_ID", this.TEXT_ID);
    __sqoop$field_map.put("STATUS", this.STATUS);
    __sqoop$field_map.put("OLD_STATUS", this.OLD_STATUS);
    __sqoop$field_map.put("DISP_FLDS", this.DISP_FLDS);
    __sqoop$field_map.put("LABEL_MASK", this.LABEL_MASK);
    __sqoop$field_map.put("IN_SPEC", this.IN_SPEC);
    __sqoop$field_map.put("IN_CAL", this.IN_CAL);
    __sqoop$field_map.put("CHANGED_ON", this.CHANGED_ON);
    __sqoop$field_map.put("RE_SAMPLE", this.RE_SAMPLE);
    __sqoop$field_map.put("ALIQUOT", this.ALIQUOT);
    __sqoop$field_map.put("ORIGINAL_SAMPLE", this.ORIGINAL_SAMPLE);
    __sqoop$field_map.put("PARENT_SAMPLE", this.PARENT_SAMPLE);
    __sqoop$field_map.put("PARENT_ALIQUOT", this.PARENT_ALIQUOT);
    __sqoop$field_map.put("ALIQUOT_GROUP", this.ALIQUOT_GROUP);
    __sqoop$field_map.put("SAMPLE_VOLUME", this.SAMPLE_VOLUME);
    __sqoop$field_map.put("SAMPLE_UNITS", this.SAMPLE_UNITS);
    __sqoop$field_map.put("LOGIN_DATE", this.LOGIN_DATE);
    __sqoop$field_map.put("LOGIN_BY", this.LOGIN_BY);
    __sqoop$field_map.put("SAMPLED_DATE", this.SAMPLED_DATE);
    __sqoop$field_map.put("RECD_DATE", this.RECD_DATE);
    __sqoop$field_map.put("RECEIVED_BY", this.RECEIVED_BY);
    __sqoop$field_map.put("DATE_STARTED", this.DATE_STARTED);
    __sqoop$field_map.put("STARTED", this.STARTED);
    __sqoop$field_map.put("ASSIGNED_OPERATOR", this.ASSIGNED_OPERATOR);
    __sqoop$field_map.put("DUE_DATE", this.DUE_DATE);
    __sqoop$field_map.put("DATE_COMPLETED", this.DATE_COMPLETED);
    __sqoop$field_map.put("DATE_REVIEWED", this.DATE_REVIEWED);
    __sqoop$field_map.put("PREP", this.PREP);
    __sqoop$field_map.put("PREP_DATE", this.PREP_DATE);
    __sqoop$field_map.put("PREP_BY", this.PREP_BY);
    __sqoop$field_map.put("REVIEWER", this.REVIEWER);
    __sqoop$field_map.put("REVIEW_NOTE", this.REVIEW_NOTE);
    __sqoop$field_map.put("PRODUCT_CODE", this.PRODUCT_CODE);
    __sqoop$field_map.put("PRODUCT", this.PRODUCT);
    __sqoop$field_map.put("PRODUCT_VERSION", this.PRODUCT_VERSION);
    __sqoop$field_map.put("PRODUCT_GRADE", this.PRODUCT_GRADE);
    __sqoop$field_map.put("SAMPLING_POINT", this.SAMPLING_POINT);
    __sqoop$field_map.put("SAMPLE_TYPE", this.SAMPLE_TYPE);
    __sqoop$field_map.put("PROJECT", this.PROJECT);
    __sqoop$field_map.put("BATCH_NAME", this.BATCH_NAME);
    __sqoop$field_map.put("BATCH_TEMPLATE", this.BATCH_TEMPLATE);
    __sqoop$field_map.put("STEP", this.STEP);
    __sqoop$field_map.put("SAMPLE_NAME", this.SAMPLE_NAME);
    __sqoop$field_map.put("DESCRIPTION", this.DESCRIPTION);
    __sqoop$field_map.put("PRIORITY", this.PRIORITY);
    __sqoop$field_map.put("LOCATION", this.LOCATION);
    __sqoop$field_map.put("CUSTOMER", this.CUSTOMER);
    __sqoop$field_map.put("TEST_LIST", this.TEST_LIST);
    __sqoop$field_map.put("TEMPLATE", this.TEMPLATE);
    __sqoop$field_map.put("RECIPIENT", this.RECIPIENT);
    __sqoop$field_map.put("STANDARD", this.STANDARD);
    __sqoop$field_map.put("EXT_LINK", this.EXT_LINK);
    __sqoop$field_map.put("CONDITION", this.CONDITION);
    __sqoop$field_map.put("TIMEPOINT", this.TIMEPOINT);
    __sqoop$field_map.put("LOT", this.LOT);
    __sqoop$field_map.put("BASE_DATE", this.BASE_DATE);
    __sqoop$field_map.put("AVAILABLE_DATE", this.AVAILABLE_DATE);
    __sqoop$field_map.put("REQUIRED_DATE", this.REQUIRED_DATE);
    __sqoop$field_map.put("TARGET_DATE", this.TARGET_DATE);
    __sqoop$field_map.put("PARTIAL_SPEC", this.PARTIAL_SPEC);
    __sqoop$field_map.put("SPEC_TYPE", this.SPEC_TYPE);
    __sqoop$field_map.put("STAGE", this.STAGE);
    __sqoop$field_map.put("PRIMARY_IN_SPEC", this.PRIMARY_IN_SPEC);
    __sqoop$field_map.put("BATCH", this.BATCH);
    __sqoop$field_map.put("CHARGE_CODE", this.CHARGE_CODE);
    __sqoop$field_map.put("FORMULATION", this.FORMULATION);
    __sqoop$field_map.put("PROTOCOL_LEVEL", this.PROTOCOL_LEVEL);
    __sqoop$field_map.put("RELEASED", this.RELEASED);
    __sqoop$field_map.put("RELEASED_BY", this.RELEASED_BY);
    __sqoop$field_map.put("RELEASED_ON", this.RELEASED_ON);
    __sqoop$field_map.put("IN_CONTROL", this.IN_CONTROL);
    __sqoop$field_map.put("INVESTIGATION", this.INVESTIGATION);
    __sqoop$field_map.put("INVESTIGATED", this.INVESTIGATED);
    __sqoop$field_map.put("APPROVED", this.APPROVED);
    __sqoop$field_map.put("APPROVAL_GROUP", this.APPROVAL_GROUP);
    __sqoop$field_map.put("READY_FOR_APPROVAL", this.READY_FOR_APPROVAL);
    __sqoop$field_map.put("APPROVAL_ID", this.APPROVAL_ID);
    __sqoop$field_map.put("APPROVAL_ROUTING", this.APPROVAL_ROUTING);
    __sqoop$field_map.put("MODIFIED_RESULTS", this.MODIFIED_RESULTS);
    __sqoop$field_map.put("REPORT_NUMBER", this.REPORT_NUMBER);
    __sqoop$field_map.put("COMPOSITE", this.COMPOSITE);
    __sqoop$field_map.put("PARENT_COMPOSITE", this.PARENT_COMPOSITE);
    __sqoop$field_map.put("COMPOSITE_TEMPLATE", this.COMPOSITE_TEMPLATE);
    __sqoop$field_map.put("SEASON_DATE", this.SEASON_DATE);
    __sqoop$field_map.put("PEOPLE", this.PEOPLE);
    __sqoop$field_map.put("TEST_LOCATION", this.TEST_LOCATION);
    __sqoop$field_map.put("OWNER_LOCATION", this.OWNER_LOCATION);
    __sqoop$field_map.put("CHK_ALIQUOT_STATUS", this.CHK_ALIQUOT_STATUS);
    __sqoop$field_map.put("CHK_ALIQUOT_SPECS", this.CHK_ALIQUOT_SPECS);
    __sqoop$field_map.put("ALIQUOT_TEMPLATE", this.ALIQUOT_TEMPLATE);
    __sqoop$field_map.put("CALC_GROUP", this.CALC_GROUP);
    __sqoop$field_map.put("SAMPLE_EVENT", this.SAMPLE_EVENT);
    __sqoop$field_map.put("LABEL_ID", this.LABEL_ID);
    __sqoop$field_map.put("HAS_FLAGS", this.HAS_FLAGS);
    __sqoop$field_map.put("VARIATION", this.VARIATION);
    __sqoop$field_map.put("SAMPLED_BY", this.SAMPLED_BY);
    __sqoop$field_map.put("SAMPLED", this.SAMPLED);
    __sqoop$field_map.put("ORDER_NUM", this.ORDER_NUM);
    __sqoop$field_map.put("LAST_ORDER_NUM", this.LAST_ORDER_NUM);
    __sqoop$field_map.put("STORAGE_CONDITION", this.STORAGE_CONDITION);
    __sqoop$field_map.put("CONTAINER_TYPE", this.CONTAINER_TYPE);
    __sqoop$field_map.put("NUM_CONTAINERS", this.NUM_CONTAINERS);
    __sqoop$field_map.put("IMPORTANT_MESSAGE", this.IMPORTANT_MESSAGE);
    __sqoop$field_map.put("OBSERVATIONS", this.OBSERVATIONS);
    __sqoop$field_map.put("LAB", this.LAB);
    __sqoop$field_map.put("EXPIRATION_DATE", this.EXPIRATION_DATE);
    __sqoop$field_map.put("REQD_VOLUME", this.REQD_VOLUME);
    __sqoop$field_map.put("COLLECTION_METHOD", this.COLLECTION_METHOD);
    __sqoop$field_map.put("COLLECTION_OFFSET", this.COLLECTION_OFFSET);
    __sqoop$field_map.put("SIGNED", this.SIGNED);
    __sqoop$field_map.put("CASE_NAME", this.CASE_NAME);
    __sqoop$field_map.put("CONTRACT_NUMBER", this.CONTRACT_NUMBER);
    __sqoop$field_map.put("BILLING_ITEM_DESC", this.BILLING_ITEM_DESC);
    __sqoop$field_map.put("INTERPRETED", this.INTERPRETED);
    __sqoop$field_map.put("INTERP_TYPE", this.INTERP_TYPE);
    __sqoop$field_map.put("INSPECT_PNT_NUM", this.INSPECT_PNT_NUM);
    __sqoop$field_map.put("INSPECTION_LOT_NUM", this.INSPECTION_LOT_NUM);
    __sqoop$field_map.put("IS_INSPECT_PNT", this.IS_INSPECT_PNT);
    __sqoop$field_map.put("PLANT", this.PLANT);
    __sqoop$field_map.put("USERC1_VALUE", this.USERC1_VALUE);
    __sqoop$field_map.put("USERC2_VALUE", this.USERC2_VALUE);
    __sqoop$field_map.put("USERD1_VALUE", this.USERD1_VALUE);
    __sqoop$field_map.put("USERN1_VALUE", this.USERN1_VALUE);
    __sqoop$field_map.put("USERN2_VALUE", this.USERN2_VALUE);
    __sqoop$field_map.put("USERT1_VALUE", this.USERT1_VALUE);
    __sqoop$field_map.put("SAP_SELECTED_SET", this.SAP_SELECTED_SET);
    __sqoop$field_map.put("SAP_CODE_GROUP", this.SAP_CODE_GROUP);
    __sqoop$field_map.put("SAP_SAMPLE_NUMBER", this.SAP_SAMPLE_NUMBER);
    __sqoop$field_map.put("SAP_SS_PLANT", this.SAP_SS_PLANT);
    __sqoop$field_map.put("SAP_SAMPLE_COUNT", this.SAP_SAMPLE_COUNT);
    __sqoop$field_map.put("OPERATION_NUMBER", this.OPERATION_NUMBER);
    __sqoop$field_map.put("STORAGE_LOC_NO", this.STORAGE_LOC_NO);
    __sqoop$field_map.put("EXTERNAL_LOCATION", this.EXTERNAL_LOCATION);
    __sqoop$field_map.put("FORMULATION_NAME", this.FORMULATION_NAME);
    __sqoop$field_map.put("STANDARD_REAGENT", this.STANDARD_REAGENT);
    __sqoop$field_map.put("CONVERSION_GROUPS", this.CONVERSION_GROUPS);
    __sqoop$field_map.put("REPORTED_RSLT_OOS", this.REPORTED_RSLT_OOS);
    __sqoop$field_map.put("GROUP_NAME", this.GROUP_NAME);
    __sqoop$field_map.put("PROCESS_UNIT", this.PROCESS_UNIT);
    __sqoop$field_map.put("HAZARD", this.HAZARD);
    __sqoop$field_map.put("INSTRUMENT", this.INSTRUMENT);
    __sqoop$field_map.put("T_SITE", this.T_SITE);
    __sqoop$field_map.put("T_PLANT", this.T_PLANT);
    __sqoop$field_map.put("T_CERTIFICATE", this.T_CERTIFICATE);
    __sqoop$field_map.put("T_CONTAINER", this.T_CONTAINER);
    __sqoop$field_map.put("T_OVERDUE", this.T_OVERDUE);
    __sqoop$field_map.put("T_PO_NUMBER", this.T_PO_NUMBER);
    __sqoop$field_map.put("T_PRODUCTION_DATE", this.T_PRODUCTION_DATE);
    __sqoop$field_map.put("T_REPORT_DATE", this.T_REPORT_DATE);
    __sqoop$field_map.put("T_REQUESTED_BY", this.T_REQUESTED_BY);
    __sqoop$field_map.put("T_LONG_NOTE", this.T_LONG_NOTE);
    __sqoop$field_map.put("T_SHIFT_CODE", this.T_SHIFT_CODE);
    __sqoop$field_map.put("T_SUPP_BATCH_NO", this.T_SUPP_BATCH_NO);
    __sqoop$field_map.put("T_SUPPLIER", this.T_SUPPLIER);
    __sqoop$field_map.put("T_TRUCK_VESSEL", this.T_TRUCK_VESSEL);
    __sqoop$field_map.put("T_PLANT_RECV_BY", this.T_PLANT_RECV_BY);
    __sqoop$field_map.put("T_PLANT_RECV_DATE", this.T_PLANT_RECV_DATE);
    __sqoop$field_map.put("C_PRIORITY", this.C_PRIORITY);
    __sqoop$field_map.put("STORAGE_TEMPLATE", this.STORAGE_TEMPLATE);
    __sqoop$field_map.put("ALLOW_CHLD_ALQTS", this.ALLOW_CHLD_ALQTS);
    __sqoop$field_map.put("PHASE", this.PHASE);
    __sqoop$field_map.put("SCHEDULE_NUMBER", this.SCHEDULE_NUMBER);
    __sqoop$field_map.put("T_ACTION_NUMBER", this.T_ACTION_NUMBER);
    __sqoop$field_map.put("T_BATCH_NAME1", this.T_BATCH_NAME1);
    __sqoop$field_map.put("T_BATCH_NAME2", this.T_BATCH_NAME2);
    __sqoop$field_map.put("T_BATCH_NAME3", this.T_BATCH_NAME3);
    __sqoop$field_map.put("T_BATCH_NAME4", this.T_BATCH_NAME4);
    __sqoop$field_map.put("T_BATCH_NAME5", this.T_BATCH_NAME5);
    __sqoop$field_map.put("T_BATCH_NAME6", this.T_BATCH_NAME6);
    __sqoop$field_map.put("T_COLLECT_SCHEME", this.T_COLLECT_SCHEME);
    __sqoop$field_map.put("T_COMPOSITE_GROUP", this.T_COMPOSITE_GROUP);
    __sqoop$field_map.put("T_DISTRIBUTION_BY", this.T_DISTRIBUTION_BY);
    __sqoop$field_map.put("T_DISTRIBUTION_DATE", this.T_DISTRIBUTION_DATE);
    __sqoop$field_map.put("T_EM_PLAN", this.T_EM_PLAN);
    __sqoop$field_map.put("T_INCUB1_BATCH", this.T_INCUB1_BATCH);
    __sqoop$field_map.put("T_INCUB1_END", this.T_INCUB1_END);
    __sqoop$field_map.put("T_INCUB1_START", this.T_INCUB1_START);
    __sqoop$field_map.put("T_INCUB2_BATCH", this.T_INCUB2_BATCH);
    __sqoop$field_map.put("T_INCUB2_END", this.T_INCUB2_END);
    __sqoop$field_map.put("T_INCUB2_START", this.T_INCUB2_START);
    __sqoop$field_map.put("T_MEDIA_REFERENCE", this.T_MEDIA_REFERENCE);
    __sqoop$field_map.put("T_ORIGINAL_SAMPLE", this.T_ORIGINAL_SAMPLE);
    __sqoop$field_map.put("T_PERSONNEL", this.T_PERSONNEL);
    __sqoop$field_map.put("T_PERSONNEL_SET", this.T_PERSONNEL_SET);
    __sqoop$field_map.put("T_SAMPLE_TYPE", this.T_SAMPLE_TYPE);
    __sqoop$field_map.put("T_SCHEDULE_GROUP", this.T_SCHEDULE_GROUP);
    __sqoop$field_map.put("T_SUITE", this.T_SUITE);
    __sqoop$field_map.put("T_TRANSIT_LOCATION", this.T_TRANSIT_LOCATION);
    __sqoop$field_map.put("T_VALIDATION", this.T_VALIDATION);
    __sqoop$field_map.put("C_REFERENCE_ID", this.C_REFERENCE_ID);
    __sqoop$field_map.put("C_SAMPLING_REASON", this.C_SAMPLING_REASON);
    __sqoop$field_map.put("C_CUSTOMER_TYPE", this.C_CUSTOMER_TYPE);
    __sqoop$field_map.put("C_REQUEST_TYPE", this.C_REQUEST_TYPE);
    __sqoop$field_map.put("C_OTHER_SAMPLE_SOURCE", this.C_OTHER_SAMPLE_SOURCE);
    __sqoop$field_map.put("C_CUST_ID", this.C_CUST_ID);
    __sqoop$field_map.put("C_CLIENT_TYPE", this.C_CLIENT_TYPE);
    __sqoop$field_map.put("C_REQ_SAMP_TYPE", this.C_REQ_SAMP_TYPE);
    __sqoop$field_map.put("C_SAMPLE_SOURCE", this.C_SAMPLE_SOURCE);
    __sqoop$field_map.put("C_DM_BARCODE", this.C_DM_BARCODE);
    __sqoop$field_map.put("C_REQ_EXT_REFERENCE", this.C_REQ_EXT_REFERENCE);
    __sqoop$field_map.put("C_EXPRESS_SERVICE", this.C_EXPRESS_SERVICE);
    __sqoop$field_map.put("C_HARDCOPY_REQUIRED", this.C_HARDCOPY_REQUIRED);
    __sqoop$field_map.put("C_REQ_REMARKS", this.C_REQ_REMARKS);
    __sqoop$field_map.put("C_REQ_COPIES", this.C_REQ_COPIES);
    __sqoop$field_map.put("C_REQ_EDIT", this.C_REQ_EDIT);
    __sqoop$field_map.put("C_TOTAL_SERVICE_FEE", this.C_TOTAL_SERVICE_FEE);
    __sqoop$field_map.put("C_PRODUCT_GROUP", this.C_PRODUCT_GROUP);
    __sqoop$field_map.put("C_PRODUCT_CATEGORY", this.C_PRODUCT_CATEGORY);
    __sqoop$field_map.put("C_PRODUCTION_DATE", this.C_PRODUCTION_DATE);
    __sqoop$field_map.put("C_NO_OF_UNIT", this.C_NO_OF_UNIT);
    __sqoop$field_map.put("C_SAMPLE_CONDITION", this.C_SAMPLE_CONDITION);
    __sqoop$field_map.put("C_TEMP_REC", this.C_TEMP_REC);
    __sqoop$field_map.put("C_POINT_OF_SAMPLING", this.C_POINT_OF_SAMPLING);
    __sqoop$field_map.put("C_REQ_SAMP_COLLECTION", this.C_REQ_SAMP_COLLECTION);
    __sqoop$field_map.put("C_REQ_SAMP_BAL_RETURN", this.C_REQ_SAMP_BAL_RETURN);
    __sqoop$field_map.put("C_HAZARD", this.C_HAZARD);
    __sqoop$field_map.put("C_BATCH_NO", this.C_BATCH_NO);
    __sqoop$field_map.put("C_REQUEST_NO", this.C_REQUEST_NO);
    __sqoop$field_map.put("C_BILLING_TYPE", this.C_BILLING_TYPE);
    __sqoop$field_map.put("C_TOTAL_TEST_CHARGE", this.C_TOTAL_TEST_CHARGE);
    __sqoop$field_map.put("C_VOUCHER", this.C_VOUCHER);
    __sqoop$field_map.put("C_ERAD_NO", this.C_ERAD_NO);
    __sqoop$field_map.put("C_RECEIPT", this.C_RECEIPT);
    __sqoop$field_map.put("C_PAYMENT_DT", this.C_PAYMENT_DT);
    __sqoop$field_map.put("C_PAYMENT_SRC", this.C_PAYMENT_SRC);
    __sqoop$field_map.put("C_PAYMENT_STATUS", this.C_PAYMENT_STATUS);
    __sqoop$field_map.put("C_CUST_DELIVERY_DATE", this.C_CUST_DELIVERY_DATE);
    __sqoop$field_map.put("C_SAMPLE_OPINION", this.C_SAMPLE_OPINION);
    __sqoop$field_map.put("C_SUBCAT_ID", this.C_SUBCAT_ID);
    __sqoop$field_map.put("C_PRODCAT_ID", this.C_PRODCAT_ID);
    __sqoop$field_map.put("C_PROD_GROUP_ID", this.C_PROD_GROUP_ID);
    __sqoop$field_map.put("C_MSG_ID", this.C_MSG_ID);
    __sqoop$field_map.put("C_MSG_DIGEST", this.C_MSG_DIGEST);
    __sqoop$field_map.put("C_REQ_SOURCE", this.C_REQ_SOURCE);
    __sqoop$field_map.put("C_ITEM_ID", this.C_ITEM_ID);
    __sqoop$field_map.put("C_SRC_REQ_ID", this.C_SRC_REQ_ID);
    __sqoop$field_map.put("C_EXPECTED_DATE", this.C_EXPECTED_DATE);
    __sqoop$field_map.put("C_PRODUCT_DESC", this.C_PRODUCT_DESC);
    __sqoop$field_map.put("C_DATE_ONHOLD", this.C_DATE_ONHOLD);
    __sqoop$field_map.put("C_DATE_OFFHOLD", this.C_DATE_OFFHOLD);
    __sqoop$field_map.put("C_ONHOLD_REASON", this.C_ONHOLD_REASON);
    __sqoop$field_map.put("LATITUDE", this.LATITUDE);
    __sqoop$field_map.put("LONGITUDE", this.LONGITUDE);
    __sqoop$field_map.put("C_ON_SITE_PRESERVATION", this.C_ON_SITE_PRESERVATION);
    __sqoop$field_map.put("C_PRESERVATION_METHOD", this.C_PRESERVATION_METHOD);
    __sqoop$field_map.put("C_SAMPLING_PROCEDURE", this.C_SAMPLING_PROCEDURE);
    __sqoop$field_map.put("C_SAMPLING_APPARATUS", this.C_SAMPLING_APPARATUS);
    __sqoop$field_map.put("C_APPEARANCE", this.C_APPEARANCE);
    __sqoop$field_map.put("C_COLOUR", this.C_COLOUR);
    __sqoop$field_map.put("C_ODOUR", this.C_ODOUR);
    __sqoop$field_map.put("C_SAMPLING_COLLECTION_LOC", this.C_SAMPLING_COLLECTION_LOC);
    __sqoop$field_map.put("C_REPORT_ID", this.C_REPORT_ID);
    __sqoop$field_map.put("C_DELIVERED_BY", this.C_DELIVERED_BY);
    __sqoop$field_map.put("C_MAKANI_NO", this.C_MAKANI_NO);
    __sqoop$field_map.put("C_COUNTRY", this.C_COUNTRY);
    __sqoop$field_map.put("C_BUILDING_FLOOR", this.C_BUILDING_FLOOR);
    __sqoop$field_map.put("C_LOCATION_DESC", this.C_LOCATION_DESC);
    __sqoop$field_map.put("C_ITEM_BARCODE", this.C_ITEM_BARCODE);
    __sqoop$field_map.put("C_ITEM_BRAND", this.C_ITEM_BRAND);
    __sqoop$field_map.put("C_MANUFACTURER", this.C_MANUFACTURER);
    __sqoop$field_map.put("C_COUNTRY_ORIGIN", this.C_COUNTRY_ORIGIN);
    __sqoop$field_map.put("C_ITEM_TRADE_NAME", this.C_ITEM_TRADE_NAME);
    __sqoop$field_map.put("C_PROCESS_ONE", this.C_PROCESS_ONE);
    __sqoop$field_map.put("C_PROCESS_TWO", this.C_PROCESS_TWO);
    __sqoop$field_map.put("C_SHELF_LIFE", this.C_SHELF_LIFE);
    __sqoop$field_map.put("C_SHELF_LIFE_UNIT", this.C_SHELF_LIFE_UNIT);
    __sqoop$field_map.put("C_STORAGE_CONDITION", this.C_STORAGE_CONDITION);
    __sqoop$field_map.put("C_WEIGHT", this.C_WEIGHT);
    __sqoop$field_map.put("C_WEIGHT_UNIT", this.C_WEIGHT_UNIT);
    __sqoop$field_map.put("C_PACKAGING_TYPE", this.C_PACKAGING_TYPE);
    __sqoop$field_map.put("C_TEST_TYPE", this.C_TEST_TYPE);
    __sqoop$field_map.put("C_EXTERNAL_REFERENCE", this.C_EXTERNAL_REFERENCE);
    __sqoop$field_map.put("C_NOMINAL_SIZE", this.C_NOMINAL_SIZE);
    __sqoop$field_map.put("C_LAYER_MIX_TYPE", this.C_LAYER_MIX_TYPE);
    __sqoop$field_map.put("C_SAMPLE_UNIT", this.C_SAMPLE_UNIT);
    __sqoop$field_map.put("C_SAMP_QNTY", this.C_SAMP_QNTY);
    __sqoop$field_map.put("C_SAMPLED_BY", this.C_SAMPLED_BY);
    __sqoop$field_map.put("C_BITUMEN_LOCALSUPPLIER", this.C_BITUMEN_LOCALSUPPLIER);
    __sqoop$field_map.put("C_BLOCK_TOTALBUNDLES", this.C_BLOCK_TOTALBUNDLES);
    __sqoop$field_map.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX", this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEX);
    __sqoop$field_map.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY", this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEY);
    __sqoop$field_map.put("C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ", this.C_BLOCK_LAYOUTOFBLOCKSPERBUNDLEZ);
    __sqoop$field_map.put("C_BLOCK_BLOCKSPERBUNDLE", this.C_BLOCK_BLOCKSPERBUNDLE);
    __sqoop$field_map.put("C_BLOCK_RELATEDCERTIFICATIONREQUESTID", this.C_BLOCK_RELATEDCERTIFICATIONREQUESTID);
    __sqoop$field_map.put("C_MORTAR_WATERORCEMENTRATIO", this.C_MORTAR_WATERORCEMENTRATIO);
    __sqoop$field_map.put("C_MORTAR_TYPEOFMORTAR", this.C_MORTAR_TYPEOFMORTAR);
    __sqoop$field_map.put("C_THERMALINSULATION_NOMTHICKNESS", this.C_THERMALINSULATION_NOMTHICKNESS);
    __sqoop$field_map.put("C_THERMALINSULATION_NOMDENSITY", this.C_THERMALINSULATION_NOMDENSITY);
    __sqoop$field_map.put("C_THERMALINSULATION_NOMDIAMETER", this.C_THERMALINSULATION_NOMDIAMETER);
    __sqoop$field_map.put("C_THERMALINSULATION_FACINGTYPE", this.C_THERMALINSULATION_FACINGTYPE);
    __sqoop$field_map.put("C_THERMALINSULATION_FACINGDESCRIPTION", this.C_THERMALINSULATION_FACINGDESCRIPTION);
    __sqoop$field_map.put("C_THERMALINSULATION_TESTTEMPORHUMIDITY", this.C_THERMALINSULATION_TESTTEMPORHUMIDITY);
    __sqoop$field_map.put("C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY", this.C_THERMALINSULATION_CONDITIONINGTEMPORHUMIDITY);
    __sqoop$field_map.put("C_THERMALINSULATION_AGEOFSAMPLEDAYS", this.C_THERMALINSULATION_AGEOFSAMPLEDAYS);
    __sqoop$field_map.put("C_LUBEOIL_VISCOSITYGRADE", this.C_LUBEOIL_VISCOSITYGRADE);
    __sqoop$field_map.put("C_ASPHALT_REFGMB", this.C_ASPHALT_REFGMB);
    __sqoop$field_map.put("C_ASPHALT_REFGSB", this.C_ASPHALT_REFGSB);
    __sqoop$field_map.put("C_ASPHALT_REFGSE", this.C_ASPHALT_REFGSE);
    __sqoop$field_map.put("C_ASPHALT_REFGB", this.C_ASPHALT_REFGB);
    __sqoop$field_map.put("C_ASPHALT_LAYINGDATE", this.C_ASPHALT_LAYINGDATE);
    __sqoop$field_map.put("C_ASPHALT_REFMARSHALLREQNO", this.C_ASPHALT_REFMARSHALLREQNO);
    __sqoop$field_map.put("C_ASPHALT_REFBITUMENREQNO", this.C_ASPHALT_REFBITUMENREQNO);
    __sqoop$field_map.put("C_ASPHALT_REFMIX", this.C_ASPHALT_REFMIX);
    __sqoop$field_map.put("C_ASPHALT_CALIBRATIONFACTOR", this.C_ASPHALT_CALIBRATIONFACTOR);
    __sqoop$field_map.put("C_ASPHALT_GRADINGORBITUMENSPECS", this.C_ASPHALT_GRADINGORBITUMENSPECS);
    __sqoop$field_map.put("C_ASPHALT_OTHERSPECS", this.C_ASPHALT_OTHERSPECS);
    __sqoop$field_map.put("C_CEMENT_CLASSOFCEMENT", this.C_CEMENT_CLASSOFCEMENT);
    __sqoop$field_map.put("C_CONCRETE_GRADEOFCONCRETE", this.C_CONCRETE_GRADEOFCONCRETE);
    __sqoop$field_map.put("C_CONCRETE_CEMENTCONTENT", this.C_CONCRETE_CEMENTCONTENT);
    __sqoop$field_map.put("C_CONCRETE_TESTINGAGEOFSAMPLE", this.C_CONCRETE_TESTINGAGEOFSAMPLE);
    __sqoop$field_map.put("C_CONCRETE_ESTIMATEDTESTDATE", this.C_CONCRETE_ESTIMATEDTESTDATE);
    __sqoop$field_map.put("C_CONCRETE_TRUCKNUMBER", this.C_CONCRETE_TRUCKNUMBER);
    __sqoop$field_map.put("C_CONCRETE_PLACEOFMAKINGCUBES", this.C_CONCRETE_PLACEOFMAKINGCUBES);
    __sqoop$field_map.put("C_CONCRETE_EQUIPMENTTYPEUSED", this.C_CONCRETE_EQUIPMENTTYPEUSED);
    __sqoop$field_map.put("C_CONCRETE_CURINGORSTORAGECONDITIONS", this.C_CONCRETE_CURINGORSTORAGECONDITIONS);
    __sqoop$field_map.put("C_CONCRETE_METHODOFCOMPACTION", this.C_CONCRETE_METHODOFCOMPACTION);
    __sqoop$field_map.put("C_CONCRETE_CONDITIONOFSAMPLE", this.C_CONCRETE_CONDITIONOFSAMPLE);
    __sqoop$field_map.put("C_FRESHCONCRETE_CEMENT", this.C_FRESHCONCRETE_CEMENT);
    __sqoop$field_map.put("C_FRESHCONCRETE_CEMENTTYPE", this.C_FRESHCONCRETE_CEMENTTYPE);
    __sqoop$field_map.put("C_FRESHCONCRETE_ADMIXTURE", this.C_FRESHCONCRETE_ADMIXTURE);
    __sqoop$field_map.put("C_FRESHCONCRETE_ADMIXTURETYPE", this.C_FRESHCONCRETE_ADMIXTURETYPE);
    __sqoop$field_map.put("C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE", this.C_FRESHCONCRETE_ADMIXTURE_PERCENTAGE);
    __sqoop$field_map.put("C_FRESHCONCRETE_AGGREGATE_20MM", this.C_FRESHCONCRETE_AGGREGATE_20MM);
    __sqoop$field_map.put("C_FRESHCONCRETE_AGGREGATE_10MM", this.C_FRESHCONCRETE_AGGREGATE_10MM);
    __sqoop$field_map.put("C_FRESHCONCRETE_AGGREGATE_1MM", this.C_FRESHCONCRETE_AGGREGATE_1MM);
    __sqoop$field_map.put("C_FRESHCONCRETE_CONCRETE_CLASS_GRADE", this.C_FRESHCONCRETE_CONCRETE_CLASS_GRADE);
    __sqoop$field_map.put("C_SOIL_MDD", this.C_SOIL_MDD);
    __sqoop$field_map.put("C_SOIL_OMC", this.C_SOIL_OMC);
    __sqoop$field_map.put("C_SOIL_MDD_OMC_REF", this.C_SOIL_MDD_OMC_REF);
    __sqoop$field_map.put("C_SOIL_BFRL", this.C_SOIL_BFRL);
    __sqoop$field_map.put("C_SOIL_LAYER_THICKNESSMM", this.C_SOIL_LAYER_THICKNESSMM);
    __sqoop$field_map.put("C_SOIL_SOURCE_MINERAL_AGG", this.C_SOIL_SOURCE_MINERAL_AGG);
    __sqoop$field_map.put("C_STEEL_MANUFACTURER_CERT_NO", this.C_STEEL_MANUFACTURER_CERT_NO);
    __sqoop$field_map.put("C_STEEL_GRADE_STEEL", this.C_STEEL_GRADE_STEEL);
    __sqoop$field_map.put("C_STEEL_LOCAL_SUPPLIER", this.C_STEEL_LOCAL_SUPPLIER);
    __sqoop$field_map.put("C_STEEL_HEAT_NUMBER", this.C_STEEL_HEAT_NUMBER);
    __sqoop$field_map.put("C_PRODUCT_TEST_SERV", this.C_PRODUCT_TEST_SERV);
    __sqoop$field_map.put("C_SAMPLING_METHOD", this.C_SAMPLING_METHOD);
    __sqoop$field_map.put("C_SAMPLE_DESC", this.C_SAMPLE_DESC);
    __sqoop$field_map.put("C_BATCH_SIZE", this.C_BATCH_SIZE);
    __sqoop$field_map.put("C_UNITNO", this.C_UNITNO);
    __sqoop$field_map.put("C_UNITSIZE", this.C_UNITSIZE);
    __sqoop$field_map.put("C_NO_INCREMENT", this.C_NO_INCREMENT);
    __sqoop$field_map.put("C_MORE_SAMPLE_NOTE", this.C_MORE_SAMPLE_NOTE);
    __sqoop$field_map.put("C_STAGES", this.C_STAGES);
    __sqoop$field_map.put("C_RETURN_NOTE", this.C_RETURN_NOTE);
    __sqoop$field_map.put("C_DISCARD", this.C_DISCARD);
    __sqoop$field_map.put("C_DISCARD_DATE", this.C_DISCARD_DATE);
    __sqoop$field_map.put("C_DISCARD_BY", this.C_DISCARD_BY);
    __sqoop$field_map.put("C_TRAVEL_CALCULATED", this.C_TRAVEL_CALCULATED);
    __sqoop$field_map.put("C_PHYSICAL_OBSERVATION", this.C_PHYSICAL_OBSERVATION);
    __sqoop$field_map.put("C_SENDER_NO", this.C_SENDER_NO);
    __sqoop$field_map.put("C_REF_SENDER_NO", this.C_REF_SENDER_NO);
    __sqoop$field_map.put("C_TESTLAB", this.C_TESTLAB);
    __sqoop$field_map.put("C_PRIMARY_RESULT", this.C_PRIMARY_RESULT);
    __sqoop$field_map.put("C_PRIMARY_REPORT_NO", this.C_PRIMARY_REPORT_NO);
    __sqoop$field_map.put("C_REF_RESULT", this.C_REF_RESULT);
    __sqoop$field_map.put("C_REF_REPORT_NO", this.C_REF_REPORT_NO);
    __sqoop$field_map.put("C_DETERMINATION", this.C_DETERMINATION);
    __sqoop$field_map.put("C_EQUIPMENT_TYPE", this.C_EQUIPMENT_TYPE);
    __sqoop$field_map.put("C_EQUIPMENT_CLASS", this.C_EQUIPMENT_CLASS);
    __sqoop$field_map.put("C_CAPACITY", this.C_CAPACITY);
    __sqoop$field_map.put("C_NO_OF_MEASUREMENTS", this.C_NO_OF_MEASUREMENTS);
    __sqoop$field_map.put("C_REQ_DATE_CALIB", this.C_REQ_DATE_CALIB);
    __sqoop$field_map.put("C_CALIB_SITE", this.C_CALIB_SITE);
    __sqoop$field_map.put("C_CALIB_METHOD", this.C_CALIB_METHOD);
    __sqoop$field_map.put("C_ASSET_NAME", this.C_ASSET_NAME);
    __sqoop$field_map.put("C_MODEL_NO", this.C_MODEL_NO);
    __sqoop$field_map.put("C_PURCHASE_DATE", this.C_PURCHASE_DATE);
    __sqoop$field_map.put("C_PURCHASE_PRICE", this.C_PURCHASE_PRICE);
    __sqoop$field_map.put("C_DELIVERY_RECD", this.C_DELIVERY_RECD);
    __sqoop$field_map.put("C_DATE_OF_INSTALL", this.C_DATE_OF_INSTALL);
    __sqoop$field_map.put("C_TAG_NO", this.C_TAG_NO);
    __sqoop$field_map.put("C_SERIAL_NO", this.C_SERIAL_NO);
    __sqoop$field_map.put("C_NO_OF_ACCESSORIES", this.C_NO_OF_ACCESSORIES);
    __sqoop$field_map.put("C_ACCESSORY_DETAIL", this.C_ACCESSORY_DETAIL);
    __sqoop$field_map.put("C_ADDR_ROOM_NO", this.C_ADDR_ROOM_NO);
    __sqoop$field_map.put("C_WARRANTY_EXP_DATE", this.C_WARRANTY_EXP_DATE);
    __sqoop$field_map.put("C_UNDER_CONTRACT", this.C_UNDER_CONTRACT);
    __sqoop$field_map.put("C_CONTRACT_NO", this.C_CONTRACT_NO);
    __sqoop$field_map.put("C_CONTRACT_COMP", this.C_CONTRACT_COMP);
    __sqoop$field_map.put("C_CONTRACT_START", this.C_CONTRACT_START);
    __sqoop$field_map.put("C_CONTRACT_END", this.C_CONTRACT_END);
    __sqoop$field_map.put("C_CALIB_TYPE", this.C_CALIB_TYPE);
    __sqoop$field_map.put("C_AGE_GROUP_LABEL", this.C_AGE_GROUP_LABEL);
    __sqoop$field_map.put("C_AGE_GROUP_TEST", this.C_AGE_GROUP_TEST);
    __sqoop$field_map.put("C_TOYS_DIMENSION", this.C_TOYS_DIMENSION);
    __sqoop$field_map.put("C_TOYS_FEATURES", this.C_TOYS_FEATURES);
    __sqoop$field_map.put("C_TOYS_LABEL_DETAILS", this.C_TOYS_LABEL_DETAILS);
    __sqoop$field_map.put("C_TEXTILE_CLASS", this.C_TEXTILE_CLASS);
    __sqoop$field_map.put("C_TEXTILE_TYPE", this.C_TEXTILE_TYPE);
    __sqoop$field_map.put("C_MONTAJI_REGISTERED", this.C_MONTAJI_REGISTERED);
    __sqoop$field_map.put("C_MONTAJI_REF", this.C_MONTAJI_REF);
    __sqoop$field_map.put("C_SEALING_PACK", this.C_SEALING_PACK);
    __sqoop$field_map.put("C_TYPE", this.C_TYPE);
    __sqoop$field_map.put("C_FORM", this.C_FORM);
    __sqoop$field_map.put("C_FORM_TYPE", this.C_FORM_TYPE);
    __sqoop$field_map.put("C_FINENESS", this.C_FINENESS);
    __sqoop$field_map.put("C_SHAPE", this.C_SHAPE);
    __sqoop$field_map.put("C_LABORATORY", this.C_LABORATORY);
    __sqoop$field_map.put("C_CEMARK", this.C_CEMARK);
    __sqoop$field_map.put("C_AGE", this.C_AGE);
    __sqoop$field_map.put("C_GENDER", this.C_GENDER);
    __sqoop$field_map.put("C_OWNER_NAME", this.C_OWNER_NAME);
    __sqoop$field_map.put("C_CONSIGNMENT_NO", this.C_CONSIGNMENT_NO);
    __sqoop$field_map.put("C_SAMPLE_ORIGIN", this.C_SAMPLE_ORIGIN);
    __sqoop$field_map.put("C_MEAT_REQ_TYP", this.C_MEAT_REQ_TYP);
    __sqoop$field_map.put("C_PURPOSE_TEST", this.C_PURPOSE_TEST);
    __sqoop$field_map.put("C_COLL_CLARITY", this.C_COLL_CLARITY);
    __sqoop$field_map.put("C_COLL_DESC", this.C_COLL_DESC);
    __sqoop$field_map.put("C_COLL_ISCOLLSAMPLE", this.C_COLL_ISCOLLSAMPLE);
    __sqoop$field_map.put("C_COLL_NAME", this.C_COLL_NAME);
    __sqoop$field_map.put("C_COLL_EMIRATEID", this.C_COLL_EMIRATEID);
    __sqoop$field_map.put("C_DCL_USERID", this.C_DCL_USERID);
    __sqoop$field_map.put("C_FAILURE_DESC", this.C_FAILURE_DESC);
    __sqoop$field_map.put("C_FAILURE_COMP", this.C_FAILURE_COMP);
    __sqoop$field_map.put("C_WORK_FAIL", this.C_WORK_FAIL);
    __sqoop$field_map.put("C_PURCHASE_REF", this.C_PURCHASE_REF);
    __sqoop$field_map.put("C_PURCHASE_TYPE", this.C_PURCHASE_TYPE);
    __sqoop$field_map.put("C_PEARL_FIELD", this.C_PEARL_FIELD);
    __sqoop$field_map.put("C_POBOX", this.C_POBOX);
    __sqoop$field_map.put("C_PRODUCT_DILUENT", this.C_PRODUCT_DILUENT);
    __sqoop$field_map.put("C_ACTIVE_SUBSTANCE", this.C_ACTIVE_SUBSTANCE);
    __sqoop$field_map.put("C_EDIT_ASSET", this.C_EDIT_ASSET);
    __sqoop$field_map.put("C_PH", this.C_PH);
    __sqoop$field_map.put("C_NATUREOFACTIVITY", this.C_NATUREOFACTIVITY);
    __sqoop$field_map.put("C_CHLORINELEVEL", this.C_CHLORINELEVEL);
    __sqoop$field_map.put("C_RISK_ASSESSMENT", this.C_RISK_ASSESSMENT);
    __sqoop$field_map.put("C_SPECIMEN", this.C_SPECIMEN);
  }

  public void setField(String __fieldName, Object __fieldVal) {
    if (!setters.containsKey(__fieldName)) {
      throw new RuntimeException("No such field:"+__fieldName);
    }
    setters.get(__fieldName).setField(__fieldVal);
  }

}
